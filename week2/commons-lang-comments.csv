Pull Request Number,Title,Merged,Time to Merge,Comments,Review Comments,Comment Messages,Review Messages,Lines of Code Changed
1036,Typo in EnumUtils class,Yes,2:53:02,0,0,[],['Thanks!'],4
1035,Механический перевод тестов на spock,No,,1,0,[],[],918
1034,Bump actions/cache from 3.2.5 to 3.2.6,Yes,0:39:05,0,0,[],[],6
1033,"[LANG-1694] MethodUtils.getMatchingMethod() fails with ""Found multiple candidates""",Yes,"6 days, 10:05:49",4,0,[],[],16
1032,"[LANG-1694]'MethodUtils.getMatchingMethod' fails with ""Found multiple candidates"" when the method is abstract",No,,2,0,[],[],20
1031,(doc) Fix typos in Javadoc,Yes,0:26:10,2,0,[],['Thanks!!'],6
1030,Added new example for containsAny method,No,,4,0,[],[],1
1029,Added empty string example for appendIfMissing method,No,,1,0,[],[],1
1028,Bump actions/cache from 3.2.4 to 3.2.5,Yes,0:06:42,1,0,[],[''],6
1027,Bump actions/setup-java from 3.9.0 to 3.10.0,Yes,0:05:47,1,0,[],[''],4
1026,Use (<p>) to split the text to different paragraphs in Javadoc comments.,No,,7,6,"['Uh?', '`<p>`This is a paragraph.`</p>`', 'done', 'Did you not see my example?', 'Are you not trying a local build before you push to git?', ""@arturobernalg \r\n`<p>`This is a paragraph.`</p>`, you can't embed lists per the errors in the build. Again, run a 'mvn' build before you push and you will discover this type of issue without forcing reviewers to ping you for broken builds. TY.""]","['', '', '', '', '', '']",200
1025,Bump junit-pioneer from 1.9.1 to 2.0.0,No,,1,0,[],[],2
1024,Bump actions/cache from 3.2.3 to 3.2.4,Yes,0:24:56,1,0,[],[''],6
1023,Use qualifiers removing unnecessary object allocation.,No,,1,0,[],[],4
1022,Use Objects.requireNonNull() directly.,Yes,"11 days, 19:52:18",1,0,[],[],12
1020,Bump maven-checkstyle-plugin from 3.2.0 to 3.2.1,No,,2,0,[],[],2
1019,Bump actions/cache from 3.2.2 to 3.2.3,Yes,1:35:36,1,0,[],[],6
1018,Several optimizations in the method formatDurationWords,No,,1,0,[],[],67
1017,Fixes typos in javadoc,Yes,19:04:28,2,0,[],['Thank you!'],20
1016,Removes unnecessary method references,No,,2,0,[],"[""+0 I'm fine either way, but I don't mind it including the method name (easier to guess where the code is going without opening the other file?).\r\n\r\nThanks! ""]",4
1015,Explicitly checks string for emptiness to prevent the exception logic overhead,No,,7,0,[],[],36
1014,Bump actions/checkout from 3.2.0 to 3.3.0,Yes,3:32:58,1,0,[],[],8
1013,Bump actions/upload-artifact from 3.1.1 to 3.1.2,Yes,3:32:47,1,0,[],[],2
1012,Bump easymock from 5.0.1 to 5.1.0,Yes,0:25:49,0,0,[],[],2
1011,Bump commons-parent from 55 to 56,Yes,0:25:07,0,0,[],[],2
1010,Bump checkstyle from 9.3 to 10.6.0,No,,1,0,[],[],2
1009,Add example for space in StringUtils#indexOfIgnoreCase(),Yes,"38 days, 22:38:04",1,0,[],[''],1
1008,Make java.desktop module optional,No,,0,0,[],[],108
1007,Added new examples for rightPad method,No,,4,0,[],[],4
1006,Added empty string example for isMixedCase method.,Yes,1:15:36,2,0,[],['Thanks!'],1
1005,formatted java.lang package.,No,,1,0,[],['Thanks for the PR. I **think** this file is generated automatically by the ... build or the release plug-in. This text comes from `pom.xml` and will be replaced when the file is re-generated (not sure if the syntax could be updated in `pom.xml` either).'],4
1004,Bump actions/cache from 3.2.1 to 3.2.2,Yes,0:06:16,1,0,[],[],6
1003,Bump ossf/scorecard-action from 2.1.0 to 2.1.2,Yes,4:18:58,0,0,[],[],2
1002,Bump actions/cache from 3.0.11 to 3.2.1,Yes,2:33:23,0,0,[],[''],6
1001,Fix typo,Yes,4:37:06,1,0,[],[],2
1000,Bump commons-parent from 54 to 55,Yes,0:52:43,1,0,[],[],2
999,Bump ossf/scorecard-action from 2.0.6 to 2.1.0,Yes,0:54:09,1,0,[],[],2
998,Bump actions/setup-java from 3.8.0 to 3.9.0,Yes,0:54:29,1,0,[],[''],4
997,Bump actions/checkout from 3.1.0 to 3.2.0,Yes,0:54:48,1,0,[],[''],8
996,Bump actions/setup-java from 3.6.0 to 3.8.0,Yes,0:10:03,0,0,[],[],4
995,Bump junit-pioneer from 1.9.0 to 1.9.1,Yes,0:19:50,0,0,[],[''],2
994,Bump checkstyle from 9.3 to 10.5.0,No,,1,0,[],[],2
993,NumberUtils check if Number is null or zero,No,,1,0,[],[],112
992,NumberUtils check if Number is null or zero,No,,2,0,[],[],51
991,Bump junit-pioneer from 1.8.0 to 1.9.0,Yes,4:52:54,0,0,[],[''],4
990,Bump jmh.version from 1.35 to 1.36,Yes,4:51:13,0,0,[],[''],4
989,Bump spotbugs-maven-plugin from 4.7.2.1 to 4.7.3.0,Yes,18:19:28,1,0,[],[''],4
988,Bump junit-pioneer from 1.7.1 to 1.8.0,Yes,18:21:22,1,0,[],[''],4
987,Bump checkstyle from 9.3 to 10.4,No,,2,0,[],[],2
986,Bump easymock from 5.0.0 to 5.0.1,Yes,"2 days, 3:58:02",0,0,[],[],2
985,Bump actions/upload-artifact from 3.1.0 to 3.1.1,Yes,"2 days, 3:58:56",1,0,[],[],2
984,Use IntStream,No,,1,1,['The previous implementation was a lot easier to read and created less garbage. This one introduces a bunch of unnecessary objects at seemingly no benefit?'],[''],36
983,Simplify streams.,No,,1,1,['Why clutter up the code with all these type-casts? Just let the compiler pick up the `long` version of the JUnit API IMO.'],"['', 'Hi @arturobernalg:  See my inline comment.']",35
982,Remove unnecessary else conditions.,No,,1,0,[],['-1 as this change deletes helpful documentation.'],3
981,Fix simple broken javadoc.,Yes,20:25:43,1,0,[],[],5
980,Make a non-access modifier local variables.,No,,1,0,[],[],42
979,Use constant properties instead.,No,,0,0,[],[],8
978,Bump ossf/scorecard-action from 1.1.2 to 2.0.6,No,,1,0,[],[],2
977,Bump actions/setup-java from 3.5.1 to 3.6.0,Yes,12:18:08,0,0,[],[''],4
976,Use java stream in ArrayUtils.,No,,4,0,[],[],88
975,Use java stream in TypeUtils.,No,,1,0,[],[],122
974,Use java stream in StringUtils.,No,,0,0,[],[],192
973,Bump spotbugs from 4.7.2 to 4.7.3,Yes,1:11:28,1,0,[],[],2
972,Bump easymock from 4.3 to 5.0.0,Yes,1:12:47,0,0,[],[],2
971,Bump spotbugs-maven-plugin from 4.7.2.0 to 4.7.2.1,Yes,2:20:38,1,0,[],[],2
970,Bump actions/cache from 3.0.10 to 3.0.11,Yes,2:22:19,0,0,[],[],6
969,Add and use PAD character constant for ' '.,No,,1,6,"['Does not need to be public.', 'done', 'No need for a blank Javadoc line.', 'done', 'The concept here is not ""padding"", it\'s ""spacing"", so it does not feel appropriate to use the name ""PAD"".  Note that we have a SPACE constant already but it\'s a String, not a char, so maybe we need a private space char constant. I\'m not sure.', ""HI @garydgregory .You're right., I have the same doubt. For the moment I removed that change ""]","['', '', '', '', '', '']",15
968, Add CalendarUtils#getDayOfYear(),Yes,"4 days, 0:49:05",1,2,"['Wrong version.', 'done. Set to 3.13.0']","['', '']",15
967,"add StringUtils.substringBeforeLast(String, int)",No,,2,0,[],[],35
966,Make a non-access modifier local variables.,Yes,1:00:18,1,0,[],[],8
965,Remove unnecessary conditions. It's no need it after assigns tmp to duration,No,,1,2,"['Or is it a bug? Maybe a copypasta bug where accidentally lines 190 and 192 were duplicated? Because there are `replaceOne` for ""hour"" and ""minute"", and this block that was removed has the part for ""seconds"".', ""Hi @kinow \r\nYes, could be a bug as well.  In any case we don't need that conditions.\r\nTY""]","['', '']",3
964,Bump actions/cache from 3.0.9 to 3.0.10,Yes,7:24:20,1,0,[],[''],8
963,Bump actions/checkout from 3.0.2 to 3.1.0,Yes,7:16:37,0,0,[],[''],10
962,Simplify expression (length is never < 0),Yes,"6 days, 16:09:06",1,0,[],[],2
961,Bump commons.pmd-impl.version from 6.49.0 to 6.50.0,Yes,12:01:00,0,0,[],[''],3
960,Bump ossf/scorecard-action from 1.1.2 to 2.0.4,No,,2,0,[],[],2
959,Bump actions/cache from 3.0.8 to 3.0.9,Yes,12:03:44,0,0,[],[''],8
958,Bump checkstyle from 9.3 to 10.3.4,No,,2,0,[],[],2
957,Bump commons-text from 1.9 to 1.10.0,Yes,0:28:22,1,0,[],[],2
956,Improve JavaDocs ,No,,8,6,"['Is there a reason why ""String"" is sometimes linked and sometimes not?', 'No Reason at all.\r\n', 'This is a code comment, not a Javadoc comment, so using Javadoc decorations is wrong. Please review all the files and revert this type of change please.', 'done. Looks like only was this mistake.', '@arturobernalg \r\nYou need to update the PR...', ""ups. Sorry @garydgregory \r\nit's done.""]","['', '', '', '', '', '']",2611
955,Bump junit-bom from 5.9.0 to 5.9.1,Yes,0:38:20,0,0,[],[],2
954,Bump commons-parent from 53 to 54,Yes,0:20:29,0,0,[],[],2
953,Handle error messages with special characters.,No,,11,12,"['`String.valueOf(String)` is not required. Note that String.valueOf(null) will return null and that is handled fine by the IllegalArgumentException constructor. So just pass through the String message argument (which can be null).\r\n', 'There is no `@param` tag for `message`.', 'This is not required.', '`an exception with the specified message`\r\n\r\nNote: This change makes the code example on line 143 invalid. Please update the javadoc in the preceding method to remove:\r\n```Validate.isTrue(myObject.isOk(), ""The object is not okay"");</pre>```\r\n', 'Done.', 'Done.', 'Done.', 'Done.', 'Add a `@Since 3.13.0`', 'Done.', 'This all looks fine. Please add a comment to the private method, e.g. \r\n```\r\nGet the message using {@link String#format(String, Object...) String.format(message, values)}\r\nif the values are not empty, otherwise return the message unformatted.\r\nThis method exists to allow validation methods declaring a String message and varargs parameters\r\nto be used without any message parameters when the message contains special characters,\r\ne.g. {@code Validate.isTrue(false, ""%Failed%"")}.\r\n@param ...\r\n@return ...\r\n```', 'Done.']","['Adding this method will change source compatibility to use this method in place of the varargs method when there are no supplied args. This should be reflected in a javadoc change to that method.', '', '', '', '', '', '', '', '']",79
952,Remove empty line,No,,2,0,[],[],2
951,[LANG-1692] Cast FieldUtils.readField result to the recipient type,No,,10,14,"['Is this change needed for the type changes? Please revert it otherwise.', ""Please read the description:\r\n\r\n> There's a case as shown in `ReflectionDiffBuilder.java` that if the type inference results in ambiguity, it may cause compile error."", 'In general, please keep cosmetic and stylistic changes out of PRs, it makes PRs noisier, and takes longer to review.', ""@tisonkun \r\nI still don't get it, why is this needed in this PR as it relates to the generics change?"", 'Reverting...', ""Oops. I think I should add the `@param <T>` line so adjusting neighbor lines should be OK. Said you're updating the comments, and adjusting a bit the layout should not be a big deal. I don't touch unrelated comments."", '<img width=""1056"" alt=""image"" src=""https://user-images.githubusercontent.com/18818196/192087964-342f0e2d-57ab-4d45-8ade-51aa183c1482.png"">\r\n', '```\r\n[INFO] -------------------------------------------------------------\r\n[ERROR] COMPILATION ERROR : \r\n[INFO] -------------------------------------------------------------\r\n[ERROR] /Users/chenzili/Brittani/commons-lang/src/main/java/org/apache/commons/lang3/builder/ReflectionDiffBuilder.java:[113,32] reference to append is ambiguous\r\n  both method append(java.lang.String,short[],short[]) in org.apache.commons.lang3.builder.DiffBuilder and method append(java.lang.String,java.lang.Object[],java.lang.Object[]) in org.apache.commons.lang3.builder.DiffBuilder match\r\n```', 'Revert this change, please.', 'Revert this change will cause compile to fail. I can do it and you see what happens.', 'Reverted at bc4e02229407a80b1315c8c5f00cad859724aa4e.\r\n\r\nNow the compilation failed: https://github.com/apache/commons-lang/actions/runs/3210472599/jobs/5247938888.', ""Does that mean that existing call sites in users' applications will also fail?"", ""If you think it breaks the existing code and should not do it, you can reject the PR. But I'm a bit confused since reverting it obviously causes compile to fail."", ""> Does that mean that existing call sites in users' applications will also fail?\r\n\r\nI already wrote it in the PR description. Please read it.""]","['', '', '', '', '', '', '', '', '', '', '', '', '', '']",88
950,Bump ossf/scorecard-action from 1.1.2 to 2.0.3,No,,4,0,[],[],2
949,[LANG-1691] ClassUtils.getShortCanonicalName doesn't use the canonicalName,Yes,4:42:19,0,3,"['This seems obviously no good to me because ""Named"" is a real concrete class defined in this very file, its name is not """". What am I missing?', ""I felt the same. It is because it is a _local class_. Local classes don't have canonical name\r\n\r\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getCanonicalName--\r\n> Returns null if the underlying class does not have a canonical name (i.e., if it is a local or anonymous class or an array whose component type does not have a canonical name)."", '@thiyagu-7 \r\nThank you for the clarification!']","['', '', '']",18
948,Bump maven-pmd-plugin from 3.18.0 to 3.19.0,Yes,8:36:32,1,0,[],[''],4
947,Bump spotbugs from 4.7.1 to 4.7.2,Yes,8:39:48,1,0,[],[''],4
946,Bump spotbugs-maven-plugin from 4.7.1.1 to 4.7.2.0,Yes,8:34:58,0,0,[],[''],4
945,Bump checkstyle from 9.3 to 10.3.3,No,,2,0,[],[],2
944,Bump commons.pmd-impl.version from 6.48.0 to 6.49.0,Yes,3:37:39,0,0,[],[],2
943,Bump maven-checkstyle-plugin from 3.1.2 to 3.2.0,Yes,4:45:52,1,0,[],[],2
942,[LANG-1604] Deprecate RandomUtils in favor of Apache Commons RNG UniformRandomProvider,Yes,18:15:56,2,0,[],"[""I think the commit needs to be rebased. It's showing as 8 commits on GitHub UI.""]",2
941,Simplifiable conditional expression.,Yes,5:37:50,1,0,[],[],4
940,Deprecate getNanosOfMiili() method with typo and create proper getNanosOfMilli(),Yes,23:01:44,1,4,"['Hi @arturobernalg \r\nThank you for your PR.\r\nWe have to test both calls explicitly, so your best bet is to clone the test method.', 'OK, done. Changed.\r\nTY @garydgregory ', 'Fix `{`', 'done']","['', '', '', '']",36
939,Rename method and fix typo.,No,,5,0,[],[],25
938,Fix some Javadoc comments,Yes,17:57:11,1,2,"[""You can just say `{@link #ONE}` IIRC, you don't need to refer to your own class name."", 'true. Changed.']","['', '', 'Hi @arturobernalg \r\nThank you for your PR. Please check my comment.', '']",18
937,Extends Object clauses are redundant,Yes,1:24:33,1,0,[],[],10
936,LANG-1604: Deprecate RandomUtils class,No,,2,3,"['Please add a URL to the Javadoc for the favored implementation.', ""Sorry, I didn't understand. What should I do? "", 'Added reference']","['', '', '']",1095
935,LANG-1603: Deprecate Fraction class,No,,2,5,"['Please add a URL to the Javadoc for the favored implementation.', 'Still not quite right: You talk about Commons Numbers but link to Commons Math as a whole. You want the URL to the Commons Numbers Fraction package or class.', 'Added reference to the favored implementation', 'Aw, sorry, resolved that moment already', ""We can't just deprecate the class without documenting how to port your current code to the other API IMO. For example, what do you do with `Fraction#invert()`? Each method must be documented, otherwise, it's a disservice, and everyone using the class is left having to do their own investigation and mapping.""]","['', '', '', '', '']",3
934,Lang 1689 add optional to objectutils isempty with unpacking the optional,No,,1,0,[],[],66
933,[LANG-1689] Simple Optional in ObjectUtils#isEmpty(),Yes,"10 days, 18:00:33",5,2,"[""What if it's an Optional with an empty string in it?"", 'The optional would be non-empty. Take the following code snippet:\r\n```java\r\nOptional<String> optional = Optional.of("""");\r\nboolean empty = ObjectUtils.isEmpty(optional);\r\n// empty is false\r\n```\r\nIn the case of Optionals, we\'re concerned whether the optional is empty, not if the contents of the optional is empty.\r\n\r\nThis is similar to having an array or collection of length 1 that only contains an empty string. In that case, ObjectUtils.isEmpty would still return false.\r\n\r\nI can update the JavaDoc to make it more clear.\r\n\r\n(And unrelated to this conversation, I notices I accidently slipped a couple tabs instead of spaces in. I\'ll fix that shortly.)']","['', '']",20
932,Bump commons.pmd-impl.version from 6.47.0 to 6.48.0,Yes,2:08:50,0,0,[],[],2
931,Bump checkstyle from 9.3 to 10.3.2,No,,2,0,[],[],2
930,Fixed incorrect documentation,No,,1,2,"[""Indentation does not seem to match what's above."", ""Indentation does not seem to match what's above. Name the parameter, not a generic type like Object.""]","['@Arav1229 Thank you for your PR, please see comments.']",6
929,Fixed incorrect documentation,No,,0,0,[],[],6
928,Bump junit-bom from 5.8.2 to 5.9.0,Yes,2:02:40,1,0,[],[],2
927,Bump spotbugs-maven-plugin from 4.7.1.0 to 4.7.1.1,Yes,2:35:39,0,0,[],[],2
926,Fix links in Javadoc and documentation,Yes,"26 days, 4:21:30",1,20,"['I do not think it makes sense for docs for version 2.4 to point to 2.6 pages.', ""You are right, I have been lazy on that one. That's fixed for both 2.4 and 2.5 changelogs."", 'There are no character encoding name at that URL; did you mean to point to https://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html ?', 'I found the original page on https://web.archive.org/web/20111127040714/http://docs.oracle.com/javase/1.3/docs/api/java/lang/package-summary.html.\r\n\r\nI found that https://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html now contains an equivalent documentation (paragraph _Standard charsets_). I will update the link accordingly.', 'Javadoc references should be to Java **8** since this is the Java level this component requires.\r\n', 'Should point to Java 8, not 7.', 'Why? Let\'s not replace one (insecure) URL with another: ""The connection to lopica.sourceforge.net is not secure"" Also the comment is no longer true since we did not, in fact, get the data from lopica.', 'There is no such page, it redirects to https://www.oracle.com/java/technologies/effectivejava.html', '-1: We do not use Ant, only Maven.', 'There is no such URL, it redirects to https://www.oracle.com/technical-resources/articles/javase/supplementary.html\r\n', 'Fixed', 'Fixed', 'I checked on wayback machine and this page was moved to this url. The old domain now hosts the ""Headquarter of Vampire Fetishists"" ;).\r\n\r\nI removed the link since this is not true.', 'URL replaced by https://www.oracle.com/java/technologies/effectivejava.html.', 'This PR is primarily about fixing the links. But I removed the reference to Ant.', 'Done.', 'Redirects to https://www.oracle.com/java/technologies/effectivejava.html', 'Did you change the URL? I still see the old one.', '@marcwrobel ping?', '@garydgregory, I cannot update the PR for the time being. Feel free to apply the necessary changes. ']","['', '', '', '', 'Hello @marcwrobel \r\nThank you for your PR. Please see my comments.', '', '', '', '', '', '', '2 more I think', '', '']",332
925,simplify condition,Yes,21:43:56,0,0,[],[],2
924,LANG-1638: Added docs regarding week year support,Yes,"42 days, 3:24:39",5,0,[],"[""From what I understood after reading the JIRA, this PR tries to avoid confusion by documenting the current behavior (much easier than trying to come up with a solution either backward-compatible or wait for a major release to change it).\r\n\r\nIt looks OK to me, but the text could be improved, I think. Maybe add an example of what's an YYYY and an yyyy expected to match against?\r\n\r\nThanks for the pull request @greatmastermario !""]",4
923,(doc) Fix typos in project documentations,Yes,2:17:52,0,0,[],[],308
922,Bump exec-maven-plugin from 3.0.0 to 3.1.0,Yes,2:43:21,1,0,[],[],2
921,Bump actions/cache from 3.0.4 to 3.0.5,No,,3,0,[],[],2
920,(doc) Fix typos in javadoc and comments,Yes,3:05:41,0,0,[],[],486
919,Bump spotbugs-maven-plugin from 4.7.0.0 to 4.7.1.0,Yes,7:12:50,0,0,[],[''],2
918,"Javadoc: StringUtils.repeat("""", ""x"", 3) = ""xx"";",Yes,9:16:49,0,0,[],[],2
917,Bump spotbugs from 4.6.0 to 4.7.1,Yes,7:21:15,1,0,[],[''],4
916,Bump checkstyle from 9.3 to 10.3.1,No,,2,0,[],[],2
915,Bump commons.pmd-impl.version from 6.46.0 to 6.47.0,Yes,"3 days, 21:31:16",0,0,[],[],2
914,Bump spotbugs from 4.6.0 to 4.7.1,No,,3,0,[],[],2
913,remove some duplicate assertion in StringUtilsTest,No,,2,4,"['This method, `testRemove_char`, appears to have been based off the `testRemove_String`. You are correct these three statements are duplicated and can be removed. But in `testRemove_String` there\'s one test case that must be added here as well:\r\n\r\n```\r\nassertNull(StringUtils.remove(null, null));\r\n&\r\nassertEquals("""", StringUtils.remove("""", null));\r\n```\r\n\r\nCan you add them, please, @shalk ?', 'I believe this was supposed to be `assertEquals("""", res[4]);`. The other tests have a similar case, where they verify the indexes from `0` to the last index available (`4` in this case). Can you change it, please?', 'done', 'done']","['There are a couple of places where I think the tests were supposed to have other values. Take a look and if you agree and have spare time, can you update them, please?\r\n\r\nThe other ones look correct to me. Great catch @shalk . Thanks for your pull request.', '', '', '']",10
912,Update ClassUtils Javadoc with some missing throws NPE,Yes,"1 day, 3:41:09",4,0,[],"['Thanks! I think these are fine, but leaving it so another committer can review it too.']",5
911,fix StringUtils.upperCase(String str) java doc,Yes,0:19:48,1,0,[],['Good spot! Thanks!!!'],2
910,Bump maven-surefire-plugin from 3.0.0-M6 to 3.0.0-M7,Yes,7:48:29,0,0,[],[''],4
909,Bump maven-pmd-plugin from 3.16.0 to 3.17.0,Yes,7:47:19,0,0,[],[''],4
908,[LANG-1687] fix java Doc,No,,2,0,[],"['Hi @TaeYongPark96 \r\n\r\nHave you tested the method? I just tried it using your branch, and got the following:\r\n\r\n```java\r\n    public static void main(String[] args) {\r\n        String s = StringUtils.substringBetween(""yabczyabcz"", ""y"", ""z"");\r\n        System.out.println(s);\r\n    }\r\n\r\n// outputs abc\r\n```\r\n\r\nAlso, reading the top part of the javadoc, it says\r\n\r\n> Only the first match is returned.\r\n\r\nSo I think the example was intentionally created to demonstrate that part of the method contract.']",2
907,Increase test coverage of functional interfaces,Yes,"1 day, 1:34:47",5,0,[],"['@stevebosman-oc thanks a lot for this pull request!\r\n\r\nI had a look where else the code in this pull request is used, and it looks like there is a [FailableFunctionsTest.java](https://github.com/apache/commons-lang/blob/03b84cb3492938980b31d8cf15fdc6aeb553d063/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java) file where it covers multiple classes in that package.\r\n\r\nLooking at the tests you added, it looks to me like it could be simplified, trying to have a single function that is applied to all the classes changed here testing the `nop` method.\r\n\r\nBut it looks like `FailableFunctionsTest` is not using this pattern yet, and instead has some duplication…\r\n\r\nWDYT? Do you think your new tests could become a sort of parametrized method and applied to all these classes?\r\n\r\nThanks! ']",115
906,Bump checkstyle from 9.3 to 10.3,No,,2,0,[],[],2
905,Bump commons.pmd-impl.version from 6.45.0 to 6.46.0,Yes,2:41:00,0,0,[],[''],4
904,Add tests to increase coverage,Yes,"78 days, 16:48:47",2,8,"['Too much whitespace IMO.', 'Too much whitespace.', 'You can put stuff like this all on one line IMO.', 'You can put this all on one line IMO.', 'Do we really need the local variable?', 'Remove extra two blank lines.', 'Maybe `DEFAULT_CANONICAL_NAME` -> `OBJECT_CANONICAL_NAME`?', 'This test will fail on machines with other arches (e.g. Apple M1 returns `Processor.Type.AARCH_64`). I suggest we remove it.\r\n\r\ncc @garydgregory @arturobernalg ']","['Hi @arturobernalg,\r\nThank you for your PR. If you think this PR is still needed, please rebase on master so we can try to get a green build, plus, address my comments.', '']",128
903,"Add toCharacterObject(String,String) with default value.",No,,6,6,"['These docs require updating too', 'thank you @aherbert \r\nFixed.\r\n', 'I think the rest of the code is using 4 spaces (you used 4 spaces in the test).', 'I think `str` is not a character too, sorry forgot to review the text in the javadocs.', ""Also worth checking if the docs are ending sentences with dot or without it. I think this `@param` doesn't use that, but the next ones does."", 'Better like this IMO: `return StringUtils.isEmpty(str) ? defaultValue : Character.valueOf(str.charAt(0));`']","['', '', 'I think rebasing will fix the conflict and also re-trigger GH actions that should now pass :crossed_fingers: ', 'Thanks for rebasing it so quickly @arturobernalg ! :wave: \r\n\r\nOne more review feedback. This also needs a JIRA issue. I think given the class has `toChar(ch, default)`, `toInt(ch, default)`, maybe it makes sense adding this method with a default value. The alternatives would be, I think, `Optional`, JDK 9+ `Objects.requireNonNullElse`, or using lang\'s `ObjectUtils.getIfNull` (e.g. `ObjectUtils.getIfNull(CharUtils.toCharacterObject(""""), () -> \'B\');`).\r\n\r\nCheers\r\n-Bruno', '', '', '']",37
902,Bump spotbugs from 4.6.0 to 4.7.0,No,,2,0,[],[],2
901,Fix unstable coverage of CharSequenceUtils tests noticed during merge of PRs 898 and 899,Yes,7:15:55,4,0,[],[],4
900,Fix javadoc. Remove unused @param.,Yes,3:06:34,0,0,[],['Thanks!'],1
899,Increase method test coverage of MultilineRecursiveToStringStyle,Yes,4:46:07,1,0,[],[],185
898,Increase test coverage of ComparableUtils from 71% to 100%,Yes,4:12:46,3,0,[],[],151
897,Revert #896 spotbugs update,Yes,11:12:36,5,0,[],[],7
896,Bump spotbugs from 4.6.0 to 4.7.0,Yes,7:48:44,0,0,[],[''],7
895,Bump spotbugs-maven-plugin from 4.6.0.0 to 4.7.0.0,Yes,7:59:27,1,0,[],[],4
894,ci: Add GitHub token permissions for workflows,Yes,0:28:10,0,0,[],['Thank you (again :)!'],3
893,Bump checkstyle from 9.3 to 10.2,No,,3,0,[],[],2
892,LANG-1680 Add support for standalone month formats,Yes,"3 days, 8:09:38",8,11,"['These two methods are identical except for Calendar.SHORT_STANDALONE vs. Calendar.LONG_STANDALONE? Why duplicate? Javadoc: ""Obtain..."" -> ""Gets...""', ""sorry, I really should have noticed that before submitting. I'll refactor"", 'refactored into one method and changed javadoc. While doing this I looked at the Calendar source and Calendar#getDisplayNames seems to be more efficient than using the Calendar#getDisplayName method multiple times, so I am now using that.', 'add final', '`final Map.Entry<String, Integer> entry`', 'Copy pasta typo: standaloneShortMonths -> standaloneLongMonths?', ""We don't need a local variable for the locale IMO.""]","['', '', '', '', '', '', '']",127
891,[LANG-1627] New method for One-hot XOR,No,,2,0,[],[],167
890,[LANG-1627] Implement xorOneHot and add clarifications to Javadoc for xor to explain when it returns true,No,,5,0,[],"[""Hi @stevebosman-oc \r\n\r\nI see there are two pull requests addressing LANG-1627. Any reason for not having a single PR?\r\n\r\nAlso, I think for such change it'd be doable to have everything in a single commit. So ideally it would be squashed by you, or a committer would have to do it if it's merged :+1: \r\n\r\nThanks for your contribution!\r\n-Bruno""]",206
889,Added method to convert Object to String that support null values.,No,,0,2,"['Hi @EACUAMBA ,\r\n\r\nI think instead of this new method, users could just use the Java 8+ `Objects.toString(Object o, String nullDefault)` - https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#toString-java.lang.Object-java.lang.String-', 'Hi @kinow,\r\n\r\nYou are right, the toString method  in Objects can work too.  Thanks.']","['', '']",56
888,Convert object to String.,No,,0,0,[],[],53
887,Remove unnecessary code,No,,1,0,[],[],127
886,Bump github/codeql-action from 1 to 2,Yes,"2 days, 3:07:07",0,0,[],[],6
885,Bump commons-parent from 52 to 53,Yes,10:00:20,0,0,[],[],3
884,Bump checkstyle from 9.3 to 10.1,No,,1,0,[],[],2
883,Bump junit-pioneer from 1.6.2 to 1.7.0,Yes,10:05:39,1,0,[],[''],4
882,Remove unnecessary variable creations.,Yes,"17 days, 14:57:45",0,0,[],[],8
881,"Add @SuppressWarnings(""unchecked"")",No,,0,0,[],[],3
880,Bump maven-surefire-plugin from 3.0.0-M5 to 3.0.0-M6,Yes,6:19:56,0,0,[],[''],3
879,Bump actions/setup-java from 2 to 3,Yes,6:37:31,0,0,[],[''],4
878,Improvement conditions.,No,,2,0,[],[],6
877,Simplify and remove unnecessary check.,No,,3,8,"['This method appears to have been rewritten from a version that used `src` directly to a version that pads `src` to 4 values. However after the rewrite all the redundant length checks have not been removed. Looking at the git history the original version also had the padding. So this is a strange legacy bit of code from 10 years ago.\r\n\r\nIIUC the `srcPos` is set to zero and then never changed after this point. So its use could be removed, e.g. `srcPos + 3` is the same as `3`. Likewise all the checks against length are not required as `paddedSrc` is length 4. So you have removed some of them but not the rest starting at line 461.\r\n\r\nHowever a further look into this finds that this method and `binaryToHexDigit` are essentially the same method but with the endianness inverted. One method starts at the given position for the the lsb and increments the position up to 3 times to read the boolean bits. The other starts at the provided lsb counting **from the end** of the input array (this is not explicitly documented but is demonstrated in the javadoc) and decrements up to 3 times. The later method does this by extracting the range into a padded array of 4, the full logic of which has some issues when the provided srcPos is not inside the array (this is not tested in the unit tests).\r\n\r\nI think it makes more sense to remove the padding to 4 characters and leave the length checks in place. The method should be the same as `binaryToHexDigit` but with the indexing reversed. Thus:\r\n```Java\r\nboolean[] src = ...;\r\nint srcPos = ...;\r\nboolean[] reversed = src.clone();\r\nArrayUtils.reverse(reversed);\r\nbinaryToHexDigit(src, srcPos) == binaryBeMsb0ToHexDigit(reversed, srcPos);\r\n```\r\nI\'ve tested the above and it seems to be the intention of the the method:\r\n```Java\r\n@Test\r\npublic void testBinaryToHexDigitReverse() {\r\n    SplittableRandom rng = new SplittableRandom();\r\n    boolean[] x = new boolean[8];\r\n    for (int i = 0; i < 100; i++) {\r\n        Conversion.longToBinary(rng.nextLong(), 0, x, 0, 8);\r\n        for (int j = 1; j <= 8; j++) {\r\n            boolean[] a = Arrays.copyOf(x, j);\r\n            boolean[] b = a.clone();\r\n            ArrayUtils.reverse(b);\r\n            for (int k = 0; k < j; k++) {\r\n                Assertions.assertEquals(Conversion.binaryToHexDigit(a, k), \r\n                                        Conversion.binaryBeMsb0ToHexDigit(b, k));\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe unit tests for these methods do not cover using a bad input `srcPos` outside the array. In the case of `binaryToHexDigit` it would throw an IOOBE when using `src[srcPos]`. In the case of `binaryBeMsb0ToHexDigit` the padding logic may throw an exception but I have not checked.\r\n\r\nI would update both methods with a check that `srcPos` is inside the input array, something like the `Objects.checkIndex` method from JDK 9:\r\n```Java\r\n      if (Integer.compareUnsigned(srcPos, src.length) >= 0) {\r\n        throw new IndexOutOfBoundsException(srcPos + "" is not within array length "" + src.length);\r\n      }\r\n```\r\nThis would make the check on `src.length` redundant as 0 is not within an array of length 0.\r\n\r\nThe updated method becomes:\r\n```Java\r\npublic static char binaryBeMsb0ToHexDigit(boolean[] src, int srcPos) {\r\n    if (src.length == 0) {\r\n        throw new IllegalArgumentException(""Cannot convert an empty array."");\r\n    }\r\n    // JDK 9: Objects.checkIndex(int index, int length)\r\n    if (Integer.compareUnsigned(srcPos, src.length) >= 0) {\r\n        throw new IndexOutOfBoundsException(srcPos + "" is not within array length "" + src.length);\r\n    }\r\n    // Little-endian bit 0 position\r\n    final int pos = src.length - 1 - srcPos;\r\n    if (3 <= pos && src[pos - 3]) {\r\n        if (src[pos - 2]) {\r\n            if (src[pos - 1]) {\r\n                return src[pos] ? \'f\' : \'e\';\r\n            }\r\n            return src[pos] ? \'d\' : \'c\';\r\n        }\r\n        if (src[pos - 1]) {\r\n            return src[pos] ? \'b\' : \'a\';\r\n        }\r\n        return src[pos] ? \'9\' : \'8\';\r\n    }\r\n    if (2 <= pos && src[pos - 2]) {\r\n        if (src[pos - 1]) {\r\n            return src[pos] ? \'7\' : \'6\';\r\n        }\r\n        return src[pos] ? \'5\' : \'4\';\r\n    }\r\n    if (1 <= pos && src[pos - 1]) {\r\n        return src[pos] ? \'3\' : \'2\';\r\n    }\r\n    return src[pos] ? \'1\' : \'0\';\r\n```\r\n\r\nThis passes the existing unit tests and the extra test for bit reversal shown above. The check for a zero length array is redundant with the index test but I left it in as it would be a breaking change. The existing unit tests do expect an IllegalArgumentException for this case.\r\n\r\nIt has the advantage that it is clearly the same as `binaryToHexDigit` but working from the end of the array backwards, i.e. the input array is big-endian most-significant-byte at position 0 (BeMsb0)\r\n', ""HI @aherbert \r\nThat is actually a great approach. Did't see that.\r\nChanged.\r\nTY "", 'To leave only one branch check on the main path I would put this check inside the other check:\r\n```Java\r\nif (Integer.compareUnsigned(srcPos, src.length) >= 0) {\r\n    // Throw the correct exception\r\n    if (src.length == 0) {\r\n        throw new IllegalArgumentException(""Cannot convert an empty array."");\r\n    }\r\n    throw new IndexOutOfBoundsException(srcPos + "" is not within array length "" + src.length);\r\n}\r\n```', 'Add a test for the index as negative or a match to the array length.', 'done', 'done', 'I would have just added to the existing test:\r\n```Java\r\n@Test\r\npublic void binaryBeMsb0ToHexDigitPosOutsideArray() {\r\n    final boolean[] array = new boolean[8];\r\n    for (final int index : new int[] {-1, array.length, array.length + 100}) {\r\n        assertThrows(IndexOutOfBoundsException.class,\r\n            () -> Conversion.binaryBeMsb0ToHexDigit(array, index),\r\n            () -> ""Index: "" + index;\r\n        );\r\n    }\r\n}\r\n```\r\nOr perhaps use a parameterized test:\r\n```Java\r\n@ParameterizedTest\r\n@ValueSource(ints = {-1, 8, 99})\r\npublic void binaryBeMsb0ToHexDigitPosOutsideArray(int index) {\r\n    assertThrows(IndexOutOfBoundsException.class,\r\n        () -> Conversion.binaryBeMsb0ToHexDigit(new boolean[8], index));\r\n}\r\n```\r\nAnyway can you rebase this on master and then it is good to merge. Thanks.\r\n', 'done\r\n']","['', '', 'This looks fine. Sorry for not reviewing sooner.\r\n\r\nCan you add a test for a negative index please. IIRC there already is a test for a zero length array so we must maintain that check and exception for functional compatibility. But you can move the check inside the other one to eliminate a branch condition on the main path.\r\n', '', '', '', '']",78
876,Make final mappingFunction variable.,Yes,"25 days, 7:25:51",0,0,[],[],2
875,simplify operations and avoid extra calculations,No,,0,2,"['Hi @arturobernalg \r\nDo you even need to check that `parameterTypeName` is not null here?', 'HI @garydgregory \r\nNo needed. we can safely remove \r\nTY']","['', '']",2
874,Add early null check MethodUtils.,No,,0,4,"['The null check should be on `methodName`', ""-1 You lose the better exception message below, specifically, you lose the class name. Follow the code path and you'll see that `getAccessibleMethod()` returns null if the `methodName` is null."", '-1 Same comment as above.', '-1 Same comment as above.']","['', '', '', '', 'Hello @arturobernalg \r\nThank you for your PR but...\r\n-1 See comments.']",25
873,Bump commons.pmd-impl.version from 6.43.0 to 6.44.0,Yes,"1 day, 21:39:58",0,0,[],[],2
872,Bump jmh.version from 1.34 to 1.35,Yes,"1 day, 22:02:58",0,0,[],[],2
871,Fixing and adding DateUtils exception Javadocs,Yes,3:41:54,0,0,[],[],163
870,Updating javadoc for NullPointerException when Validate.notNull() is called,Yes,2:26:35,1,0,[],[],29
869,Add missing exception javadoc/tests for some null arguments,Yes,"322 days, 0:31:37",3,3,"['This is a NullPointerExcception in git master. In general, please update the comment format to:\r\n```\r\n* @throws IllegalArgumentException if {@code comparator} is null\r\n```\r\nor\r\n```\r\n* @throws IllegalArgumentException if {@code comparator} is {@code null}\r\n```\r\nThis reads more like a comment than code.\r\n', '`typeVariableMap`?', 'Oops. Thanks for finding it. Fixed it!']","['', 'Hello @dvmarcilio \r\nThank you for your patience and PR. Please rebase on git master and review your PR with my comment in mind. \r\nTY!', '', '']",48
868,Bump spotbugs-maven-plugin from 4.5.3.0 to 4.6.0.0,Yes,6:44:51,0,0,[],[''],4
867,Bump actions/cache from 2.1.7 to 3,Yes,0:46:57,0,0,[],[],2
866,Refactoring the code,No,,1,11,"['Every file in Lang must include a license header.', ""I think this is just cosmetic, not really fixing an issue. Changes like this make things harder to review. It's better to discuss with the developers of the project before changing code style."", 'Missing newline.', 'Other methods in this class follow the get/set pattern. This `fetchGmt...` method is being called from `FastTimeZone#getGmtTimeZone`. So it could probably stay as `getGmt...`, I think.', 'I believe the reason for the static object was to avoid instantiating a new object every time this method was called.', 'We tend to only leave comments that are intended to help other developers, or things that are almost-ready to be finished, for instance. This one could probably be removed.', ""It's hard to understand why this was commented out. This is also a public method. We cannot remove it without a major release - https://semver.org/"", 'I agree with @kinow ', 'This is confusing IMO, we already have an Apache Commons CSV component, we should not mix in public CSV code in Lang IMO. If this is absolutely needed it should be package-private but I am doubtful.', 'This is confusing IMO, we already have an Apache Commons CSV component, we should not mix in public CSV code in Lang IMO. If this is absolutely needed it should be package-private but I am doubtful.', ""This is a big -1. You cannot break binary compatibility. Run 'mvn' and watch for build failures.""]","[""Hi @shivambhojani \r\n\r\nI think it's better to discuss your plans of refactoring in the dev mailing list, before working on such a large change like this one.\r\n\r\nI added a few comments in this PR just to point to things that normally are asked in review in Commons. I think the main issues here are that you have multiple things in this single PR (changing styles, removing code, adding new code, extracting new methods from existing code to simplify code, etc.)\r\n\r\nThis complicates things for reviewers. But also complicate for you, as as we ask for changes in your pull request, the rest of the code may move forward, forcing you to rebase and fix conflicts in your code.\r\n\r\nI suggest to create a JIRA issue to discuss if you would like to refactor the code. If the change as purely cosmetic (formatting, fix IDE issues) they might be postponed or never-done. If you have multiple changes in one issue, developers may ask you to split it into smaller issues.\r\n\r\nOne of the most important things to remember too, when working on Apache Commons components, is to maintain binary backward compatibility - https://garygregory.wordpress.com/tag/binary/\r\n\r\nHope that helps you to stay motivated and keep thinking in how to fix issues and improve Commons Lang and other components :)\r\n\r\nCheers\r\nBruno"", 'I started to review but there are too many problems. One good aspect of this PR is that we should consider deprecate any CSV code in Commons Lang in favor of Commons CSV. This may require adding code to Commons CSV.']",630
865,Refactoring the files.,No,,1,0,[],[],630
864,Bump spotbugs from 4.2.3 to 4.6.0,No,,1,0,[],[],2
863,[LANG-1462] Use TimeZone from Calendar in DateFormatUtils.,No,,6,0,[],[],19
862,LANG-1668 Update getMatchingMethod documentation.,Yes,2:31:37,2,0,[],[],1
861,Bump commons.pmd-impl.version from 6.42.0 to 6.43.0,Yes,0:22:26,0,0,[],[],2
860,Bump checkstyle from 9.3 to 10.0,No,,2,0,[],[],2
859,Bump actions/checkout from 2 to 3,Yes,0:15:30,0,0,[],[],4
858,Bump maven-pmd-plugin from 3.15.0 to 3.16.0,Yes,2:06:31,0,0,[],[],2
857,Add method defaultIfEmpty with lazy default string computation,No,,7,10,"['This duplicates `ObjectUtils.getIfNull(T, Supplier<T>)`', 'This duplicates:\r\n- `StringUtils.getIfBlank(T, Supplier<T>)`\r\n- `StringUtils.getIfEmpty(T, Supplier<T>)`', '@Mikhail2048  right?', '@Mikhail2048  right?', 'I  am sorry, but I have not found any method in `ObjectUtils` with such signature.  There is `ObjectUtils.getIfNull(T, T)`  method, but it is not a lazy implementation', '@Mikhail2048 See https://github.com/apache/commons-lang/blob/02f3bee7bce4bebb4e1bfe27b613a46adedccef6/src/main/java/org/apache/commons/lang3/ObjectUtils.java#L744-L746', '@garydgregory Yeah, thats true)', '@garydgregory correct)', '@Mikhail2048 \r\nSo, we can close this PR, right? ', 'Yeah we can close this PR, it seems that this functionality is already present, thank you!']","['', '', '', '', '', '', '', '', '']",80
856,Bump taglist-maven-plugin from 2.4 to 3.0.0,Yes,0:05:15,0,0,[],[],2
855,Add countBlanks() function,No,,2,0,[],[],44
854,Bump checkstyle from 9.2.1 to 9.3,Yes,0:23:53,0,0,[],[],2
853,Bump commons.pmd-impl.version from 6.41.0 to 6.42.0,Yes,0:15:06,0,0,[],[],2
852,startsWithAnyIgnoreCase method,No,,1,0,[],[],51
851,LANG-1671: AtomicSafeInitializerTest and LazyInitializerTest modifications using Mockito,No,,3,0,[],[],98
850,improve DateUtils by adding calenda.month in comparison in considerin…,No,,4,0,[],[],1
849,[LANG-1662] Let ReflectionToStringBuilder only reflect given field names,No,,16,4,"['in case of Null parameter, What is the output?', 'In case the parameter is null or empty, it will skip the validation of the selected fields and will return the fields as is the current behavior.', 'I see. Can you add these details in the JavaDocs? When reading I got the impression that Null would return an empty string.', 's/will be include/will be included']","['', '', '', '', 'I think the feature can be added, as it would make sense to have both exclude & include methods. I also agree with @garydgregory , allowing including and excluding the same fields sound like something that would create confusion or unwanted bugs in the code of users.\r\n\r\nI think ideally we would throw an exception for illegal argument for both include/exclude when there are conflicts.\r\n\r\nAlso, the javadocs use ""on output"", I think it sounds a little off. I\'m not a native speaker, but I think ""in the output"" sounds better. Nit-picking :grimacing: rest of the code looks OK to me, we just need to handle the case highlighted by Gary, and update the tests :+1: \r\n\r\nThanks @GutoVeronezi !\r\nBruno', 'Hi,\r\n\r\nI think the code looks OK, but there\'s something wrong when mixing values and `null`\'s. I think it\'s normal as the PR is trying to let include & exclude fields to co-exist, hopefully not too hard to fix it.\r\n\r\nFirst, I think the unit test written is really good! Testing that fields and values exist, and also that the omitted fields and values do not exist in the `toString` :clap: \r\n\r\n@GutoVeronezi , I think we need more tests, including the absurd tests. I had some spare time to review this one, so I decided to hack the unit test and adding a few more to play with the test. Here\'s one that **worked**:\r\n\r\n```java\r\n// Not really a test, I was first looking at the output...\r\n    @Test\r\n    public void test () {\r\n        ReflectionToStringBuilder builder = new ReflectionToStringBuilder(new TestFeature());\r\n        builder.setExcludeFieldNames(""field1"");\r\n        builder.setIncludeFieldNames(null);\r\n        System.out.println(builder.toString());\r\n    }\r\n\r\n// prints: org.apache.commons.lang3.builder.ReflectionToStringBuilderIncludeTest$TestFeature@76a3e297[field2=value 2,field3=value 3,field4=value 4,field5=value 5]\r\n```\r\n\r\nNow this one fails (I simply added one more `null` value):\r\n\r\n```java\r\n    @Test\r\n    public void test () {\r\n        ReflectionToStringBuilder builder = new ReflectionToStringBuilder(new TestFeature());\r\n        builder.setExcludeFieldNames(""field1"");\r\n        builder.setIncludeFieldNames(null, null);\r\n        System.out.println(builder.toString());\r\n    }\r\n```\r\n\r\nThe code above results in:\r\n\r\n```\r\njava.lang.IllegalStateException: Fields [] set in ""includeFieldsNames"" were set in ""excludeFieldNames"" too.\r\n\tat org.apache.commons.lang3.builder.ReflectionToStringBuilder.accept(ReflectionToStringBuilder.java:658)\r\n\tat org.apache.commons.lang3.builder.ReflectionToStringBuilder.appendFieldsIn(ReflectionToStringBuilder.java:699)\r\n\tat org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:915)\r\n\tat org.apache.commons.lang3.builder.ReflectionToStringBuilderIncludeTest.test(ReflectionToStringBuilderIncludeTest.java:188)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.util.ArrayList.forEach(ArrayList.java:1257)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.util.ArrayList.forEach(ArrayList.java:1257)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:95)\r\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:91)\r\n\tat org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:60)\r\n\tat org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:768)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:464)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)\r\n\r\n```\r\n\r\nTake a look and see if we can add more of these random tests, with empty arrays, a combination of invalid fields in the include and exclude, etc. We might end up with a lot more tests, but I think that\'s necessary if we are to allow for include & exclude filters simultaneously.\r\n\r\nCheers\r\nBruno', ""Looks good to me, addresses the case described in JIRA, and I can't think of more tests :slightly_smiling_face: \r\n\r\nProbably good somebody else/others to have a look too.\r\n\r\nThanks @GutoVeronezi !!\r\nBruno""]",324
848,LANG-1682 Adding StringUtils.startsWithAnyIgnoreCase method,No,,4,0,[],[],65
847,Bump spotbugs from 4.2.3 to 4.5.3,No,,1,0,[],[],2
846,Bump spotbugs-maven-plugin from 4.5.0.0 to 4.5.3.0,No,,1,0,[],[],2
845,Fix a flaky test in org.apache.commons.lang3.time.StopWatchTest.testStopWatchSuspend,No,,2,0,[],[],3
844,"[LANG-1679] Improve performance of StringUtils.unwrap(String, String)",Yes,"89 days, 6:45:02",0,0,[],[],8
843,Bump checkstyle from 9.2 to 9.2.1,Yes,2:14:07,0,0,[],[''],2
842,Bump jmh.version from 1.33 to 1.34,Yes,0:15:16,0,0,[],[],2
841,Bump spotbugs-maven-plugin from 4.5.0.0 to 4.5.2.0,No,,1,0,[],[],2
840,Bump spotbugs from 4.2.3 to 4.5.2,No,,1,0,[],[],2
839,Bump spotbugs from 4.2.3 to 4.5.1,No,,1,0,[],[],2
838,LANG-1677 : Add ReflectionDiffBuilder.setExcludeFieldNames(...) and DiffExclude a…,No,,10,16,"['All _new_ `protected` and `public` elements new `@since 3.13.0`.', 'Javadoc comments start with a sentence.', ""Don't edit this file, it will usually clash depending on parallel changes."", 'Removed the file again.', 'Reuse `ArrayUtils.EMPTY_STRING_ARRAY`', 'Space after `//`', 'Make `private`.', 'If you make the default value the empty array and the setter does not allow excludeFieldNames to be null, then you do not need this check? It might be better this way though, not sure.', 'Leave formatting alone here.', 'Use final where you can.', 'Use final where you can.', 'You should test a non-transient null field.', 'I took some ""inspiration"" from the `ReflectionToStringBuilder` where we also have the null check. \r\nIn case you do call setExcludeFieldNames with null, it\'s still safe here, guess that\'s the main reason.', 'There is already a testcase `test_transient_field_difference` that validates this, there is no specific or new logic for transient fields that get excluded.', "">In case you do call setExcludeFieldNames with null, it's still safe here, guess that's the main reason.\r\n\r\nBut this if condition is still unreachable even after calling setExcludeFieldNames with null, so we can drop it too (as condition cannot be reached for users nor via test code, I think?)."", 'Maybe add a test that does both `annotatedField` and `excludedField` being excluded.']","['@debae \r\nThank you for your PR. Please see comments.', 'See my previous comment.', '', '', 'Hi @debae \r\nPlease see my comments.', '', '', 'Looks good to me. Left a couple of comments but nothing too important nor a blocker. It needs to be squashed to a single commit, preferably with the LANG-1677: issue ID as prefix (as other commits).\r\n\r\nHad a look at other builders, like `EqualsBuilder`, and it has a very similar feature already. Only difference I noted is that in the Javadocs of that builder, there are several links in `@see EqualsExcclude`, I think to indicate to the developers that the code in context is not applicable to annotated members. Not sure if we need that here, nor it other builders also have that (if so would be good to maintain consistency).\r\n\r\n+1\r\n\r\nThanks!\r\n-Bruno']",130
837,Bump pmd-java8 from 6.40.0 to 6.41.0,Yes,1:29:22,0,0,[],[],2
836,Bump junit-bom from 5.8.1 to 5.8.2,Yes,0:06:03,0,0,[],[],2
835,Bump biz.aQute.bndlib from 6.0.0 to 6.1.0,Yes,5:36:17,1,0,[],[''],4
834,Bump spotbugs-maven-plugin from 4.4.2.2 to 4.5.0.0,Yes,11:50:49,1,0,[],[''],4
833,Bump actions/cache from 2.1.6 to 2.1.7,Yes,9:42:29,1,0,[],[''],4
832,Bump junit-pioneer from 1.4.2 to 1.5.0,Yes,0:35:46,1,0,[],[],2
831,feat: list2tree method add,No,,4,0,[],[],298
830,feat: list2tree method add,No,,0,0,[],[],293
829,feat: list2tree method add,No,,0,0,[],[],296
828,feat: list2tree method add,No,,0,0,[],[],291
827,feat: list2tree method add,No,,0,0,[],[],288
826,Bump spotbugs from 4.2.3 to 4.5.0,No,,3,0,[],"['Ouch, Spotbugs 4.5 breaks the build with lots of new errors. e.g.\r\n\r\n```bash\r\nError:  Medium: Do not catch NullPointerException like in org.apache.commons.lang3.BooleanUtils.and(Boolean[]) [org.apache.commons.lang3.BooleanUtils] At BooleanUtils.java:[line 127] DCN_NULLPOINTER_EXCEPTION\r\nError:  Medium: Do not catch NullPointerException like in org.apache.commons.lang3.BooleanUtils.or(Boolean[]) [org.apache.commons.lang3.BooleanUtils] At BooleanUtils.java:[line 306] DCN_NULLPOINTER_EXCEPTION\r\nError:  Medium: Do not catch NullPointerException like in org.apache.commons.lang3.BooleanUtils.xor(Boolean[]) [org.apache.commons.lang3.BooleanUtils] At BooleanUtils.java:[line 1127] DCN_NULLPOINTER_EXCEPTION\r\nError:  Medium: org.apache.commons.lang3.Streams$ArrayCollector.characteristics() may expose internal representation by returning Streams$ArrayCollector.characteristics [org.apache.commons.lang3.Streams$ArrayCollector] At Streams.java:[line 525] EI_EXPOSE_REP\r\n...\r\n```']",2
825,Bump actions/checkout from 2.3.5 to 2.4.0,Yes,"8 days, 21:57:34",1,0,[],[],2
824,Bump checkstyle from 9.0.1 to 9.1,Yes,6:26:56,1,0,[],[''],4
823,LANG-1664 adjust doc to show argument is a primitive character,No,,2,0,[],"['', '']",6
822,Bump spotbugs-maven-plugin from 4.4.1 to 4.4.2.2,Yes,"21 days, 21:47:48",0,0,[],[],2
821,Betters names variables and  Fix typos,No,,2,12,"['This is a bad name because this is a singular object.', 'Uh? An array is not a set.\r\n', 'Good catch! :-)', 'Uh? Above, you change ""ctor"" to ""constructor"" but here you are changing _to_ an even short weirder name ""ctr""? Be consistent, please.', '""values"" is no better IMO. It would be consistent with `String.format()` to use ""args"" since we are just passing the values along.', 'See above.', '-1: _iface_ is short for _interface_, not _interFace_. We can\'t use ""interface"" since its reserved. No change is needed IMO.', 'Sorry, _langs_ was better IMO, mostly because it is _plural_ and is typed as a List. The new name is singular and therefore confusing (to me).', '-1: Better to keep the name matching the overridden method from java.io.Writer, it will be less of a surprise if you know the Writer API. ', '-1: Better to keep the name matching the overridden method from java.io.Writer, it will be less of a surprise if you know the Writer API. ', '-1: Subjective from me granted, not but better to read IMO.', '-1: Subjective from me granted, not but better to read IMO.']","['', 'Hi @arturobernalg \r\nPlease see my comments.\r\n', '', '@arturobernalg \r\nTY for your updates. Please see my comments.']",220
820,Bump spotbugs-maven-plugin from 4.4.1 to 4.4.2.1,No,,2,0,[],[],2
819,Bump actions/checkout from 2.3.4 to 2.3.5,Yes,"4 days, 3:36:44",1,0,[],[],2
818,Bump spotbugs from 4.2.3 to 4.4.2,No,,2,0,[],[],2
817,fix NumberFormatException in method org.apache.commons.lang3.math.Fra…,No,,4,0,[],[],44
816,Use final.,Yes,"34 days, 19:48:58",1,0,[],[],112
815,LANG-1676 add another case in RangeTest:testIsOverlappedBy,No,,2,2,"['Hello @Rushi98 \r\nTY for your PR!\r\nThis assert call was initially confusing to me because [5,25] is not the same kind of test as ""easy inside range"", it overlaps the _whole_ range, it is not _inside_ it like [12, 18] above it. To speed up the process, I\'ve added a different test with a new comment in git master. Please verify and propose more if I think we are still missing a condition or use-case.\r\nTY!\r\n', 'Hi @garydgregory \r\nYour [change](https://github.com/apache/commons-lang/commit/ad37cca1caef01cb3d54e479b42d44346f93ac2b#diff-db25bb249ffd66485de1d3a2b394672c04a3554b53d284cef83fa291f7252a51R332) does make the test case clearer. Thanks!']","['', '']",1
814,Bump biz.aQute.bndlib from 5.3.0 to 6.0.0,Yes,"5 days, 3:24:44",1,0,[],[],2
813,Add final var and Remove redundant String.,Yes,"8 days, 0:26:34",1,0,[],[],4
812,LANG-1675 - Improve performance of StringUtils.join for primitives,Yes,"176 days, 5:57:20",19,1,"['Interesting, I thought instead of `deleteChartAt` using an `if` statement in the `for` above, to avoid adding the last `delimiter` would improve more the performance. For a follow-up discussion I think.']","['I had a look at the linked repository, cloned it, tried to run without success. Had another look at the code, and realized the dependencies in the `pom.xml` were used in Lang too. So I copied the StringJoiner test to the `master` branch and ran that test first.\r\n\r\nMy environment:\r\n\r\n```bash\r\nApache Maven 3.8.2 (ea98e05a04480131370aa0c110b8c54cf726c06f)\r\nMaven home: /opt/apache-maven-3.8.2\r\nJava version: 11.0.11, vendor: Ubuntu, runtime: /usr/lib/jvm/java-11-openjdk-amd64\r\nDefault locale: en_US, platform encoding: UTF-8\r\nOS name: ""linux"", version: ""5.4.0-90-generic"", arch: ""amd64"", family: ""unix""\r\n```\r\n\r\nAnd class annotations I used in my tests.\r\n\r\n```java\r\n@BenchmarkMode(Mode.Throughput) // Then saved again with .AverageTime to re-run tests\r\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n@State(Scope.Thread)\r\n```\r\n\r\n## StringJoiner + `master`\r\n\r\nUsing `master` on the following commit.\r\n\r\n```bash\r\ncommit 7f9472e8989a859b7b4a3394486c7064cb3d11af (HEAD -> master, upstream/master, upstream/HEAD, dependabot/maven/com.puppycrawl.tools-checkstyle-9.1)\r\nAuthor: Gary Gregory <garydgregory@gmail.com>\r\nDate:   Thu Nov 18 22:12:49 2021 -0500\r\n\r\n    Fix Javadoc typo.\r\n```\r\n\r\nFirst thing I did was to edit the `pom.xml` to run just that one test.\r\n\r\n```diff\r\ndiff --git a/pom.xml b/pom.xml\r\nindex 021e056d9..b48d6c750 100644\r\n--- a/pom.xml\r\n+++ b/pom.xml\r\n@@ -1022,7 +1022,7 @@\r\n       <id>benchmark</id>\r\n       <properties>\r\n         <skipTests>true</skipTests>\r\n-        <benchmark>org.apache</benchmark>\r\n+        <benchmark>org.apache.commons.lang3.StringJoinerBenchmarkTest</benchmark>\r\n       </properties>\r\n       <build>\r\n         <plugins>\r\n```\r\n\r\nA copied the `StringJoiner` test editing package name, adding the license header, and adding more JMH annotations. First to run with average time, and then with the throughput.\r\n\r\nAverage time results:\r\n\r\n```bash\r\n(...)\r\nResult ""org.apache.commons.lang3.StringJoinerBenchmarkTest.stringJoinerPrimitiveBoolean"":\r\n  93.846 ±(99.9%) 6.002 ns/op [Average]\r\n  (min, avg, max) = (84.979, 93.846, 112.687), stdev = 8.013\r\n  CI (99.9%): [87.844, 99.848] (assumes normal distribution)\r\n(...)\r\nResult ""org.apache.commons.lang3.StringJoinerBenchmarkTest.stringJoinerPrimitiveInt"":\r\n  110.469 ±(99.9%) 2.159 ns/op [Average]\r\n  (min, avg, max) = (107.508, 110.469, 120.933), stdev = 2.883\r\n  CI (99.9%): [108.310, 112.629] (assumes normal distribution)\r\n(...)\r\nResult ""org.apache.commons.lang3.StringJoinerBenchmarkTest.stringJoinerPrimitiveLong"":\r\n  109.523 ±(99.9%) 1.101 ns/op [Average]\r\n  (min, avg, max) = (107.619, 109.523, 111.960), stdev = 1.470\r\n  CI (99.9%): [108.421, 110.624] (assumes normal distribution)\r\n\r\n# Run complete. Total time: 00:25:05\r\n\r\nREMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on\r\nwhy the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial\r\nexperiments, perform baseline and negative tests that provide experimental control, make sure\r\nthe benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.\r\nDo not assume the numbers tell you what you want them to tell.\r\n\r\nBenchmark                                               Mode  Cnt    Score   Error  Units\r\nStringJoinerBenchmarkTest.stringJoinerPrimitiveBoolean  avgt   25   93.846 ± 6.002  ns/op\r\nStringJoinerBenchmarkTest.stringJoinerPrimitiveInt      avgt   25  110.469 ± 2.159  ns/op\r\nStringJoinerBenchmarkTest.stringJoinerPrimitiveLong     avgt   25  109.523 ± 1.101  ns/op\r\n```\r\n\r\nThroughput results:\r\n\r\n```bash\r\n(...)\r\nResult ""org.apache.commons.lang3.StringJoinerBenchmarkTest.stringJoinerPrimitiveBoolean"":\r\n  0.011 ±(99.9%) 0.001 ops/ns [Average]\r\n  (min, avg, max) = (0.010, 0.011, 0.012), stdev = 0.001\r\n  CI (99.9%): [0.011, 0.012] (assumes normal distribution)\r\n(...)\r\nResult ""org.apache.commons.lang3.StringJoinerBenchmarkTest.stringJoinerPrimitiveInt"":\r\n  0.009 ±(99.9%) 0.001 ops/ns [Average]\r\n  (min, avg, max) = (0.007, 0.009, 0.010), stdev = 0.001\r\n  CI (99.9%): [0.008, 0.009] (assumes normal distribution)\r\n(...)\r\nResult ""org.apache.commons.lang3.StringJoinerBenchmarkTest.stringJoinerPrimitiveLong"":\r\n  0.009 ±(99.9%) 0.001 ops/ns [Average]\r\n  (min, avg, max) = (0.008, 0.009, 0.009), stdev = 0.001\r\n  CI (99.9%): [0.008, 0.009] (assumes normal distribution)\r\n\r\n# Run complete. Total time: 00:25:05\r\n\r\nREMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on\r\nwhy the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial\r\nexperiments, perform baseline and negative tests that provide experimental control, make sure\r\nthe benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.\r\nDo not assume the numbers tell you what you want them to tell.\r\n\r\nBenchmark                                                Mode  Cnt  Score    Error   Units\r\nStringJoinerBenchmarkTest.stringJoinerPrimitiveBoolean  thrpt   25  0.011 ±  0.001  ops/ns\r\nStringJoinerBenchmarkTest.stringJoinerPrimitiveInt      thrpt   25  0.009 ±  0.001  ops/ns\r\nStringJoinerBenchmarkTest.stringJoinerPrimitiveLong     thrpt   25  0.009 ±  0.001  ops/ns\r\n\r\n```\r\n\r\n## StringBuilder + the branch for this pull request\r\n\r\nDid the same thing using the branch for this pull request, but with the code for testing `StringBuilder` with JMH.\r\n\r\n\r\n```bash\r\ncommit f2f6cd9b0580f25a3a5447da092ac30642abd2aa (HEAD -> pr-812)\r\nMerge: 1fe3e64bc a3a064587\r\nAuthor: Hubert <2518652+HubertWo@users.noreply.github.com>\r\nDate:   Sat Oct 9 12:54:37 2021 +0200\r\n\r\n    Merge branch \'apache:master\' into fix/LANG-1675_string_join_refactor\r\n```\r\n\r\n```diff\r\ndiff --git a/pom.xml b/pom.xml\r\nindex 64e3e8d85..498e44f4f 100644\r\n--- a/pom.xml\r\n+++ b/pom.xml\r\n@@ -1005,7 +1005,7 @@\r\n       <id>benchmark</id>\r\n       <properties>\r\n         <skipTests>true</skipTests>\r\n-        <benchmark>org.apache</benchmark>\r\n+        <benchmark>org.apache.commons.lang3.StringBuilderBenchmarkTest</benchmark>\r\n       </properties>\r\n       <build>\r\n         <plugins>\r\n```\r\n\r\nAverage time results:\r\n\r\n```bash\r\n(...)\r\nResult ""org.apache.commons.lang3.StringBuilderBenchmarkTest.stringBuilderPrimitiveBoolean"":\r\n  49.887 ±(99.9%) 0.542 ns/op [Average]\r\n  (min, avg, max) = (49.086, 49.887, 52.508), stdev = 0.723\r\n  CI (99.9%): [49.345, 50.429] (assumes normal distribution)\r\n(...)\r\nResult ""org.apache.commons.lang3.StringBuilderBenchmarkTest.stringBuilderPrimitiveInt"":\r\n  36.461 ±(99.9%) 0.505 ns/op [Average]\r\n  (min, avg, max) = (35.892, 36.461, 37.850), stdev = 0.674\r\n  CI (99.9%): [35.956, 36.966] (assumes normal distribution)\r\n(...)\r\nResult ""org.apache.commons.lang3.StringBuilderBenchmarkTest.stringBuilderPrimitiveLong"":\r\n  37.222 ±(99.9%) 0.157 ns/op [Average]\r\n  (min, avg, max) = (36.922, 37.222, 37.824), stdev = 0.209\r\n  CI (99.9%): [37.065, 37.379] (assumes normal distribution)\r\n(...)\r\n\r\n# Run complete. Total time: 00:25:05\r\n\r\nREMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on\r\nwhy the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial\r\nexperiments, perform baseline and negative tests that provide experimental control, make sure\r\nthe benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.\r\nDo not assume the numbers tell you what you want them to tell.\r\n\r\nBenchmark                                             Mode  Cnt   Score   Error  Units\r\nStringBuilderBenchmarkTest.stringBuilderPrimitiveBoolean  avgt   25  49.887 ± 0.542  ns/op\r\nStringBuilderBenchmarkTest.stringBuilderPrimitiveInt      avgt   25  36.461 ± 0.505  ns/op\r\nStringBuilderBenchmarkTest.stringBuilderPrimitiveLong     avgt   25  37.222 ± 0.157  ns/op\r\n```\r\n\r\nThroughput results:\r\n\r\n```bash\r\n(...)\r\nResult ""org.apache.commons.lang3.StringBuilderBenchmarkTest.stringBuilderPrimitiveBoolean"":\r\n  0.020 ±(99.9%) 0.001 ops/ns [Average]\r\n  (min, avg, max) = (0.020, 0.020, 0.020), stdev = 0.001\r\n  CI (99.9%): [0.020, 0.020] (assumes normal distribution)\r\n(...)\r\nResult ""org.apache.commons.lang3.StringBuilderBenchmarkTest.stringBuilderPrimitiveInt"":\r\n  0.026 ±(99.9%) 0.001 ops/ns [Average]\r\n  (min, avg, max) = (0.024, 0.026, 0.028), stdev = 0.001\r\n  CI (99.9%): [0.025, 0.027] (assumes normal distribution)\r\n(...)\r\nResult ""org.apache.commons.lang3.StringBuilderBenchmarkTest.stringBuilderPrimitiveLong"":\r\n  0.026 ±(99.9%) 0.001 ops/ns [Average]\r\n  (min, avg, max) = (0.025, 0.026, 0.027), stdev = 0.001\r\n  CI (99.9%): [0.026, 0.026] (assumes normal distribution)\r\n\r\n# Run complete. Total time: 00:25:05\r\n\r\nREMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on\r\nwhy the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial\r\nexperiments, perform baseline and negative tests that provide experimental control, make sure\r\nthe benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.\r\nDo not assume the numbers tell you what you want them to tell.\r\n\r\nBenchmark                                              Mode  Cnt  Score    Error   Units\r\nStringBuilderBenchmarkTest.stringBuilderPrimitiveBoolean  thrpt   25  0.020 ±  0.001  ops/ns\r\nStringBuilderBenchmarkTest.stringBuilderPrimitiveInt      thrpt   25  0.026 ±  0.001  ops/ns\r\nStringBuilderBenchmarkTest.stringBuilderPrimitiveLong     thrpt   25  0.026 ±  0.001  ops/ns\r\n```\r\n\r\n## TL;DR:\r\n\r\nBefore\r\n\r\n```\r\nStringJoinerBenchmarkTest.stringJoinerPrimitiveBoolean  avgt   25   93.846 ± 6.002  ns/op\r\nStringJoinerBenchmarkTest.stringJoinerPrimitiveInt      avgt   25  110.469 ± 2.159  ns/op\r\nStringJoinerBenchmarkTest.stringJoinerPrimitiveLong     avgt   25  109.523 ± 1.101  ns/op\r\n\r\nStringJoinerBenchmarkTest.stringJoinerPrimitiveBoolean  thrpt   25  0.011 ±  0.001  ops/ns\r\nStringJoinerBenchmarkTest.stringJoinerPrimitiveInt      thrpt   25  0.009 ±  0.001  ops/ns\r\nStringJoinerBenchmarkTest.stringJoinerPrimitiveLong     thrpt   25  0.009 ±  0.001  ops/ns\r\n```\r\n\r\nAfter\r\n\r\n```\r\nStringBuilderBenchmarkTest.stringBuilderPrimitiveBoolean  avgt   25  49.887 ± 0.542  ns/op\r\nStringBuilderBenchmarkTest.stringBuilderPrimitiveInt      avgt   25  36.461 ± 0.505  ns/op\r\nStringBuilderBenchmarkTest.stringBuilderPrimitiveLong     avgt   25  37.222 ± 0.157  ns/op\r\n\r\nStringBuilderBenchmarkTest.stringBuilderPrimitiveBoolean  thrpt   25  0.020 ±  0.001  ops/ns\r\nStringBuilderBenchmarkTest.stringBuilderPrimitiveInt      thrpt   25  0.026 ±  0.001  ops/ns\r\nStringBuilderBenchmarkTest.stringBuilderPrimitiveLong     thrpt   25  0.026 ±  0.001  ops/ns\r\n```\r\n\r\n## Conclusion\r\n\r\nI think the `StringBuilder` version was consistently faster, at least on my JVM 11, Ubuntu Linux. Looking at the code, I thought it would be faster to check the index of the for-loop to avoid adding something that would be later removed, but looks like this could be a follow-up.\r\n\r\n+1\r\n\r\nThanks!\r\nBruno\r\n\r\np.s.: Friday 10 PM, so hopefully I didn\'t confuse the metrics, I think I got higher throughput with `StringBuilder` and lower average time with `StringBuilder`, but feel free to correct me if I read the results incorrectly\r\n\r\np.p.s: Sorry, couldn\'t test with other OS\'s or JVM\'s :+1: ', 'I had given up after a SNAPSHOT couldn\'t be located, but then just had to `mvn install` this PR\'s branch to get the SNAPSHOT installed in my local Maven repo. Here\'s the results on Ubuntu LTS.\r\n\r\n# JVM 11\r\n\r\nFirst JVM 11, where I think `StringBuilder` is the winner with `24_967_220.771` throughput versus `StringJoiner`\'s `8_685_054.944`.\r\n\r\n\r\n```bash\r\nApache Maven 3.8.2 (ea98e05a04480131370aa0c110b8c54cf726c06f)\r\nMaven home: /opt/apache-maven-3.8.2\r\nJava version: 11.0.11, vendor: Ubuntu, runtime: /usr/lib/jvm/java-11-openjdk-amd64\r\nDefault locale: en_US, platform encoding: UTF-8\r\nOS name: ""linux"", version: ""5.4.0-90-generic"", arch: ""amd64"", family: ""unix""\r\n```\r\n\r\n## StringJoiner\r\n\r\n```bash\r\nResult ""com.github.hubertwo.acljmh.StringJoinerBenchmark.stringJoinerPrimitiveInt"":\r\n  8685054.944 ±(99.9%) 143639.898 ops/s [Average]\r\n  (min, avg, max) = (8276817.474, 8685054.944, 8968956.809), stdev = 191755.154\r\n  CI (99.9%): [8541415.046, 8828694.843] (assumes normal distribution)\r\n\r\n\r\n# Run complete. Total time: 00:08:21\r\n\r\nREMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on\r\nwhy the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial\r\nexperiments, perform baseline and negative tests that provide experimental control, make sure\r\nthe benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.\r\nDo not assume the numbers tell you what you want them to tell.\r\n\r\nBenchmark                                        Mode  Cnt        Score        Error  Units\r\nStringJoinerBenchmark.stringJoinerPrimitiveInt  thrpt   25  8685054.944 ± 143639.898  ops/s\r\n```\r\n\r\n## StringBuilder\r\n\r\n```bash\r\nResult ""com.github.hubertwo.acljmh.StringBuilderBenchmark.stringBuilderPrimitiveInt"":\r\n  24967220.771 ±(99.9%) 770683.808 ops/s [Average]\r\n  (min, avg, max) = (21267937.022, 24967220.771, 25980909.331), stdev = 1028840.835\r\n  CI (99.9%): [24196536.963, 25737904.579] (assumes normal distribution)\r\n\r\n\r\n# Run complete. Total time: 00:08:21\r\n\r\nREMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on\r\nwhy the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial\r\nexperiments, perform baseline and negative tests that provide experimental control, make sure\r\nthe benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.\r\nDo not assume the numbers tell you what you want them to tell.\r\n\r\nBenchmark                                          Mode  Cnt         Score        Error  Units\r\nStringBuilderBenchmark.stringBuilderPrimitiveInt  thrpt   25  24967220.771 ± 770683.808  ops/s\r\n```\r\n\r\n# JVM 16\r\n\r\nNow with JVM 16. I think `StringBuilder` is a winner here too with `23_751_776.524`, while `StringJoiner` had `8508216.567` throughput.\r\n\r\n```bash\r\nApache Maven 3.8.2 (ea98e05a04480131370aa0c110b8c54cf726c06f)\r\nMaven home: /opt/apache-maven-3.8.2\r\nJava version: 16.0.1, vendor: Private Build, runtime: /usr/lib/jvm/java-16-openjdk-amd64\r\nDefault locale: en_US, platform encoding: UTF-8\r\nOS name: ""linux"", version: ""5.4.0-90-generic"", arch: ""amd64"", family: ""unix""\r\n```\r\n\r\n## StringJoiner\r\n\r\n```bash\r\nResult ""com.github.hubertwo.acljmh.StringJoinerBenchmark.stringJoinerPrimitiveInt"":\r\n  8508216.567 ±(99.9%) 126690.808 ops/s [Average]\r\n  (min, avg, max) = (8046279.518, 8508216.567, 8834546.942), stdev = 169128.605\r\n  CI (99.9%): [8381525.759, 8634907.376] (assumes normal distribution)\r\n\r\n\r\n# Run complete. Total time: 00:08:21\r\n\r\nREMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on\r\nwhy the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial\r\nexperiments, perform baseline and negative tests that provide experimental control, make sure\r\nthe benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.\r\nDo not assume the numbers tell you what you want them to tell.\r\n\r\nBenchmark                                        Mode  Cnt        Score        Error  Units\r\nStringJoinerBenchmark.stringJoinerPrimitiveInt  thrpt   25  8508216.567 ± 126690.808  ops/s\r\n```\r\n\r\n## StringBuilder\r\n\r\n```bash\r\nResult ""com.github.hubertwo.acljmh.StringBuilderBenchmark.stringBuilderPrimitiveInt"":\r\n  23751776.524 ±(99.9%) 956416.445 ops/s [Average]\r\n  (min, avg, max) = (20958707.696, 23751776.524, 25285000.397), stdev = 1276788.591\r\n  CI (99.9%): [22795360.079, 24708192.969] (assumes normal distribution)\r\n\r\n\r\n# Run complete. Total time: 00:08:21\r\n\r\nREMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on\r\nwhy the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial\r\nexperiments, perform baseline and negative tests that provide experimental control, make sure\r\nthe benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.\r\nDo not assume the numbers tell you what you want them to tell.\r\n\r\nBenchmark                                          Mode  Cnt         Score        Error  Units\r\nStringBuilderBenchmark.stringBuilderPrimitiveInt  thrpt   25  23751776.524 ± 956416.445  ops/s\r\n```\r\n\r\nSo for now keeping my +1 based on these results for Ubuntu LTS, especially since they were consistent between JVM 11 and JVM 16. Happy to include other JVM\'s or OS\'es in the tests too, if needed.\r\n\r\nBruno']",80
811,Bump checkstyle from 8.45.1 to 9.0.1,Yes,"1 day, 4:10:31",1,0,[],[],2
810,LANG-1674: Make Range constructors more generic,No,,7,0,[],[],32
809,"Fix comment typos, make comments consistent.",No,,4,2,[],[],4
808,Bump spotbugs-maven-plugin from 4.3.0 to 4.4.1,Yes,"15 days, 3:57:11",1,0,[],[],2
807,Bump junit-bom from 5.8.0 to 5.8.1,Yes,"15 days, 3:59:59",1,0,[],[],2
806,"Add methods to enhance joins: joinNotEmptyWith, joinNotBlankWith",No,,0,2,"['Remove this comment, pls', 'Done.']","['', '']",122
805,Bump junit-bom from 5.7.2 to 5.8.0,Yes,"7 days, 22:56:10",1,0,[],[],2
804,floor and ceiling for Sorted Arrays,No,,10,0,[],"[""Hi again @ali-ghanbari :wave: \r\n\r\nCode looks good, docs and tests well written too. Thanks! :+1: \r\n\r\n@garydgregory,\r\n\r\n>I am pondering on this PR again: Since floor and ceiling are mathematical concepts, I would think it belongs in Commons Math, which already has functions to implement these concepts: https://commons.apache.org/proper/commons-math/javadocs/api-3.4/org/apache/commons/math3/analysis/UnivariateFunction.html\r\n\r\nGood point on whether it belongs to Lang or to another component. I haven't been following commons-math, but I thought it was also being split into smaller modules. Maybe commons-math or another of those math related modules would make more sense.\r\n\r\nOr maybe commons-collections? The JDK has a `NavigableSet` [^1] which has methods for `floor` and `ceiling` for a sorted set. Commons Collections has the `AbstractNavigableSetDecorator` class that also implements those methods [^2].\r\n\r\nI think if I were to search for these functions/methods, I would probably look for them in the collections component, and if not found then the lang or math-related components, in this order.\r\n\r\nBruno\r\n\r\n[^1]: https://docs.oracle.com/javase/7/docs/api/java/util/NavigableSet.html\r\n[^2]: https://github.com/apache/commons-collections/blob/0b365e4c1833bf55648ca34b9dffd966c31cc69b/src/main/java/org/apache/commons/collections4/set/AbstractNavigableSetDecorator.java#L70-L78\r\n""]",1206
803,Bump spotbugs from 4.2.3 to 4.4.1,No,,3,0,[],[],2
802,Bump maven-pmd-plugin from 3.14.0 to 3.15.0,Yes,"12 days, 22:34:44",1,0,[],[],2
801,refactor AtomicSafeInitializerTest to improve test design,No,,2,0,[],[],46
800,Remove redundant initializers,Yes,"34 days, 4:59:43",1,0,[],[],34
799,Bump checkstyle from 8.45.1 to 9.0,No,,3,0,[],[],2
798,Simplify pointless boolean expressions with equivalent but more simple.,No,,1,0,[],[],48
797,Avoid multiple equivalent occurrences of the same expression.,Yes,"1 day, 7:50:24",1,2,"['Extra spacing not needed.\r\n', 'HI. @garydgregory \r\nFixed.\r\nTY']","['', '']",5
796,"Adopt is no more, long live Zulu!",No,,3,0,[],[],2
795,LANG-1670 Fix typos in JavaDoc,Yes,"1 day, 0:37:28",2,0,[],[],10
794,Bump jmh.version from 1.27 to 1.33,Yes,"1 day, 22:30:11",0,0,[],[],2
793,Simplify bitwise operations with equivalent and simple.,No,,3,2,"['@arturobernalg \r\nDouble parentheses?\r\n', 'HI @garydgregory \r\nremoved.\r\nTY']","['', '']",2
792,Simplify assertions with equivalent but more simple.,Yes,"10 days, 14:02:34",3,1,['Spaces got lost.'],[''],233
791,LANG-1669: OpenJDK 16 Day Period Parsing,Yes,8:28:44,1,0,[],[],5
790,Bump spotbugs from 4.2.3 to 4.4.0,No,,2,0,[],[],2
789,Improve Travis CI build Performance,No,,2,0,[],[],1
788,LANG-1667: Allow tests to access java.util classes such as ArrayList in Java 16,Yes,10:51:19,1,0,[],[],3
787,Bump checkstyle from 8.43 to 8.45.1,Yes,"16 days, 22:31:35",2,0,[],[],2
786,Lang-1657: Diff Result Type Constraint,No,,3,0,[],[],38
785,LANG-1663: Update documentation to list correct exception for null array parameters,Yes,"16 days, 17:36:51",4,0,[],[],27
784,[LANG-1593] Common behavior for StringUtils join APIs when called with char or String delimiter,No,,8,17,"['Remove useless parentheses please.', ""All public methods should be Javadoc'd."", 'The 1st para of a Javadoc is automatically in a paragraph IIRC.', 'Why did you remove the private helper method?', 'Done.', ""I've followed convention from other Javadoc in the file. Fixed."", 'Valid point. I brought it back. ', 'Added. ', 'The first sentence in a Javadoc comment is special, it is the summary and should not be additionally wrapped in a paragraph. ', ""Thanks for pointing this out, I didn't know about such rule. \r\nUnnecessary paragraph tags removed. "", 'The null checks in these methods are superfluous as the join method called already checks for the same condition. Less boilerplate is better IMO.', 'Was this test removed because the code is already covered elsewhere? Did you confirm this by looking at the JaCoCo report?', '@HubertWo \r\nThe point of String vs char separators is that a String can be longer than one character, so you should test for String separators longer than one character to make sure the right work takes place under the covers.\r\n', 'Sorry for the late reply, I was on vac. \r\nI will take a look on your comments and try to apply changes later this week. \r\n', '1. The method is public - so users may pass  ```null```  as ```elements``` which will cause ```NPE``` in the same line ```elements.length```\r\n```\r\nassertNull(StringUtils.join((char[]) null, ""-"")); // throws NPE if null check is removed\r\n```\r\n2. This case was not tested, so I added additional assertions in tests to cover it.', 'This is exactly the test that exposes this bug: ```testLang1593```. \r\nPlease find the same assertion here ```testJoin_ArrayOfInt``` in ```StringUtilsTest```\r\n\r\n``` assertEquals(""1,2"", StringUtils.join(INT_PRIM_LIST, SEPARATOR));```\r\n\r\nWhen it comes to coverage, it looks like ```join``` methods have 100% coverage. \r\n\r\n![Screen Shot 2021-09-03 at 8 21 40 PM](https://user-images.githubusercontent.com/2518652/132050465-f7a8edb4-e258-4edd-b779-a488a40f0aa3.png)\r\n', ""The joining part is done via ```java.util.StringJoiner``` with accepts only```CharSequence``` in constructor, so it's made to use more than one character as separator by default. Don't you think that testing that would be redundant?""]","['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']",530
783,Bump checkstyle from 8.43 to 8.45,No,,2,0,[],[],2
782,[LANG-1666] Implemented ObjectUtils.equalsAny,No,,6,1,"['Or just `searchObjects== null ? false : Stream.of(searchObjects).anyMatch(e -> Objects.equals(object, e));`\r\n-1 anyway since this duplicated the functionality in `ArrayUtils.contains(Object[], Object)`']",[''],41
781,Fixing reversed Javadoc descriptions in StopWatch,Yes,"32 days, 17:27:30",1,0,[],[''],8
780,LANG-1665 - Modify Tuple equals to take BigDecimal comparison,No,,6,1,['Fix formatting: space after comma.'],"['-1: Not a good idea IMO because this effectively overrides the implementation of `BigDecimal#equals()` which means that you get different results comparing two `BigDecimal` and comparing the same two `BigDecimal` if they happen to live inside a `Triple` or `Pair` which would, for me, violate the principle of least surprise.\r\n']",68
779,"LANG-1664: Fix javadoc (separator is a character, not a string)",No,,1,3,"['Sentences should end in a period. Sentences feel quite awkward (to me) ending in a preposition.', 'Why did you remove the documentation for null input?', 'Why did you remove the documentation for null input?']",['See comments.\r\n'],6
778,Bump spotbugs-maven-plugin from 4.2.3 to 4.3.0,No,,3,0,[],[],2
777,"LANG-1664 - Javadoc for StringUtils.substringBefore(String str, int separator) doesn't mention that the separator is an Int",No,,3,0,[],[],18
776,Javadoc Validate.notNull corrections,No,,1,0,[],[],29
775,Bump spotbugs from 4.2.3 to 4.3.0,No,,1,0,[],[],2
774,Bump checkstyle from 8.43 to 8.44,No,,2,0,[],[],2
773,Object Casting,No,,2,2,"['New main public and protected methods need a Javadoc since tag.', 'Match the style of the file: Use final where possible, no need for extra parentheses.']",['@johnson-abraham \r\nSee comments. Looking for comments from others in the community as well.\r\n'],27
772,Object Casting,No,,0,0,[],[],31
771,"Simplify conditions in ""binaryBeMsb0ToHexDigit"" and avoid extra checks.",No,,1,0,[],[],28
770,Removed use of restricted identifier,No,,6,0,[],[''],12
769,Minor changes,Yes,"328 days, 1:03:58",1,2,"['Not sure if this is correct. Needs analysis. Was this change made by a tool in IntelliJ or Eclipse?', ""The conditions its covered by the condition --> '!(superClassIndex < interfaceIndex)' ""]","['', '']",9
768,Bump checkstyle from 8.42 to 8.43,Yes,"22 days, 6:57:54",1,0,[],[],2
767,Bump junit-pioneer from 1.4.1 to 1.4.2,Yes,"22 days, 6:58:49",1,0,[],[],2
766,LANG-1172: Support dash as a delimiter in locales,Yes,"280 days, 0:54:07",11,7,"['Blame my weak eyes - could we introduce constants here, e.g. ""UNDERSCORE""?', 'We could use ""UNDERSCORE"" or ""DASH"" here or introduce a helper method, e.g. ""isDelimiter""? What do you think?', 'Done in 730e156.', ""Added the constant in 730e156. I'd prefer not to add the helper method to avoid changing too much of the structure as part of this fairly minor overall change."", 'Does it matter that dash is tested before underscore? ', ""It's been a while since I wrote this code, but I don't think so. Should be possible to switch them around without issues."", ""All the unit tests still pass with the comparison swapped. I made the change in 0319d84d1. It's probably the right thing to optimize for the previous delimiter as that'll be the vast majority of use-cases.""]","['', '', '', 'I am not sure whether we should modify the current methods to support this locale, or have separate methods. But the code looks really good :+1: Maybe someone else can chime in and share their thoughts on supporting both here. Thanks for the PR @c-w !', '', '', '']",19
765,Check if the given class represents an array of primitives,No,,5,0,[],[],36
764,Bump actions/cache from 2.1.5 to 2.1.6,Yes,"25 days, 7:31:22",1,0,[],[],2
763,Bump jmh.version from 1.27 to 1.32,No,,2,0,[],[],2
762,LANG-1661 - Add methods to ClassUtils to get the class type names in a null-safe manner,No,,5,0,[],[],112
761,Bump junit-bom from 5.7.1 to 5.7.2,Yes,"5 days, 15:28:05",1,0,[],[],2
760,ObjectUtils: Add nullSafeEquals method for Object compare. ,No,,5,0,[],[],205
759,ObjectUtils: Add nullSafeEquals method for Object compare.,No,,0,0,[],[],205
758,Use own validator ClassUtils.getSimpleName to get String input,No,,3,2,"['We should not do this since a ""this"" will never be null.', 'This does not make sense since a null enumClass will cause an exception before we even get here.']","['Please review all call sites keeping in mind the 2 comments I left in this PR. In general, it does not make sense to call the util method when the argument will never be null.', 'Hi @arturobernalg Ping?']",14
757,Use own validator ClassUtils.getName to get String input,No,,5,8,"['Why? See my comments in your other PR. In this case, neither array1 or array2 can be null here.', 'Yep, my bad. changed.', ""Don't need extra parentheses or extra space after comma."", 'Why?', 'Why?', 'changed.', 'changed.', ""@arturobernalg \r\nWe're going through the same issue, over and over. I'm going to stop reviewing this PR until you can tell us that you've verified each call site you changed and whether it is justified. In this case, what happens when `eventSource` is null? Please do walk through the code instead of blindly changing all callers for Object#getClass(). Hint: if eventSource is null, we never get here, so if we are here it is never null and safe to call getName().""]","['', '', '', '@arturobernalg \r\nPlease see my comments. ', '', '', '']",44
756,LANG-1660 - Gets a hex String form of an object's identity hash code,No,,1,0,[],[],42
755,Fix ObjectUtils Javadocs,Yes,"146 days, 10:44:43",1,0,[],[],16
754,LANG-1659 - Add null-safe ObjectUtils.isArray(),Yes,"156 days, 21:35:16",2,10,"['No need  for extra parentheses here.', 'Done. Changed ', 'Close HTML tags.', 'Remove extra blank lines.', 'Might as well test with all of our own arrays like the `EMPTY_*` arrays.', 'I\'ve been using ""Tests..."" for `is*` methods. If you really want to keep ""Determine"" then it should be ""Determines"", also the main part of the Javadoc should mention that the method is null-safe, for example: ""Test whether the given object is an Object array or a primitive array in a null-safe manner."".', 'Done.', 'Done', 'Done', 'Changed.\r\nTY']","['', '', '@arturobernalg \r\nPlease see my scattered comments.\r\n', '', '', '', '']",79
753,Bump jmh.version from 1.27 to 1.31,No,,2,0,[],[],2
752,Upgrade checkstyle 8.41.1 -> 8.42,Yes,"2 days, 21:39:38",2,0,[],[],4
751,create API for searching for numbers within string - solving LANG-165…,No,,0,8,"['This will not work on locales that use a different character for the decimal marker.', 'The API name says Number but the return type says Double. They should match.\r\n\r\nBut as soon as you type an API to Double, someone will want one for Integer, Long, and so on.', 'By convention test method have the ""test"" prefix.\r\n\r\nYou should break up each use case in their own method IMO.\r\n\r\nThere are no tests for edge cases: null and empty string. Also a non empty string with no numbers.', 'Why is this an error condition? Sentences end in a period.\r\n\r\nHow would you treat commas in a sentence when in a locale like French that uses the comma as the decimal separator? ', 'You propose to consume separator as method parameter? ', 'So, ok, and what is exactly your proposition?) Btw all the types you mentioned extends Number class, that`s why from my point of view it is valid. Explain please more to me why it does not work', 'Valid points, I will add some. Thanks!', 'You can implement an API to do that if you want but my main point is that the code should run with inputs from any locale which means handling period and commas as both the decimal and thousands separators. But, the other point I was attempting to make is that I do not feel this code belongs in Commons Lang, it feels too much like NLP code to me. It might be something for Commons Text, but it seems quite a specific use case, too much like NLP, not generic enough for a Commons library. I encourage others in the community to opine. The NLP nature makes me wonder how you would handle input like ""I \'d like nuts and bolts: 10,000,9,000, but only up to $10.5."" and ""Send $4.50.5 apples too please."" and ""Les pommes sont €10.5 a Paris, $2.30 a Los Angeles."" \r\n']","['Also what about the thousands separator as in ""10,000"" for 10 thousand? What about the Unicode decimal separator? A true general solution is much more complex than one that focuses on a narrower case hard coded to the period decimal separator. \r\n\r\nThe type of string parsing is too specific for Commons Lang IMO, maybe for Commons Text.\r\n\r\nI\'m curious as to what the community thinks.', '', '', '', '']",165
750,Bump jmh.version from 1.27 to 1.30,No,,2,0,[],[],2
749,Bump junit-pioneer from 1.3.8 to 1.4.1,Yes,"7 days, 7:43:40",1,0,[],[],2
748,Bump junit-pioneer from 1.3.8 to 1.4.0,No,,2,0,[],[],2
747,Bump checkstyle from 8.41.1 to 8.42,No,,2,0,[],[],2
746,Bump easymock from 4.2 to 4.3,Yes,6:42:54,2,0,[],[],2
745,Lang 1656 first non blank returned,No,,1,0,[],[],111
744,Bump spotbugs from 4.2.2 to 4.2.3,Yes,"2 days, 17:10:40",0,0,[],[],2
743,Lang 1656: first non blank returned,No,,4,2,"['I think you should escape the ""`->`"" using `-&gt`', 'I think you should escape the ""`->`"" using `-&gt`']",[''],111
742,Bump actions/cache from v2.1.4 to v2.1.5,Yes,"5 days, 17:06:24",1,0,[],[],2
741,[LANG-1655] Add API canonicalCompositionAfterStripAccents (an issue where characters were separated in the NFD…),No,,1,0,[],[],29
740,Bump actions/setup-java from v1.4.3 to v2,No,,2,0,[],[],2
739,Bump checkstyle from 8.41 to 8.41.1,Yes,"20 days, 13:03:22",1,0,[],[],2
738,Redundant Collection operation. Use Collections.emptyIterator(),Yes,"47 days, 6:15:07",1,0,[],[],2
737,Bump jmh.version from 1.27 to 1.29,No,,3,0,[],[],2
736,LANG-1652 - Check whether the given class has a public constructor,No,,4,0,[],[],29
735,Bump spotbugs-maven-plugin from 4.2.0 to 4.2.2,Yes,"2 days, 17:33:30",1,0,[],[],2
734,Use Set instead of List for checking the contains() method,Yes,"242 days, 8:50:17",5,0,[],['LGTM'],4
733,Fixed NPE getting Stack Trace if Throwable is null,Yes,"379 days, 14:48:48",1,9,"['In-line `trace`.', 'Hi @garydgregory \r\nChanged\r\nTY', 'I think the test can be simplified by not using StringUtils.', 'HI @garydgregory \r\nSomeThins like --> `assertNotNull(ExceptionUtils.getStackTrace(null));` ??\r\nTY', '> \r\n> \r\n> HI @garydgregory\r\n> SomeThins like --> `assertNotNull(ExceptionUtils.getStackTrace(null));` ??\r\n> TY\r\n\r\nHello @arturobernalg \r\nNo, assert what you expect to happen on null input. Your suggestion above would accept a return value of ""foo"". Is that OK? I think not.\r\n', 'HI @garydgregory \r\nok i think i understand what you mean.\r\nTY', 'We do not need to create the writers at all. IMO, just guard the method by starting it with:\r\n```\r\n        if (throwable == null) {\r\n            return StringUtils.EMPTY;\r\n        }\r\n```', 'ping.', ""HI @garydgregory \r\nI don't see the way to just use String and not break the binary.\r\n""]","['', '', '', '', '', '', '@arturobernalg \r\nSee my 1 comment and rebase on master, please.', 'See https://github.com/apache/commons-lang/pull/733/files#r820237567', '', '']",13
732,"LANG-1651 - Check if a given field is a ""public static final"" constant.",No,,1,0,[],[],18
731,LANG-1649 - Check if method is Overridable,No,,9,22,"['Add an extra line', 'Remove double whitespace after void. The same change in the javadoc of the method in ClassUtils.', 'Remove extra line here', 'No `<p>` tags on the first paragraph', 'Add whitespace before the curly brace `{` (to match our coding style)', 'Done', 'Done', 'Done', 'Done', 'Done', 'Given that `Modifiers` exposes the bit flag constants can this all be done with 2 comparisons:\r\n```java\r\nfinal int mod = method.getModifiers();\r\nif ((mod & (Modifier.STATIC | Modifier.FINAL | Modifier.PRIVATE) != 0) {\r\n   return false;\r\n}\r\nif ((mod & (Modifier.PUBLIC | Modifier.PROTECTED) != 0) {\r\n   return true;\r\n}\r\n// default scope: the package must be the same to allow override\r\nreturn getPackageName(method.getDeclaringClass()).equals(getPackageName(cls));\r\n```', '& cannot be applied to int. Will not work. And IMO to more complex and hard to read', 'The test case should also pull in a default method from a super class declared in another package and test that the result is false. Try putting a public class in `src/test/o.a.c.lang3/reflect/testbed` with a default method then extending that in your test class (e.g. `ClassUtilsTest.ABG2`) and see if the method detects the package is incorrect and it cannot be overridden', 'Using `&` here is a bitwise AND operation (see [Bitwise Operators](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html)). Look at the source code for Modifier.isStatic(...) for an example.\r\n\r\nDid you try the code? It has a missing parenthesis so this should be correct:\r\n```java\r\nfinal int mod = method.getModifiers();\r\nif ((mod & (Modifier.STATIC | Modifier.FINAL | Modifier.PRIVATE)) != 0) {\r\n   return false;\r\n}\r\nif ((mod & (Modifier.PUBLIC | Modifier.PROTECTED)) != 0) {\r\n   return true;\r\n}\r\n// default scope: the package must be the same to allow override\r\nreturn getPackageName(method.getDeclaringClass()).equals(getPackageName(cls));\r\n```', 'Done', 'Done', 'Looking at the rest of the testbed package, this does not have a very descriptive name. I would suggest `ClassWithPackagePrivateMethod` and the method to be `packagePrivateMethod`. The method is not a default method (which applies to interfaces). The purpose of the testbed class is then self-documenting.\r\n\r\nThe test class that extends this can then be named whatever you want but I would suggest `IsOverridableClass`.', 'Can you put all the method modifiers in the method name:\r\n\r\n```Java\r\nvoid packagePrivateMethod() {}\r\npublic final void publicFinalMethod() {}\r\npublic static void publicStaticMethod() {}\r\n```', 'Update this to `packagePrivateMethod`', 'Update this to `packagePrivateMethod`', 'Update this to `packagePrivateMethod`\r\n\r\nThe limitations of the result for packagePrivateMethod should be documented. For example:\r\n\r\n```\r\n<p>Note that the result of {@code isOverridable} when called on a package-private method is\r\nsensitive to the package of the target class. When invoked on the declaring class or a child\r\nclass within the same package the result will be {@code true} as the method is visible within \r\nthe package. When invoked on a child class within a different package the result will be\r\n{@code false}.\r\n```', 'package-private scope:']","['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']",110
730,EnumUtils: Add more-generic getEnumMap() method.,No,,3,3,"['Hi @MaxwellCody and thank you for your PR. Some comments:\r\n\r\n- Add `@since 3.13.0`\r\n- ""Eat own dog food"" and reimplement `EnumUtils.getEnumMap(Class<E>)` to use this method.', 'Add `Objects.requireNonNull(enumClass, ""enumClass"")` as the 1st line of this method.', 'Perhaps optimise the size of the hashmap:\r\n```java\r\nfinal E[] elements = enumClass.getEnumConstants();\r\nfinal Map<K, E> map = new LinkedHashMap<>(elements.length);\r\nfor (final E e : elements) {\r\n```']","['', '']",68
729,LANG-1647 - Check if an throwable is a checked exception,No,,1,10,"['`instanceof` handles null. Does this work if you remove the `throwable != null &&`?\r\n\r\nI would expect in the majority of cases this would be called with a non-null object so this simplifies the code.', 'This is in the wrong place', 'I prefer to leave all options open. it is more versatile. ...', 'true. thanks. @aherbert ', 'My point was that you do not need the `throwable != null`. It should still pass your unit tests (i.e. return false if null is passed).', 'No. Return true without the null check  ', ""The API name is misleading since it takes more than Exception as input. \r\nGoing further, I think the type name in the method name is redundant and calling the API 'isChecked' should be enough."", 'Adding a new API is not a maintenance version change per semantic versioning guidelines, the version should be the next minor one.', 'Changed ', 'Hi @garydgregory \r\nChanged']","['', '', '', '', '', '', '', '', '']",44
728,LANG-1645: NumberUtils to recognise hex integers prefixed with +,No,,1,0,[],[],38
727,LANG-1644 - Check if number is hexadecimal,No,,9,4,"['Would be a neat use of our Range class?', ""Hi  @garydgregory \r\n\r\ndon't you think this may be complicated the code? are you thinking in a global solution, implement in  isCreatable perhaps? "", 'If chars is length 1 then this will throw an index out of bounds exception.', ""Hi @garydgregory \r\nI've trying use Range and i think it's more clean check the one by one the char. With range should look like:\r\n\r\n```\r\n\r\n final Range<Integer> range = Range.between(0, 15);\r\n\r\n        for (; pfxLen < chars.length; pfxLen++) {\r\n            if (!range.contains(Character.getNumericValue(chars[pfxLen]))) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n```\r\n""]","['', '', '', '']",87
726,Bump spotbugs from 4.2.1 to 4.2.2,Yes,"1 day, 11:07:12",1,0,[],[],2
725,Add toLocalDate to CalendarUtils,No,,2,0,[],[],22
724,Bump jmh.version from 1.27 to 1.28,No,,2,0,[],[],2
723,Ll,No,,1,3,"['Use the current version of Mockito if you need it, not some random antique version please.', 'No comments like this please.', 'Missing header file break the build. Check the Actions tab.']",['See comments. '],422
722,Bump checkstyle from 8.40 to 8.41,Yes,"3 days, 9:50:21",1,0,[],[],2
721,Bump junit-pioneer from 1.3.0 to 1.3.8,Yes,"3 days, 9:51:27",1,0,[],[],2
720,Reuse ObjectUtils.anyNull,No,,2,0,[],[],102
719,SimpleStopWatch is alternative for overcomplicated and buggy StopWatch,No,,1,0,[],[],164
718,Use own validator ObjectUtils.anyNull to check null String input,Yes,"1 day, 0:29:20",2,0,[],[],6
717,Feature/not null or empty aux,No,,3,2,"['Please close HTML tags. The FIRST sentence in a Javadoc does not need to be in a paragraph, it is implied.\r\n', 'Javadoc Add at since 3.12.0 for new public and protected APIs.\r\n']","['', '']",94
716,Reuse the boolean array validations.,No,,3,4,"['Hi @arturobernalg \r\nI think we should converge all null checks to `Objects.requireNonNull(arg, ""arg"")`, which also avoids making our exception messages too English-centric. In the same vein, I\'d call this new method `requireNotEmpty`.\r\n', 'No need for since tag for private elements.', 'No need for since tag for private elements.', 'Simplify to ""Empty array"".']","['Hi @arturobernalg \r\nThank you for your PR. Please see my comments.\r\nSes if you can reuse:\r\n- `ObjectUtils.isEmpty(Object)`\r\n- `ObjectUtils.isNotEmpty(Object)`\r\nWe could add:\r\n- `ObjectUtils.requireNotEmpty(Object)`\r\n- `ObjectUtils.requireNotEmpty(Object, String)`\r\n']",67
715,Bump biz.aQute.bndlib from 5.2.0 to 5.3.0,Yes,9:16:48,1,0,[],[],2
714,Add and use true & false String constants,Yes,14:52:21,1,0,[],[],56
713,"Let mid(null), left(null) and right(null) return empty",No,,3,0,[],[],45
712,Fix broken Javadoc links to commons-text,Yes,"3 days, 11:40:10",2,0,[],[],6
711,New Junit test cases for org.apache.commons.lang3.builder,No,,1,1,['No need for this comment IMO.'],"['', 'See 2 comments.\r\nAlso you need a real title to this PR.\r\n']",95
710,Bump actions/cache from v2 to v2.1.4,Yes,"2 days, 16:10:24",1,0,[],[],2
709,Implement StopWatch lap,No,,4,2,[],[],65
708,Bump spotbugs from 4.2.0 to 4.2.1,Yes,"5 days, 16:37:41",1,0,[],[],2
707,Bump junit-bom from 5.7.0 to 5.7.1,Yes,"5 days, 16:35:02",1,0,[],[],2
706,Bump checkstyle from 8.39 to 8.40,Yes,"9 days, 15:34:59",1,0,[],[],2
705,Bump maven-checkstyle-plugin from 3.1.1 to 3.1.2,Yes,"2 days, 21:02:50",1,0,[],[],2
704,Added new percentage check circuit breaker,No,,2,0,[],[],415
703,LANG-1641: GmtTimeZone now implements #equals(Object) using it's time…,No,,3,5,"['No weird prefix on names please.', 'Either this class should be final or this check should allow subclasses.\r\nWDYT?', 'done', 'I made the class final.', 'why make class GmtTimeZone final?']","['', '', '', '']",77
702,Bump junit-pioneer from 1.1.0 to 1.3.0,Yes,10:57:40,1,0,[],[],2
701,Minor Improvements,Yes,"22 days, 5:28:04",1,0,[],[],11
700,Minor Improvement: Add final variable.try to make the code read-only,Yes,"22 days, 5:41:27",1,0,[],[],46
699,Minor Improvement: Remove redundant initializer,Yes,"22 days, 5:46:55",1,0,[],[],32
698,Minor Improvement:,No,,2,0,[],[],167
697,Bump junit-pioneer from 1.1.0 to 1.2.0,No,,2,0,[],[],2
696,LANG-1639 Add getEnumByPredicate,No,,1,3,"[""This test does not cover checking the class' enum aspect because the predicate is null."", 'Thanks, had it named differently before, but decided to align the naming with the other enum tests 🤦 ', ""Ah, I misread the comment. Yes you're right, the test is faulty.""]","['', '', '']",67
695,Remove unnecessary length check,No,,0,0,[],[],2
694,"[LANG-1231] - StringUtils#indexOfAny(final CharSequence cs, int beginIndex, final String searchChars)",No,,1,0,[],[],43
693,[LANG-1614] - Split fixed-length elements,No,,2,0,[],[],72
692,Bump spotbugs-maven-plugin from 4.1.4 to 4.2.0,Yes,"2 days, 8:11:41",1,0,[],[],2
691,DiffBuilder.java: remove unnecessary boxing for primitives,No,,3,0,[],[],32
690,Processor.java: check enum euqality with == instead of .equals() method,Yes,12:46:44,1,0,[],[],10
689,Bump checkstyle from 8.38 to 8.39,Yes,8:41:01,1,0,[],[],2
688,[LANG-1637] Fix 2 digit week year formatting,Yes,"6 days, 3:39:23",6,10,"['Hi,\r\nThank you for your PR.\r\nWhat about ""YYY""?', 'Please add code in your new test for Y and YYY.', 'added, thanks', 'I am not convinced by this because it patches the wrong spot.', 'the name TwoDigitYearField implies this class encapsulates formatting of year field to a 2 digit string. as such, it seems reasonable for it to have the logic to take any year integer and map it to a decade followed by a year digits.\r\nyou can also see that the other method in this class \r\n`void appendTo(Appendable buf, Calendar calendar) throws IOException`\r\nimplementing the Rule interface, does the same', '@garydgregory WDYT?', 'Hi @michael-o \r\nEarlier you said ""I am not convinced by this because it patches the wrong spot."" implying there was a ""right"" spot, but where would that be?\r\n', 'I think here: https://issues.apache.org/jira/browse/LANG-1637?focusedCommentId=17257625&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17257625 and this method must throw IAE `if (value >= 100)`.', 'Well... which way is this one going to go? @ugonen Are you going to update your PR or @michael-o do you want to provide a different PR?', 'I think for the ease of use we have to use this one because my solution leaks abstraction. It makes too many assumptions about in the delegated `NumberRule`']","['', '', '', '', '', '', '', '', '', '']",17
687,Minor improvements,No,,1,0,[],[],147
686,[LANG-1636] Add missing boolean[] join method,Yes,"8 days, 7:28:53",2,0,[],[],97
685,[LANG-1635] - Count True function improvement,No,,4,0,[],[],39
684,[LANG-1634] Add ObjectUtils #applyIfNonNull and #applyFirstNonNull,No,,6,11,"['typo in method name', 'Corrected, thanks.', 'IMO, you\'re not ""invoking"", you\'re ""accepting"", so the Javadoc should say ""Accepts..."". Actually, the method is misnamed since the underlying method is `Consumer#accept()`, this method should be use ""accept"", not ""apply"".\r\n', 'See ""accept"" comment above and other comment in the Conversation stream of this PR.\r\n', 'You can add a call to `Objects.requireNonNull()` here instead of the blind assignment:\r\n```\r\nthis.value = Objects.requireNonNull(value, ""value"");\r\n```\r\n', ""I have changed the method name to 'accept...' and updated the Javadoc comment accordingly."", ""I have changed the method name to 'accept...', switched the parameter order and updated the Javadoc comment accordingly."", 'This inner class was meant as a simple Java bean with a setter and getter, hence did not have any checks in it. I have changed it now.', 'more user-friendly: `Consumer<? super T> consumer`. \r\n\r\nAlso, `requireNonNull(consumer, ""consumer"")`.']","['', '', '', '', '', '', '']",133
683,[LANG-1632] -Implementation of indexOf,No,,3,0,[],[],35
682,[LANG-1631] Add short circuits in CharSequenceUtils if a character is not defined,Yes,"5 days, 7:30:09",1,10,"[""Hi @arturobernalg \r\n\r\nThank you for your PR. \r\n\r\nPS: It's harder to deal with a PR like this because it mixes a change with some clean ups (-1 -> NOT_FOUND) so I am not sure where the new test is without trolling through all the noise :-(\r\n\r\nWhy is the number in parentheses? If this is a test for the actual bug fix, then you should add a sanity check to validates that the char is indeed bogus.\r\n\r\nTY."", ""HI @garydgregory \r\nsorry for the noise. When I created the PR it seemed logical.  But you're right. Better keep the PRs separate"", ""Hi @arturobernalg \r\nYou've not answered all my question.\r\nAlso why are you building the char[] one char at a time? Why not call CharBuffer.wrap(String)?"", ""mmm \r\n\r\n- The parentheses was a mistake\r\n- The Character in the test there are not valid unicode values\r\n- I'll change  the test for --> CharBuffer.wrap(String)"", ""mm . Maybe it's my fault. \r\nThe idea it's exit the loop and return -1 (NOT_FOUND) if not found the charset "", 'idem @garydgregory ', ""ah, I see, this is a new line, and the other mods are updates. ok, I'll take a look tomorrow probably..."", 'sorry. my fault for mixing.', 'This is already defined in `StringUtils.INDEX_NOT_FOUND` and `ArrayUtils`, please reuse.\r\n', 'true. changed   ']","['', '', '', '', '@arturobernalg\r\nNow, I\'m confused. There are now no changes here for ""Check if Character is defined"".', ""The idea it's exit the loop and return -1 (NOT_FOUND) if not found the charset\r\n"", '', '', '', '']",11
681,[LANG-1630] - NPE lowerCase and upperCase when locale is null,No,,0,0,[],[],16
680,[LANG-1544] MethodUtils.invokeMethod NullPointerException in case of null in args list,Yes,22:43:59,2,8,"[""Let's not hard-code Linux-specific new-line chars in error messages, but, if you really want new-lines, use `%n` with `String.format()`."", 'Use final where you can, like here for parms.\r\n', 'Please make the test fixture as simple as possible: All of these methods can just return `void`.', 'Maybe rename to `fromClassArray` to match `toClassArray`?', 'I replaced the newlines with opening and closing brackets.\r\n\r\nMichael', 'Done.\r\n\r\nMichael', 'Done.\r\n\r\nMichael', 'Good suggestion. Done.\r\n\r\nMichael']","['@mdbuck77\r\n\r\nThank you for your PR. Please see my comments.\r\n\r\nGary', '', '', '', '']",145
679,Correct markup in Javadoc for unbalanced braces,Yes,23:20:17,1,0,[],[],4
678,[LANG-1629] Delete white space,Yes,2:58:09,1,0,[],[],4
677,LANG-1628: Javadoc correction for RandomStringUtils.random(),No,,2,2,"['Hi @aviProgrammer , thanks for your pull request.\r\n\r\nIt looks like a good contribution! And I was ready to approve it, but I noticed we can fix it in another line further down, where the same comments appear.\r\n\r\nIf you are using the GitHub UI to read this reply, you can click on the blue arrow here twice, and on lines 348 and 349 you should find these same parameters I think.', 'Hi @kinow , Thanks for your observation. \r\nThe same fix of Javadoc has been applied at line 348 and 349. \r\n\r\nLet me know in case you find any other improvements that can be done in the same Javadoc.']","['', '', '']",12
676,LANG-1409 StringUtils fix for null Locale,No,,1,0,[],[],17
675,"[LANG-1444] NumberUtils.createNumber(), BigDecimal for decimal fractions tending to zero",No,,7,0,[],[],26
674,Bump jmh.version from 1.21 to 1.27,No,,3,0,[],[''],2
673,[LANG-1626] Correction in Javadoc of some methods.,Yes,"1 day, 16:06:22",2,0,[],[],96
672,Correction in Javadoc of some methods.,No,,0,0,[],[],9728
671,Bump spotbugs from 4.1.4 to 4.2.0,Yes,"3 days, 13:21:19",1,0,[],[],2
670,[LANG-1622] Javadoc of BooleanUtils incorrectly refers to another method,Yes,"1 day, 3:01:43",1,0,[],[],6
669,Adding method to convert and format date,No,,3,0,[],[],20
668,[LANG-1622] Javadoc of some methods incorrectly refers to another method,Yes,7:36:47,1,0,[],[],12
667,[LANG-1622] Corrected reference to right methods.,Yes,"2 days, 8:25:08",0,1,"[""@garydgregory I understand you merged PR 668 as it was reported by original reporter and had fix too.  If you will review my PR, I have corrected similar issue thing on other lines too that's from L551-L553.\r\n\r\nShould I make another PR for same?""]",[''],18
666,[LANG-1621] - Add JAVA_VM_COMPRESSED_MODE,No,,4,0,[],[],29
665,Bump checkstyle from 8.37 to 8.38,Yes,"5 days, 9:34:15",1,0,[],[],2
664,[LANG-1620] - refine StringUtils.lastIndexOfIgnoreCase,Yes,"6 days, 8:32:10",4,0,[],[],10
663,[LANG-1619] Refine StringUtils.abbreviate,Yes,"6 days, 9:25:07",1,0,[],[],15
662,Bump junit-pioneer from 1.0.0 to 1.1.0,Yes,"9 days, 10:17:11",1,0,[],[],2
661,[LANG-1618] - TypeUtils. containsTypeVariables does not support GenericArrayType,Yes,9:03:28,1,0,[],[],48
660,Bump maven-pmd-plugin from 3.13.0 to 3.14.0,Yes,"11 days, 10:21:59",1,0,[],[],2
659,LANG-1617 - Improve/clean math package,No,,1,2,"['Hi @arturobernalg \r\nThank you for your PR.\r\n-1: For low-level libraries like most Apache Commons libraries, I like to keep boxing and unboxing explicit to make it easier to understand where objects are created and unwrapped.']","['', ""See my previous comment: -1 don't change the boxing/unboxing.""]",12
658,[LANG-1616] - Add lastIndexOfAnyChar,No,,2,0,[],[],120
657,[LANG-1524] : Added cycle detection check in toString for classes,No,,8,2,"['typo -> ""Land"" -> ""Lang""']",[''],40
656,[LANG-1524] : Added cycle detection check in toString for classes,No,,0,0,[],[],42
655,[LANG-1524] - Added cycle detection check in toString for classes,No,,0,0,[],[],43
654,[LANG-1533] - RandomStringUtils.random() should not include \u0000 or control characters,No,,2,1,['That does not look right IMO because it excludes the TAB character.'],[''],1
653,LANG-1345 - Add methods to enhance non-empty strings,No,,1,0,[],[],68
652,[LANG-1345] Add methods to enhance non-empty strings,No,,0,0,[],[],69
651,[LANG-1615] - ArrayUtils contains && indexOf fails to handle Float.NaN,Yes,14:15:30,2,2,"['a -> array', 'Changed']","['', '']",28
650,LANG-1359 - add getStopTime to StopWatch,No,,1,1,[],[],32
649,[LANG-1231] - StringUtils#indexOfAny() methods with start position argu…,No,,1,8,"['Please fix formatting.', ""What's the purpose of having the same ```@DisplayName``` and test name? "", 'Just get extra info https://junit.org/junit5/docs/5.0.3/api/org/junit/jupiter/api/DisplayName.html', 'no clue about what do i need to fix', ""I don't think we need to crowd the source with DisplayName here since it does not convey more information, give the test method a better name if needed."", 'OK, removed', 'Examples: ```(searchChars )```  - space before closing bracket  or ```ch,null input or  the ``` - space after comma and double space.', ""OK, I think it's already formatted""]","['', '', '', '', '', '', '', '']",6407
648,[LANG-1326] - StringUtils#isAllEmpty and #isAllBlank should return fals…,No,,4,0,[],[],23
647,[LANG-1541] - ArrayUtils.contains() fails to handle Double.NaN,No,,3,3,[],[],13
646,[LANG-1345] - Add methods to enhance non-empty strings,No,,2,5,"['And since tag.', 'Use EMPTY constant. ', 'Done', 'Changed to 3.12', 'HI @garydgregory Should i make any other changes?']","['', '', '', '']",69
645,[LANG-1614] - Split fixed-length elements,No,,1,2,"[""I think it'll be better to throw `IllegalArgumentException` in case `length <1  || length > str.length()`. @arturobernalg  Thoughts? "", 'Hi \r\n\r\nusually in the others method return null . An. example of that -->\r\n\r\n`  public static String abbreviateMiddle(final String str, final String middle, final int length) {\r\n        if (isAnyEmpty(str, middle) || length >= str.length() || length < middle.length()+2) {\r\n            return str;\r\n        }`']","['', '']",69
644,[LANG-1231] - StringUtils#indexOfAny() methods with start position argu…,No,,1,6,"['Wrong since tag.', 'Hi @garydgregory Which would be correct?', 'True. Changed to 3.12', ""Looks good I think. Only thing I'd like to confirm is what happens with those surrogate pairs. (Can't recall if that affects the length of the string, in which case it could give unexpected results here?)\r\n\r\nhttps://garygregory.wordpress.com/2015/11/03/java-lowercase-conversion-turkey/"", 'I think we can just document that it\'s not supported for now. WDYT @garydgregory ?\r\n\r\n```java\r\nLocale turkish = Locale.forLanguageTag(""tr"");\r\nassertEquals(1, StringUtils.indexOfAny(""TITLE"".toLowerCase(turkish), 0, ""i"")); // error, -1 returned\r\n```\r\n\r\n@arturobernalg if you have any thoughts too, but in the meantime, could you squash your commits? Your change is very well written, and concise. But there are now 13 commits due to review feedback. We can squash it too when merging, but it\'d be simpler if you could do it, please.\r\n\r\nThanks!', 'Although I think other similar methods make no remarks about locales/surrogate pairs... so we can probably ignore what I just said I guess ☺']","[""Looks good to me. Might have to review with calm and the IDE to test for surrogate bytes, and see if there's any case that we didn't think of, or haven't tested.\r\n\r\nBut looks really good @arturobernalg , thanks for the PR!"", '', '', '', '', '', '']",49
643,[LANG-1420] - TypeUtils.isAssignable returns wrong result for GenericAr…,No,,2,1,"[""This comment is backward.\r\n\r\nI've committed a variation of the PR to git master with more tests.\r\n\r\nI am wondering about other Type extensions. What do you think about `ypeUtilsTest.testIsAssignableGenericArrayTypeToWildercardType()`? See `isAssignable(Type, Type, Map<TypeVariable<?>, Type>)`.""]",[''],23
642,[LANG-1613] - BigDecimal is created when you pass it the min and max values,No,,2,0,[],[],5
641,[LANG-1609] - Case-insensitive variants for startsWithAny and endsWithAny,No,,7,0,[],[],105
640,[LANG-1612] testGetAllFields and testGetFieldsWithAnnotation sometimes fail,No,,2,0,[],[],15
639,Bump actions/checkout from v2.3.3 to v2.3.4,Yes,"2 days, 8:47:10",1,0,[],[],2
638,Fix Javadoc for SystemUtils.isJavaVersionAtMost(),Yes,"15 days, 8:25:25",2,0,[],['Makes sense.'],2
637,Bump checkstyle from 8.36.2 to 8.37,Yes,"4 days, 8:16:46",1,0,[],[],2
636,LANG-1610: Fix StringUtils.unwrap throws StringIndexOutOfBoundsException,Yes,"19 days, 23:41:03",2,0,[],['This change looks good.'],3
635,[LANG-1593] - Common behaviour for StringUtils join APIs when called with char or String delimiter,No,,5,2,"[""You're not adding method to the old version 3.2; the next version will be 3.12.\r\n"", 'My mistake. Fixed.']","['', '']",485
634,NumberUtilsTest - incorrect types in min/max tests,Yes,0:25:57,1,2,"[""Please don't use star imports."", 'Fixed. ']","['', '']",54
633,Close/flush the `OutputStream` before calling `toByteArray()` on underlying `ByteArrayOutputStream`,No,,2,0,[],[],20
632,Bump spotbugs-maven-plugin from 4.1.3 to 4.1.4,Yes,"4 days, 8:58:28",2,0,[],[],2
631,More test coverage for CharSequenceUtils.,Yes,"7 days, 23:31:46",1,0,[],[],24
630,[LANG-1609] Case-insensitive variants for startsWithAny and endsWithAny.,No,,2,1,['Please declare  ```ignoreCase``` argument as ```final```'],[''],95
629,[LANG-1608] Include junit-bom for dependency version alignment.,Yes,0:30:56,2,0,[],[],13
628,Bump biz.aQute.bndlib from 5.1.2 to 5.2.0,Yes,"4 days, 8:16:05",1,0,[],[],2
627,Bump spotbugs from 4.1.3 to 4.1.4,Yes,"4 days, 8:17:23",1,0,[],[],2
626,Bump jmh.version from 1.21 to 1.26,No,,2,0,[],[],2
625,Bump junit-pioneer from 0.9.2 to 1.0.0,Yes,"13 days, 8:27:14",1,0,[],[],2
624,Bump junit-pioneer from 0.9.0 to 0.9.2,Yes,9:17:21,2,0,[],[],2
623,Bump spotbugs-maven-plugin from 4.0.4 to 4.1.3,Yes,"1 day, 8:36:28",2,0,[],[],2
622,Bump actions/setup-java from v1.4.2 to v1.4.3,Yes,8:04:02,1,0,[],[],2
621,Bump checkstyle from 8.36 to 8.36.2,Yes,"3 days, 7:35:31",1,0,[],[],2
620,Bump spotbugs from 4.1.2 to 4.1.3,Yes,"6 days, 8:23:45",1,0,[],[],2
619,Bump actions/checkout from v2.3.2 to v2.3.3,Yes,"7 days, 8:20:49",1,0,[],[],2
618,Bump junit-jupiter from 5.6.2 to 5.7.0,Yes,"17 days, 8:25:27",1,0,[],[],2
617,Bump checkstyle from 8.36 to 8.36.1,No,,2,0,[],[],2
616,Bump jmh.version from 1.21 to 1.25.2,No,,2,0,[],[],2
615,[LANG-1606] StringUtils.countMatches returns incorrect value while handling intersecting substrings,No,,2,0,[],[],8
614,Bump checkstyle from 8.35 to 8.36,Yes,"8 days, 9:53:36",1,0,[],[],2
613,Bump jmh.version from 1.21 to 1.25.1,No,,2,0,[],[],2
612,Bump actions/setup-java from v1.4.0 to v1.4.2,Yes,"4 days, 9:36:44",1,0,[],[],2
611,[LANG-1601] Refine performance of fraction.pow,No,,4,0,[],[],156
610,[LANG-1600] Restore handling of collections for non-JSON ToStringStyle,Yes,"6 days, 2:47:40",1,0,[],[],319
609,Bump spotbugs from 4.1.1 to 4.1.2,Yes,"11 days, 9:43:48",0,0,[],[],2
608,Takari maven wrapper,No,,2,0,[],[],646
607,[LANG-1596] ArrayUtils.toPrimitive(Object) does not support boolean and other types,Yes,11:08:30,1,0,[],[],25
606,LANG-1598 Use JSR-305 for Null-Analysis,No,,1,0,[],[],278
605,Bump jmh.version from 1.21 to 1.25,No,,2,0,[],[],2
604,Bump actions/setup-java from v1.4.0 to v1.4.1,No,,2,0,[],[],2
603,[LANG-1595] Add ArrayUtils methods that accept a Predicate.,No,,2,1,[],[],257
602,Made String Reverse Method Faster,No,,7,0,[],[],13
601,Bump actions/checkout from v2.3.1 to v2.3.2,Yes,10:10:20,1,0,[],[],2
600,Bump junit-pioneer from 0.8.0 to 0.9.0,Yes,"4 days, 9:29:01",1,0,[],[],2
599,Bump jmh.version from 1.21 to 1.24,No,,2,0,[],[],2
598,Bump commons-parent from 51 to 52,Yes,"1 day, 8:21:41",1,0,[],[],2
597,Bump junit-pioneer from 0.7.0 to 0.8.0,Yes,6:49:48,1,0,[],[],2
596,Bump spotbugs from 4.0.6 to 4.1.1,Yes,7:39:17,1,0,[],[],2
595,Add method to remove all numbers from a String ,No,,6,4,"['1. if isBlank(str) should not return EMPTY, but return str itself.\r\n2. maybe using a hand-write loop will be faster than using regex. please do a benchmark.', 'Hello XenoAmess!\r\n\r\nMy English is unfortunately still intermediate, did you suggest that I do this validation manually?\r\n\r\nWas it something like that?\r\n\r\n```\r\npublic static String removeAllNumbers(String str) {\r\n        String result = """";\r\n        if(!isEmpty(str)) {\r\n          char[] array = str.toCharArray();\r\n          for(int i = 0 ; i < array.length; i++) {\r\n              if(!Character.isDigit(array[i])) {\r\n                result += array[i];\r\n              }\r\n          }\r\n          return result;\r\n        }\r\n        return str;\r\n}\r\n```', 'XenoAmess I am creating a new commit with this change. I also corrected the checkstyle. Could you review again?', ""@muriloalvesdev Hi.\r\nI re-reviewed this pr and have no more suggestions about the implementation.\r\nPlease open a JIRA ticket for this pr, and add the string of that ticket in front of the pr's name \r\n(example: https://github.com/apache/commons-lang/pull/524)\r\n\r\nNext step is waiting for some people who have merge access(means, Committer) to review this pr, and see if we should merge this.\r\n\r\n""]","['', '', '', '']",43
594,Bump checkstyle from 8.34 to 8.35,Yes,"4 days, 7:17:06",1,0,[],[],2
593,Bump spotbugs-maven-plugin from 4.0.0 to 4.0.4,Yes,23:17:30,3,0,[],[],2
592,Bump biz.aQute.bndlib from 5.1.1 to 5.1.2,Yes,23:57:43,2,0,[],[],2
591,Bump jmh.version from 1.21 to 1.23,No,,1,0,[],[],2
590,Bump exec-maven-plugin from 1.6.0 to 3.0.0,Yes,"620 days, 0:14:59",3,0,[],[],2
589,Bump junit-pioneer from 0.6.0 to 0.7.0,Yes,"1 day, 1:04:44",3,0,[],[],2
588,Bump actions/checkout from v1 to v2.3.1,Yes,"1 day, 0:50:33",1,0,[],[],2
587,Enable Dependabot,Yes,0:06:29,0,0,[],[],10
586,"[LANG-1592] Correct implementation of RandomUtils.nextLong(long, long)",Yes,"2 days, 0:23:42",1,0,[],[],50
585,Remove redudant argument from substring call,Yes,3:56:30,6,0,[],[''],21
584,Removing uncessary unboxing at several places,No,,2,0,[],[],48
583,[LANG-1544] Fixes null pointer exception in distance method in MethodUtils,No,,5,3,"['Objects#isNull is meant to be used with lambdas, use a `==` test here instead.', 'I have updated the commit with suggested changes. Please have a look. thanks !', '@garydgregory Please review and merge if changes are correct']","['', '', '', 'Is there example user-side codes which can lead to NPE before this pr?']",4
582,Remove redundant parameter: str.length(),No,,6,0,[],[],2
581,ContextedException Javadoc add missing semicolon,Yes,"47 days, 18:59:24",1,0,[],[],4
580,Add StringUtils.startsWithIgnoreCase,No,,3,0,[],[],26
579,Speed up Travis build,No,,4,0,[],[],11
578,Improve reproducibility of generated JARs,No,,20,3,"['Note that this is improper syntax. The `-removeheaders` instruction is a comma delimited value. You should use:\r\n```\r\n<_removeheaders>Bnd-LastModified,Include-Resource</_removeheaders>\r\n```\r\ninstead.', 'But you are better off using `-noextraheaders: true` to remove `Bnd-LastModified` (and other build sensitive headers) from the manifest and leave the default for `-removedheaders` alone.', ""Cheers, I fixed the `<_removeheaders>` tag! Regarding the `-noextraheaders: true`, that's what in my first iteration of this PR (b67c7fd53137f43a8051b72df1fa046076c4a5eb), but it [has been suggested to keep the `Tool` header in place](https://github.com/apache/commons-lang/pull/578#issuecomment-656108076), hence the current version only removes `Bnd-LastModified` explicitly. I don't care either way, both solutions would work fine for my purposes.""]","['', '', '']",5
577,[LANG-1588] performance refine for StringUtils.center,No,,5,6,"[""Let's not add these kinds of separator. I usually prefer to keep the methods sorted in AB order so its simple and easy to find methods."", 'Why is this API typed to a `StringBuilder` instead of a `Appendable`?\r\nDo we need an `AppendableUtils`?', ""@garydgregory \r\nHi.\r\nI didn't ADD this seperator, but MOVE it to a better place.\r\nyou can see it append in a weird place in the original codes.\r\nIf you think it is better to delete it, then I'll be glad to delete it.\r\nI don't like ie either :)"", ""@garydgregory \r\n> Why is this API typed to a `StringBuilder` instead of a `Appendable`?\r\n\r\nYeah you are right. will do this change.\r\nwill aslo refine the javadoc of this function.\r\n\r\n> Do we need an `AppendableUtils`?\r\n\r\nDon't think so but I do think quite some of functions should be changed from build a string, and using it to build another string, and build another string, to build the whole string using StringBuilder, this one named `center` is a good example I think.\r\nI create this repeat function to reduce String creation.\r\nAnd I don't actually know if people really often use functions like this in real work.\r\n\r\n"", '> Why is this API typed to a `StringBuilder` instead of a `Appendable`?\r\n\r\n@garydgregory Oh I guess I found out why I didn;t use Appendable when create this function...\r\nAppendable.append can throw IOException, and we must catch it.\r\nThat might cause performance issue, so I just used StringBuilder instead.\r\nMaybe it is better to make this function private instead?\r\n\r\n', '@garydgregory resolved as deleted.']","['', '', '', '', '', '']",162
576,[LANG-1587] refine StringUtils.strip,No,,3,0,[],[],308
575,[LANG-1586] refine StringUtils.wrap,No,,3,0,[],[],308
574,[LANG-1585] refine performance of StringUtils.normalizeSpace,No,,4,0,[],[],209
573,[LANG-1584] Refine StringUtils.isNumericSpace,Yes,"159 days, 8:55:14",2,0,[],[],9
572,[LANG-1583] refine StringUtils.isMixedCase ,No,,4,0,[],[],219
571,[LANG-1582] refine StringUtils.indexOfDifference ,No,,3,0,[],[],18
570,[LANG-1581] refine StringUtils.getFuzzyDistance,No,,2,0,[],[],12
569,[LANG-1580] Refine StringUtils.deleteWhitespace,Yes,"159 days, 10:57:33",2,0,[],[],3
568,[LANG-1579] refine StringUtils.convertRemainingAccentCharacters,No,,2,0,[],[],6
567,[LANG-1578] refine StringUtils.compare,No,,3,0,[],[],212
566,[LANG-1577] refine StringUtils.chop,No,,3,0,[],[],166
565,[LANG-1576] refine StringUtils.chomp,No,,18,25,"['This is not what the benchmark is doing.', 'You should return String from all your benchmark methods. Otherwise there is nothing to prevent the JVM from not running your chomp methods as the result is discarded. If you return the chomped String then the JMH framework will consume it thus forcing the JVM to run the method.', ""These test2 method use a 100,000 * 7 character string but only chomp it once. So you are not really testing anything but a chomp of a CR LF pair from the end of a 700,000 character string. So the benchmark time difference (from test1) is the time is for hitting a different memory cache level, and the runtime difference of the single length input string code path used in test1.\r\n\r\nNote you cannot continuously chomp the string in a loop as the method will get stuck at the '0' character and not shorten it. This test is measuring performance of the method, but perhaps not in the way you intended.\r\n\r\nIdeally you should have test for strings ending with:\r\n\r\n- CR\r\n- LF\r\n- CR + LF\r\n- None of the above\r\n\r\nWith and without some preceding characters to hit the length 1 code path.\r\n\r\nYou then test the speed through all the execution paths.\r\n\r\nIf you want to avoid the CPU pipeline branch prediction from learning the branch to take for each of your code paths then you should build the different strings and chomp all of them in a single loop. Branch prediction will fall down when the size of the data is >2000 so you would need maybe 10000 random ending strings. These should be consumed by a JMH Blackhole to avoid the JVM from optimising out the calling of a no-effect method:\r\n\r\n```\r\nString[] data = ...;\r\n\r\n@Benchmark\r\npublic void testNew(Blackhole bh) {\r\n    for (final String s : data) {\r\n        bh.consume(chompNew(s));\r\n    }\r\n}\r\n```\r\n"", '@aherbert \r\n> This is not what the benchmark is doing.\r\n\r\nAh yes, this class is copied from HashSetvBitSetTest then modified.\r\nBut forgot to delete this doc by mistake :)\r\nwill delete it now.', '@aherbert \r\n> Otherwise there is nothing to prevent the JVM from not running your chomp methods as the result is discarded. \r\nIs there some material/document about this?\r\nI ask because seems I never observed this kind of thing happened...\r\n', 'The JVM is free to discard code that does nothing useful.\r\nhttps://stackoverflow.com/questions/4871550/how-can-i-be-sure-that-the-compiler-doesnt-optimize-away-my-performance-test', 'JMH samples talk about this, e.g.: https://hg.openjdk.java.net/code-tools/jmh/file/4a420afe8a9e/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_08_DeadCode.java\r\nhttps://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/', '@sebbASF @thc202 thanks. remaked the jmh test.', '@aherbert yes it is.', 'string6 will be the same as string5', 'The majority of these strings will not end with either CR (char 13) or LF (char 10). So you will not be chomping anything most of the time. I do not think that is what you want to test the performance of.', '> The majority of these strings will not end with either CR (char 13) or LF (char 10). So you will not be chomping anything most of the time. I do not think that is what you want to test the performance of.\r\n\r\nNo, it is exactly what I test for.\r\nI use test 1-6 to show its performance with parameter who ends with \\r or \\n, and use this test s to show its performance with parameter who ends with other chars.', '> string6 will be the same as string5\r\n\r\nmy bad. I thought string5 would be ""\\r\\n"" and 6 be ""\\n"", maybe I made a mistake.', 'The code you are testing is not very complex. Thus you need not do 25 runs of 10s each. Your execution time for the method is in the 2.5 nanosecond range. So running for 1 second it will run a few million times. I would add this to the annotations:\r\n```\r\n@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\r\n@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\r\n@Fork(value = 1, jvmArgs = { ""-server"", ""-Xms128M"", ""-Xmx128M"" })\r\n```\r\nThen look at the JMH output. If the variance of the runtimes is low then OK. If you cannot get a stable timing result then increase the iteration test time above 1 second.\r\n', '```java\r\n// Different code paths with no chomp\r\nprivate static final String string1 = """";\r\nprivate static final String string2 = ""a"";\r\nprivate static final String string3 = ""aa"";\r\n\r\n// Single char chomp\r\nprivate static final String string4 = ""\\r"";\r\nprivate static final String string5 = ""\\n"";\r\n\r\n// Multi-char chomp\r\nprivate static final String string6 = ""\\r\\n"";\r\nprivate static final String string7 = ""a\\n"";\r\nprivate static final String string8 = ""a\\r"";\r\nprivate static final String string9 = ""a\\r\\n"";\r\n```\r\nThat should be all code paths.', 'OK. Then you should comment each test to identify the intention, or better yet just name the test:\r\n\r\n```java\r\npublic String test1Old() {\r\npublic String test1New() {\r\npublic String test2Old() {\r\npublic String test2New() {\r\n```\r\nBecomes:\r\n```java\r\npublic String test_CR_Old() {\r\npublic String test_CR_New() {\r\npublic String test_SingleChar_Old() {\r\npublic String test_SingleChar_New() {\r\n```\r\n\r\nFrom you latest results I would guess the 6% performance improvement for strings with nothing to chomp is probably due to not requiring a String.substring call to return a new instance. That has value.\r\n', ""@aherbert \r\nI'm new to jmh and have no ideas what args should be set in normal test cases like this.\r\nThanks for you guide. will retry with these settings. \r\n"", '@aherbert\r\n> OK. Then you should comment each test to identify the intention, or better yet just name the test:\r\n> \r\n> ```java\r\n> public String test1Old() {\r\n> public String test1New() {\r\n> public String test2Old() {\r\n> public String test2New() {\r\n> ```\r\n> \r\n> Becomes:\r\n> \r\n> ```java\r\n> public String test_CR_Old() {\r\n> public String test_CR_New() {\r\n> public String test_SingleChar_Old() {\r\n> public String test_SingleChar_New() {\r\n> ```\r\n\r\ngood idea. I will try to rename the tests.\r\n\r\n> From you latest results I would guess the 6% performance improvement for strings with nothing to chomp is probably due to not requiring a String.substring call to return a new instance. That has value.\r\n\r\nYes, I think most reasons be in String.substring. but String.substring do not create a new String instance when it using (0, length) in cases like this.\r\nStill it have some checkings in that String.substring function, that might be what it cost the 6%', 'In your naming convention this should be renamed as `test8_a_R_Old`. Same for the new test. However the `testX` prefix has no meaning. So I would drop it and go for something more useful:\r\n```\r\nnoChar_New/Old\r\nsingleChar_New/Old\r\nmultiChar_New/Old\r\nnoChar_CR_New/Old\r\nnoChar_LF_New/Old\r\nnoChar_CR_LF_New/Old\r\nsingleChar_CR_New/Old\r\nsingleChar_LF_New/Old\r\nsingleChar_CR_LF_New/Old\r\nrandomStrings_New/Old\r\n```\r\nLF = Line Feed = `\\n`\r\nCR = Carriage Return = `\\r`\r\n\r\nAlso the static strings should not be final. This is to prevent the JVM from inlining the entire routine. If the string is final then it knows the input will never change. Remove the final keyword and it cannot know the variable, so cannot optimise as much.\r\n\r\nGiven the large number of strings and methods this is cleaner if you use a JMH approach using a few `@State` classes. We can define the strings to chomp with an enum. JMH will create the state for the benchmark from all enum values if you use the enum with appropriate annotations. With this approach if you want to chomp another string then you just add a new value to the enum.\r\n\r\nHere is a more flexible version:\r\n\r\n```java\r\n    /** Define the strings to chomp. */\r\n    public enum ChompString {\r\n        CHAR0(""""),\r\n        CHAR0_CR(""\\r""),\r\n        CHAR0_LF(""\\n""),\r\n        CHAR0_CR_LF(""\\r\\n""),\r\n        CHAR1(""a""),\r\n        CHAR1_CR(""a\\r""),\r\n        CHAR1_LF(""a\\n""),\r\n        CHAR1_CR_LF(""a\\r\\n""),\r\n        CHAR2(""ab""),\r\n        CHAR2_CR(""ab\\r""),\r\n        CHAR2_LF(""ab\\n""),\r\n        CHAR2_CR_LF(""ab\\r\\n""),\r\n        ;\r\n\r\n        /** The string data. */\r\n        final String string;\r\n\r\n        /**\r\n         * Create an instance.\r\n         *\r\n         * @param string the string data\r\n         */\r\n        ChompString(String string) {\r\n            this.string = string;\r\n        }\r\n    }\r\n\r\n    /** The benchmark data to chomp. */\r\n    @State(Scope.Benchmark)\r\n    public static class ChompData {\r\n        /** The data to chomp. */\r\n        @Param\r\n        private ChompString data;\r\n\r\n        /**\r\n         * Gets the data.\r\n         *\r\n         * @return the data\r\n         */\r\n        public String getData() {\r\n            return data.string;\r\n        }\r\n    }\r\n\r\n    /** The chomp method to benchmark. */\r\n    @State(Scope.Benchmark)\r\n    public static class ChompMethod {\r\n        /** The method name. */\r\n        @Param({""old"", ""new""})\r\n        private String name;\r\n\r\n        /** The method. */\r\n        private UnaryOperator<String> method;\r\n\r\n        /**\r\n         * Gets the method.\r\n         *\r\n         * @return the method\r\n         */\r\n        public UnaryOperator<String> getMethod() {\r\n            return method;\r\n        }\r\n\r\n        /** Setup the chomp method. */\r\n        @Setup\r\n        public void setup() {\r\n            if (""old"".equals(name)) {\r\n                method = StringUtilsChompTest::chompOld;\r\n            } else {\r\n                method = StringUtilsChompTest::chompNew;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Benchmark a single chomp of a string.\r\n     *\r\n     * @param data the data\r\n     * @param method the method\r\n     * @return the chomped string\r\n     */\r\n    @Benchmark\r\n    public String singleString(ChompData data, ChompMethod method) {\r\n        return method.getMethod().apply(data.getData());\r\n    }\r\n```\r\n\r\nRun with: `mvn test -P benchmark -Dbenchmark=StringUtilsChompTest.singleString`\r\n\r\n```\r\nBenchmark                               (data)  (name)  Mode  Cnt   Score   Error  Units\r\nStringUtilsChompTest.singleString        CHAR0     old  avgt    5   3.136 ± 0.090  ns/op\r\nStringUtilsChompTest.singleString        CHAR0     new  avgt    5   3.184 ± 0.067  ns/op\r\nStringUtilsChompTest.singleString     CHAR0_CR     old  avgt    5   3.933 ± 0.308  ns/op\r\nStringUtilsChompTest.singleString     CHAR0_CR     new  avgt    5   4.090 ± 1.764  ns/op\r\nStringUtilsChompTest.singleString     CHAR0_LF     old  avgt    5   4.079 ± 1.656  ns/op\r\nStringUtilsChompTest.singleString     CHAR0_LF     new  avgt    5   3.852 ± 0.172  ns/op\r\nStringUtilsChompTest.singleString  CHAR0_CR_LF     old  avgt    5   8.591 ± 4.080  ns/op\r\nStringUtilsChompTest.singleString  CHAR0_CR_LF     new  avgt    5   8.593 ± 0.188  ns/op\r\nStringUtilsChompTest.singleString        CHAR1     old  avgt    5   3.753 ± 0.146  ns/op\r\nStringUtilsChompTest.singleString        CHAR1     new  avgt    5   3.893 ± 0.074  ns/op\r\nStringUtilsChompTest.singleString     CHAR1_CR     old  avgt    5  16.363 ± 4.415  ns/op\r\nStringUtilsChompTest.singleString     CHAR1_CR     new  avgt    5  14.285 ± 5.998  ns/op\r\nStringUtilsChompTest.singleString     CHAR1_LF     old  avgt    5  14.586 ± 0.152  ns/op\r\nStringUtilsChompTest.singleString     CHAR1_LF     new  avgt    5  14.427 ± 0.211  ns/op\r\nStringUtilsChompTest.singleString  CHAR1_CR_LF     old  avgt    5  14.573 ± 0.781  ns/op\r\nStringUtilsChompTest.singleString  CHAR1_CR_LF     new  avgt    5  15.104 ± 3.933  ns/op\r\nStringUtilsChompTest.singleString        CHAR2     old  avgt    5   4.000 ± 0.018  ns/op\r\nStringUtilsChompTest.singleString        CHAR2     new  avgt    5   4.226 ± 0.124  ns/op\r\nStringUtilsChompTest.singleString     CHAR2_CR     old  avgt    5  15.954 ± 8.352  ns/op\r\nStringUtilsChompTest.singleString     CHAR2_CR     new  avgt    5  14.033 ± 0.145  ns/op\r\nStringUtilsChompTest.singleString     CHAR2_LF     old  avgt    5  14.376 ± 0.097  ns/op\r\nStringUtilsChompTest.singleString     CHAR2_LF     new  avgt    5  18.650 ± 7.231  ns/op\r\nStringUtilsChompTest.singleString  CHAR2_CR_LF     old  avgt    5  14.535 ± 0.231  ns/op\r\nStringUtilsChompTest.singleString  CHAR2_CR_LF     new  avgt    5  14.436 ± 0.332  ns/op\r\n```\r\nHere there does not appear to be much difference between new and old. Note the outlier for `CHAR2_LF, new` with the high error. This should ideally be repeated. I was running other things on my workstation when this was running. Ideally I should have closed everything down, logged out and run from a terminal login. But I would not expect much change. The new method is not worse. However from the test on random strings we know it is faster:\r\n\r\n`mvn test -P benchmark -Dbenchmark=StringUtilsChompTest.randomStrings`\r\n\r\n```\r\nBenchmark                           (name)  Mode  Cnt      Score       Error  Units\r\nStringUtilsChompTest.randomStrings     old  avgt    5  97037.105 ± 27475.538  ns/op\r\nStringUtilsChompTest.randomStrings     new  avgt    5  85709.846 ± 37420.959  ns/op\r\n```\r\n\r\nSo the code in the PR is worthwhile.\r\n\r\n\r\n\r\n', 'PS.\r\n\r\nI would also drop the chompNew method from StringUtilsChompTest. To prove that the new method is faster just call StringUtils.chomp or the copied version from 3.11:\r\n\r\n```java\r\n@Setup\r\n        public void setup() {\r\n            if (""3.11"".equals(name)) {\r\n                method = StringUtilsChompTest::chomp_3_11;\r\n            } else {\r\n                method = StringUtils::chomp;\r\n            }\r\n        }\r\n```\r\nThen document the method in the test:\r\n\r\n```java\r\n    /**\r\n     * The chomp method from StringUtils version 3.11.\r\n     *\r\n     * @param str the string\r\n     * @return the chomped string\r\n     */\r\n    private static String chomp_3_11(final String str) {\r\n```\r\n\r\nIf anyone cares in the future to look at more optimisation then it would be easy to extend the benchmark.\r\n', 'PPS.\r\n\r\nAnother case we have not tried is a `null` string. Using the JMH approach you just add an enum value `NULL(null)` to `ChompString`.', 'The changes would be clearer if the original condition had been kept.', ""Better to use lastIdx-- here - don't make unnecessary changes"", ""> Better to use lastIdx-- here - don't make unnecessary changes\r\n\r\n@sebbASF OK"", '@aherbert \r\nThanks for the example.\r\nWill learn from it when writing other jmh tests.']","['At current this benchmark is not testing the differences between the methods in the manner recommended by JMH. The results for test1 and test2 for new and old methods are within the 99.9% confidence level for each and thus are inconclusive.\r\n\r\nI would improve the test to hit all code paths and ensure the result of the chomp method is used.\r\n', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']",209
564,add passing varargs Supplier to ObjectUtils.getIfNull instead of Supplier single param,No,,5,0,[],[],54
563,[LANG-1575] refine StringUtils.capitalize,No,,3,0,[],[],211
562,[LANG-1574] Refine CharSequencesUtils.toCharArray,No,,14,0,[],[],505
561,[LANG-1543] Implemented feature of writing Maps into JSON,No,,2,0,[],[],116
560,[LANG-1572] green implementation CharSequenceUtils.indexOf,No,,9,9,"['No need for the ugly double while loop:\r\n```java\r\nfor (int i = start; i <= limit; i++) {\r\n    if (cs.charAt(i) == char0 && checkLaterThan1(cs, searchChar, len2, i)) {\r\n        return i;\r\n    }\r\n}\r\nreturn -1;\r\n```', '} else if (start > len1) {', ""@aherbert \r\nI do think it will run faster the way I wrote it...\r\nHowever you can prove me wrong, means your version be faster, or equal speed in jmh, with most cases, then I'm glad to refine it.\r\n"", ""@aherbert \r\n```\r\n    /**\r\n     * Returns the length of this character sequence.  The length is the number\r\n     * of 16-bit <code>char</code>s in the sequence.\r\n     *\r\n     * @return  the number of <code>char</code>s in this sequence\r\n     */\r\n    int length();\r\n```\r\n\r\nwell I'm not quite sure if there be some people implement the CharSequence interface with length() method return value < 0\r\n"", 'If writing code to cope with bad implementations for length then you should check if `len1` is negative and throw an exception there.\r\n\r\nIf `len1` is negative and if `len2` is zero then your return value will be whatever `len1` was, which is an incorrect result when it is not `-1`.\r\n', 'Note that the `&&` condition is only evaluated on the right if the left is true thus you effectively have:\r\n```java\r\nfor (int i = start; i <= limit; i++) {\r\n    if (cs.charAt(i) == char0) {\r\n        // ... more checks\r\n    }\r\n}\r\n```\r\n\r\nMy suggestion was for code clarity:\r\n```\r\nfor i in [start, end]\r\n     if match at position i\r\n          return i\r\n\r\nreturn -1\r\n```\r\nIt is simpler. If you think your way is faster then that remains to be proven.\r\n', '> If `len1` is negative and if `len2` is zero then your return value will be whatever `len1` was, which is an incorrect result when it is not `-1`.\r\n\r\n@aherbert \r\nyou are correct. \r\nthis is a bug.\r\nwill fix it.\r\nthanks.\r\n', ""> If you think your way is faster then that remains to be proven.\r\n\r\nOK, I will write&run a jmh now.\r\nIf it shows you be correct, then I'm glad to change the codes."", '@aherbert\r\nyep, you are correct.\r\nglad to fix it.']","['', '', '', '', '', '', '']",299
559,Stamped lock visitor,Yes,"12 days, 22:22:09",3,0,[],[],1175
558,refine test output for FastDateParserTest,Yes,"6 days, 17:08:17",4,0,[],[],45
557,fix checkstyles.,No,,1,0,[],[],59
556,[LANG-1567] Fix Javadocs for EqualsBuilder#setTestRecursive(),Yes,"7 days, 3:23:21",1,0,[],['Looks good to me. :+1: \r\n\r\nThanks @SwingGuy1024!'],8
555,Add binary compatibility check to Maven default goal,Yes,10:33:38,2,0,[],[''],6
554,fix checkstyle.,Yes,0:25:38,2,0,[],['Appears to have fixed Travis CI. Thanks @XenoAmess !'],2
553,[LANG-1570] JavaVersion enum constants for Java 14 and 15.,Yes,2:47:18,1,0,[],[],24
552,(doc): Use ArrayUtils::isArrayIndexValid method in ArrayUtils::get.,Yes,1:58:51,1,0,[],[],8
551,[LANG-1550] Optimize ArrayUtils::isArrayIndexValid method.,Yes,"11 days, 18:41:46",1,7,"['Paragraph tags are not needed for the first paragraph of a Javadoc comment. When you do use HTML tags (elsewhere), you should close them.', 'Unfortunately, Javadoc created with a closed pre tag after an EOL appear with an extra blank line. so pre tags should be closed at the end of the last line.\r\n', '@garydgregory \r\nI think this is not a big problem, as most of the `</pre>` usage in this repo (especially in StringUtils) do it this way, means not closed at the end of the last line, but close at a new line.\r\nShould we arrange a fix for all of that usages?\r\n', '@garydgregory \r\nan example:\r\n```\r\n    /**\r\n     * <p>Remove the last character from a String.</p>\r\n     *\r\n     * <p>If the String ends in {@code \\r\\n}, then remove both\r\n     * of them.</p>\r\n     *\r\n     * <pre>\r\n     * StringUtils.chop(null)          = null\r\n     * StringUtils.chop("""")            = """"\r\n     * StringUtils.chop(""abc \\r"")      = ""abc ""\r\n     * StringUtils.chop(""abc\\n"")       = ""abc""\r\n     * StringUtils.chop(""abc\\r\\n"")     = ""abc""\r\n     * StringUtils.chop(""abc"")         = ""ab""\r\n     * StringUtils.chop(""abc\\nabc"")    = ""abc\\nab""\r\n     * StringUtils.chop(""a"")           = """"\r\n     * StringUtils.chop(""\\r"")          = """"\r\n     * StringUtils.chop(""\\n"")          = """"\r\n     * StringUtils.chop(""\\r\\n"")        = """"\r\n     * </pre>\r\n     *\r\n     * @param str  the String to chop last character from, may be null\r\n     * @return String without last character, {@code null} if null String input\r\n     */\r\n    public static String chop(final String str) {\r\n```', ""Sorry, I don't really get what is the problem with `</pre>`."", '@nstdio \r\nIn short gary think your docs should be \r\n```\r\n     * ArrayUtils.isArrayIndexValid(null, 0)       = false\r\n     * ArrayUtils.isArrayIndexValid([], 0)         = false\r\n     * ArrayUtils.isArrayIndexValid([""a""], 0)      = true</pre>\r\n```\r\n\r\ninstead of \r\n\r\n```\r\n     * ArrayUtils.isArrayIndexValid(null, 0)       = false\r\n     * ArrayUtils.isArrayIndexValid([], 0)         = false\r\n     * ArrayUtils.isArrayIndexValid([""a""], 0)      = true\r\n     * </pre>\r\n```\r\n\r\nBut I think the current docs be OK.\r\nSo suggest just wait.', 'Not worth changing today...']","['', '', '', '', '', '']",13
550,[LANG-1565] Change removeLastFieldSeparator to use endsWith,Yes,"13 days, 5:18:47",4,0,[],[],15
549,[LANG-1564] Use Collections.singletonList insteadof Arrays.asList when there be only one element.,Yes,"12 days, 6:55:03",1,0,[],[],10
548,[LANG-1563] use StandardCharsets.UTF_8,Yes,"12 days, 6:50:49",1,0,[],[],11
547,[LANG-1562] Use Math.max and min,Yes,"12 days, 6:56:05",1,0,[],[],28
546,[LANG-1561] use List.sort instead of Collection.sort,Yes,"12 days, 6:53:06",1,0,[],[],10
545,[LANG-1560] Refine Javadoc,Yes,"12 days, 7:16:17",1,0,[],[],9
544,[LANG-1559] Convert Sting to StringBuilder in some test code.,Yes,"12 days, 7:34:04",1,0,[],[],24
543,[LANG-1558] Simplify if as some conditions are covered by others,Yes,"12 days, 7:35:23",1,0,[],[],4
542,"[LANG-1557] Change a Pattern to a static final field, for not letting it compile each time the function invoked.",Yes,"13 days, 6:07:51",1,2,"['All constants live at the top of the file.', '@garydgregory \r\ndone.']","['', '']",8
541,[LANG-1556] Use Java 8 lambdas and Map operations.,Yes,"12 days, 14:56:14",4,0,[],[],32
540,"[LANG-1555] Ignored exception `ignored`, should not be called so",Yes,"12 days, 7:44:18",1,0,[],[],4
539,[LANG-1554] Fix typos,Yes,"12 days, 7:43:05",1,0,[],[],44
538,asList,No,,0,0,[],[],1672
537,[LANG-1553] Change array style from `int a[]` to `int[] a`,Yes,"12 days, 7:51:14",1,0,[],[],104
536,[LANG-1552] Change from addAll to constructors for some List,Yes,"12 days, 7:56:11",1,0,[],[],3
535,[LANG-1549] implement TODO in CharSequenceUtils.lastIndexOf : remake it.,No,,3,0,[],['LGTM'],187
534,[LANG-1548] split regionMatches for better performance,No,,8,2,"['while (tmpLen -- > 0) {', ""@dota17\r\nthe `while (tmpLen-- > 0) {` is same as it in original codes.\r\nI just want to make as less changes as possible.\r\nIf you think we should reformat the codes I feel like agreed, but lets' do that after this pr, or at least, when merging this pr.""]","['', '']",572
533,[LANG-1547] fix code smells; fix typos,No,,8,0,[],[],322
532,reformat Locks and LocksTest for passing Checkstyle,No,,8,0,[],[],189
531,refine travis-ci scripts,Yes,"44 days, 8:55:24",1,0,[],[''],6
530,LANG-1542: ToStringBuilder.reflectionToString - Wrong JSON format for List of enums,No,,4,7,"['Hello, this will restrict only enums to be appended from a collection, a list of other types (e.g. Collection of Integers or Strings) will be ignored. This filter should be removed to allow all types of collections (or we should allow buffer.append(col1) at last line of method to run for other types, either way)', 'We should avoid using streams here IMO, it will likely make performance worse in what can already be slow when reflection is involved. ', '@garydgregory @swarajsaaj I added some code following your comments. Please take a look. Thank you!', 'This should fix the case I mentioned earlier. I guess, test cases can also be updated for non-enum collections, else seems good.', '@swarajsaaj, I added test case for it', ""Hi.\r\nI don't think the changes in ToStringStyleTest.java is necessary..."", '@XenoAmess fixed, thank you!']","['', '', '', '', '', '', 'Working as expected for me. Tried the code locally, played with it a bit using a `main` method and using `ToStringStyle.JSON` with enums, and it gave the correct values (used a JSON linter to double check).\r\n\r\n+1 and thanks for the PR @TranNgocKhoa !', '', '']",148
529,[LANG-1545] CharSequenceUtils.regionMatches is wrong dealing with Georgian.,Yes,"26 days, 0:38:20",9,3,"['Hi @XenoAmess\r\nPlease use hexadecimal for the values with a comment that shows the Unicode name for each character. Otherwise, there is not way to tell what this is doing without knowing the Unicode values from memory.\r\n', '@garydgregory done.']","['', '']",34
528,Combine two if conditions in ClassUtils.isAssignable().,No,,2,0,[],[],13
527,Create prueba.txt,No,,1,0,[],[],1
526,Update Jenkinsfile,No,,1,0,[],[],2
525,Correct Javadocs of methods that use Validate.notNull() and replace some uses of Validate.isTrue() with Validate.notNull().,Yes,"79 days, 23:38:34",3,0,[],[],94
524,[LANG-1540] Add startsAndEndsWith() methods to StringUtils.,No,,1,0,[],[],254
523,Rewrite the finding of matching Locales in LocaleUtils using the Streams API.,No,,0,5,"['curious, could all of this be replaced with any of the `compute..` variants in `Map`?', ""It should be possible, but I'm not sure how complex the resulting lambda will be."", 'It\'s also not ""simpler"", it\'s just different, without even thinking about performance consequences....', 'It does make use of parallelStream(), though, so there should be at least a decent performance improvement.', ""From what I remember (sorry, been doing more Python these days), the `parallelStream` could be good or bad. For a low level library, I think it would be bad.\r\n\r\nThat method starts executors in the background, and I think it's either a fixed number of executors, or based on the number of cores.\r\n\r\nBut anyway, the point was that if a library uses `parallelStream`, users of the API would have to be aware that there could be small performance peaks due to these extra executors being created. See [this SO question & answers](https://stackoverflow.com/questions/20375176/should-i-always-use-a-parallel-stream-when-possible).\r\n\r\nThe place where I would use it, would be some small command line utility processing text/files with thousands or millions of lines in a single computer. There I could perhaps use a parallelStream to do some processing.\r\n\r\nSo for that, for now, I'd be -1 to `parallelStream` here in common (the code looks nicer by the way :)""]","['', '', '', '', '']",31
522,[LANG-1539] Add allNull() and anyNull() methods to ObjectUtils.,Yes,"81 days, 12:46:14",5,4,"['New APIs will mean a minor release (not maintenance), per semantic versioning guidelines, so `@since 3.11` is best for these new APIs :-)', ""Wrong method doc. Shouldn't it be?\r\n\r\n```suggestion\r\n     * If any the values are {@code null} or the array is {@code null},\r\n     * then {@code true} is returned, otherwise {@code false} is returned.\r\n```"", 'Incorrect examples\r\n```suggestion\r\n     * ObjectUtils.anyNull(*, null)          = true\r\n     * ObjectUtils.anyNull(null, *)          = true\r\n     * ObjectUtils.anyNull(null, null, *, *) = true\r\n```', ""Okay, I'll correct it :)""]","['@Isira-Seneviratne Method doc is incorrect', '', '']",85
521,Simplify some if statements in StringUtils.,Yes,20:12:24,1,3,"['How about `EMPTY.equals(abbrevMarker)` -> `isEmpty(abbrevMarker)` ?', 'That change would mean that `abbrevMarker` is potentially null, according to SonarLint.', '@Isira-Seneviratne You are correct!']","['', '', '']",20
520,Implement Utils classes in Kotlin.,No,,1,4,"['@Isira-Seneviratne \r\nPlease do not change this formatting.', ""-1, that's a bridge too far IMO. If we want to create a Kotlin Commons Lang, we can talk about that on the developer's mailing list..."", 'That was formatted by IntelliJ.', ""It does not matter who formatted what, it's still your PR ;-)""]","[""I think the main issue here would be the extra dependency added to Lang. I agree the code would look more concise. There are other tools that could do the same (e.g. Jython, Groovy), but the extra dependency could backfire, leading to issues maintaining the code, investigating bugs, performance footprint, etc.\r\n\r\nSo for now I'd be -1, even though learning Kotlin is on my todo-list this year. \r\n\r\nGreat you created an issue @Isira-Seneviratne , this way others that are not using GitHub in Commons can comment there too :-)\r\n\r\nThanks!"", '', '', '']",1723
519,Alter assertions in CharUtilsTest to get the class of CharUtils instead of BooleanUtils.,Yes,5:56:34,2,0,[],"['Good spotting, probably accident from copy-and-paste. Thanks!!']",4
518,(Javadoc) Fix return tag for throwableOf*() methods,Yes,"1 day, 8:44:51",1,5,"['s/form/from?', 's/form/from?', 's/form/from?', 's/form/from?', 'Hi @kinow,\r\nfixed the typo. Thanks for spotting it :-)']","[""I think there's a typo in the text added, could you take a look please @arend-von-reinersdorff ? Thanks for the PR!"", '']",8
517,Simplify null checks in Pair.hashCode() using Objects.hashCode().,Yes,"2 days, 14:41:16",1,0,[],"['', '']",3
516,Simplify null checks in Triple.hashCode() using Objects.hashCode().,Yes,"2 days, 21:16:25",2,0,[],"['', '']",4
515,Remove unnecessary unboxing in BooleanUtils.,No,,6,0,[],[''],16
514,[LANG-1537]: Simplify a null check in the private replaceEach() method of StringUtils.,Yes,"3 days, 5:44:22",2,2,"['nitpick: need to format this line correctly', 'I missed that, thanks!']","['', '', '', 'good to reuse components']",3
513,Fix formatting of isAnyBlank() and isAnyEmpty().,Yes,"214 days, 5:40:07",1,0,[],[''],32
512,[LANG-1534] Replace some usages of the ternary operator with calls to Math.max() and Math.min(),Yes,"3 days, 8:26:47",2,0,[],"[""Code changes look good. I think for this one we better put in an issue. Could you create an issue in JIRA for lang, and check if it's covered by our unit tests already, please @Isira-Seneviratne ? \r\n\r\nThanks!"", '']",7
511,Fix some spelling and grammar issues in the StringUtils Javadoc.,Yes,3:45:43,2,0,[],"['Looks good to me. Thanks!\r\n', '']",18
510,[LANG-1535] Add containsAnyIgnoreCase() method to StringUtils.,No,,2,2,"['these would short-circuit at the same condition as with the assertion before these and hence might just be redundant', ""Okay, I'll remove them.""]","['', '']",57
509,Update DurationFormatUtils.java,No,,2,0,[],['Cann you add a test for this?'],6
508,LANG-1481 Add StringUtils.split() methods with String[] input.,No,,3,0,[],[],92
507,Fix Javdoc for StringUtils.appendIfMissingIgnoreCase(),Yes,4:19:25,1,0,[],[],2
506,LANG-1530 another method like formatDurationWords with ,No,,3,4,"['s/0hours/0 hours', 'Dangling text. Was it supposed to be within the previous `<p>`?', 'fixed all 0hours ', 'aligned to previous <p>']","['', '', '', ""@mikolajmitura whenever you have time, take a look at @garydgregory 's last comment about SDK classes :+1: ""]",267
505,[LANG-1528] StringUtils.replaceEachRepeatedly gives IllegalStateException,Yes,"81 days, 14:53:39",2,0,[],[],40
504,LANG-1527: Remove an redundant argument check in NumberUtils,Yes,"1 day, 20:51:23",0,0,[],[],7
503,[LANG-1523] Avoid unnecessary allocation in StringUtils.wrapIfMissing,No,,4,0,[],[],4
502, Added 1 and 0 in toBooleanObject(final String str) ,Yes,0:42:04,3,0,[],[],20
501,Expand Streams functionality,No,,2,0,[],[],6049
500,StreamsTest junit-jupiter,Yes,"91 days, 15:01:36",4,0,[],"['@nhojpatrick could you fix the conflict and rebase onto master, please? That should get Travis to run again and hopefully this time it will pass. The improvements in the tests look good to me.', 'Thanks a lot for the contribution @nhojpatrick ! Single commit, code very well-written, and the new test code looks much easier to read/maintain. Travis happy, LGTM']",170
499,LANG-1521 spring clean .gitignore,No,,2,0,[],"[""I'm fine adding more items to gitignore. But in the past we had (either on GH or mailing list I think) decided to add IDE and other tools not in our build to the user global gitignore (on Linux ~/.gitignore). Let's wait to see what others think. But thanks for the PR!""]",47
498,LANG-1520 spring clean .gitignore,No,,3,0,[],[],47
497,Annotated Fraction.java,No,,1,0,[],[],24
496,LANG-1523: Avoid unnecessary allocation in StringUtils.wrapIfMissing.,Yes,"3 days, 23:57:21",5,4,"[""I don't know if there is a practical reason to create `StringBuilder` with exact capacity, because it `str` can start with `wrapWith` but not end with it and vice versa."", 'Yeah, looks like this is the maximum capacity, not necessarily the exact capacity we expect to have. Probably harmless/fine?', 'Since the behavior has changed, I would expect a clarification in the Javadoc. Plus a matching test.', '@garydgregory Sure, that makes sense. Done.']","['', ""Change looks good @nstdio \r\n\r\nLet's leave it here for a while to see if another developer would like to review too.\r\n\r\nI think it would be great if you could create a JIRA for this too. Even though it's quite small issue, I think it deserves to go in the changelog (which is normally done via JIRA issues in a release). Plus, to add due credit in the changelog to you :-)\r\n\r\nThanks!\r\n+1"", '', '', '']",35
495,"LANG-1519 Add zero, positive & negative util methods",No,,13,3,"[""This is wrong IMO, if I create a subclass of `Number`, this method will always return false even if my `Number`'s intValue() returns 0. "", 'agree, updated the methods.', 'What about splitting this to small tests instead of one long test?']","['', '', 'See my comment https://github.com/apache/commons-lang/pull/495#issuecomment-593574286', '']",1029
494,[LANG-1518] MethodUtils.getAnnotation() with searchSupers = true does not work if super is generic,Yes,"3 days, 3:20:56",9,2,"[""I think Travis is failing here\r\n\r\n```\r\n/checkstyle.xml ruleset.\r\n\r\n[ERROR] src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java:[979,17] (whitespace) WhitespaceAfter: 'if' is not followed by whitespace.\r\n```"", ""i've fixed this one""]","['', '']",57
493,Reuse own code in Functions.java,Yes,"1 day, 10:08:27",2,0,[],[],48
492,style(org.apache.commons.lang3): rename method from removeAllOccurenc…,No,,2,6,"['This is still wrong: ""The new array contains all the element of {@code array1} followed"" -> ""The new array contains all the element**s** of {@code array1} followed""', ""-1 You cannot delete a public API as this will break binary compatibility. You _can_ create a new API with the corrected name and then have the old API delegate to the new one. At that point, you'd want to mark the old APIs as deprecated with an @deprecated tag pointing to the new API."", 'If you create a new API (see my other comment) with the corrected name, either test both the new and old APIs next to each other, or, clone the test methods and also correct their names.', 'thanks for your remind! I got it', 'ok，i will do it as you wish', 'I will make correct ，thanks']","[""Oh, good catch on the typo. If it's been released, we may have to wait for a new major release before the merge I think."", '', '', '', '', '', '']",200
491,Removed unused imports,No,,1,1,['these are not removed anyway (just optimized by an IDE maybe?)'],"[""Don't use wildcard imports."", '', ""Hi @aymen94 \r\n\r\nIt's hard to see what imports are not used. There are changes in this PR that are changes in the code style, and others that are simply moving the imports from one place to another. Possibly due to your IDE configuration. Could you rebase your branch, and try to include only the unused imports? That should be super easy/quick to review.\r\n\r\nThanks!\r\nBruno""]",2227
490,Use Javadoc {@code} instead of pre tags.,Yes,"14 days, 0:53:24",1,0,[],[],24
489,Code simplification using the methods that we have instead,No,,4,0,[],[],603
488,more unnecessary parentheses removed,No,,2,0,[],[],6
487,unneccessary parentheses removed,No,,2,0,[],[],2
486,ExceptionUtilsTest to 100%,Yes,"14 days, 1:40:52",1,0,[],[],32
485,[LANG-1514] make test more stable by wrapping assertions in hashset,Yes,"25 days, 4:58:04",4,0,[],"[""Another way could be using the `containsAll` + the length of arrays. But as it's a list of fields in a class, I believe we cannot duplicates, so the `Hashset` approach should work. Looks good to me 👍  thanks for the PR @contextshuffling ""]",3
484,LANG-1513 ObjectUtils: Get first non-null supplier value,No,,2,0,[],[],62
483,[LANG-1509] Add ObjectToStringComparator.,Yes,23:41:09,6,0,[],"[""Sounds useful to sorting collections. Similar to Guava's [`UsingToStringOrdering`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/UsingToStringOrdering.java). In Guava, that class is under a package that contains order `*Ordering.java` files. If you think this could happen in Lang, maybe we could move it under a package?\r\n\r\nAnd on serializable, I think it is necessary if users want to use it with a `TreeMap` or other structures that require it? Otherwise users could have `NotSerializableException`, unless they wrap the comparator withing another one, with readResolve/etc. ""]",156
482,LANG-1504 - Adding labels to split StopWatch feature,No,,10,5,"['Please reuse StringUtils.EMPTY.', 'Done', 'You have an extra space in the message.', ""Using a boolean switch here feels weird to me. Java has a TimeUnit enum for things like this, I'd rather see a TimeUnit here. WDYT?"", ""Good idea, since it makes the code more clear. I'll change here. Thank you!""]","['', '', '', '']",343
481,[LANG-1501] Sort fields in ReflectionToStringBuilder for deterministic order,Yes,3:57:40,2,0,[],[],53
480,LANG-1500 | Test may fail due to a different order of fields returned by reflection api,Yes,0:59:03,1,0,[],[],11
479,StringUtil Abbreviation method fixed,No,,0,4,"['Why delete the file?', 'Why delete the file?', 'Extra line.', 'Extra line.']",[''],384
478,StringUtils.abbreviate handles empty abbrevMarker,No,,1,2,"['```java\r\nStringUtils.abbreviate(""a"", null, 0, 10);\r\n```\r\n\r\nMay throw a `StringIndexOutOfBoundsException`.\r\n\r\n', 'May throw a `StringIndexOutOfBoundsException`.']",[''],11
477,Lang 1463: StringUtils abbreviate returns String of length greater than maxWidth,Yes,"2 days, 5:32:42",1,4,"['No magic strings, this class defines `EMPTY` for this purpose. You are missing spaces around `>`', ""I added the spaces. What are you implying about the magic strings? Forgive me, I'm not as experienced of a programmer."", 'A ""magic"" string or number is a value that is hard-coded, as opposed to reusing a constant, in this case, `EMPTY` instead of `""""`.', 'Thanks for the explanation, I removed the magic string']","['cleaned up formatting', '', '', '', '']",15
476,StringUtils.abbreviate handles empty abbrevMarker,No,,0,0,[],[],387
475,LANG-1495 Add EnumUtils getEnum() methods with default values,Yes,15:28:21,1,4,"['Provide a `@since` tag for the new method.', '@Stzx, may I know what version number should I put ?', '`3.10` :)', '@Stzx, Thanks for your guidance.']","['In addition to the `@since` tag, the new features look good, so +1', '', '', '']",70
474,add FastSplitUtils,No,,1,0,[],[],1671
473,[LANG-1466] excludeNullValues param in reflectionToString method,No,,2,0,[],[],39
472,Add more test inputs for ArrayUtils.toMap() method,Yes,"1 day, 0:08:23",2,4,"['Your expected map creation is too obtuse IMO, use the what Java provides instead:\r\n```\r\nCollections.singletonMap(null, null);\r\n```', 'See my previous comment.', 'Fixed. Thanks', 'Fixed. Thanks']","['', '', '']",12
471,[LANG-1177] Added indexesOf methods and simplified removeAllOccurences,Yes,"11 days, 9:48:06",3,10,"['`@since` tag should be provided for newly provided methods.', 'Okay, which version? 4.0?', 'The next version is `3.10`.', 'Done', ""How about inlining all of the 'foundBits'?"", 'It seems to me ""ret"" is not a great name, how about ""bitSet""?', 'Done', 'Done', 'Oops, I did not notice before that you did not close any of these HTML tags. You need to close paragraphs. The first sentence in a Javadoc does _not_ need to be in a paragraph, Javadoc will do that for you.', '@garydgregory Fixed. Apparently this is a problem with other functions too']","['', '', '', '', '', '', '', '', '']",1137
470,Boolean utils limited cleanup,No,,4,3,"['This is included here because it is directly invoked from `BooleanUtils`. There are other similar redundant unboxings in this class in addition to this.', 'You cannot delete public APIs, that breaks binary compatibility within a major release.', 'I think you were looking at some outdated version of the request.\r\n\r\nThis method starts on the line 8886 in the current pull request and also on the current master.\r\n\r\nThe other possibility that I am totally missing something. One thing is for sure: I would never intentionally suggest the deletion or change of an API method.\r\n\r\nCould you have a look at it again?']","['', 'It seems that only the extra unboxing operation has been removed, so +1.', '', '']",10
469,BooleanUtils Javadoc,Yes,"66 days, 2:26:01",1,0,[],[],110
468,Boolean utils little cleanup,No,,3,0,[],[],172
467,AnnotationUtils little cleanup,Yes,"1 day, 6:13:06",1,0,[],[],20
466,Functions Javadoc,Yes,"67 days, 22:00:11",2,6,"['""enveloped"" -> The term ""wrapped"" is a more standard term IMO.', '""help"" is not unlikely to be guaranteed, it might be safer to say ""may help"".', 'I do not mind changing the wording and I have done.', 'In general, Javadocs always start with ""Gets"", not ""Get"", ""Returns"", not ""Return"", and so on; so here let\'s keep ""Rethrows"", and not change to ""Rethrow"" SVP.', 'The pre tag is enough, there is no need to use the {code ...} within it. ', 'It is just a habit and a bit safer for later modification. But I am not insisting it to keep.\r\n\r\nThe difference is that you can use < and > characters instead of their escape sequence if there is the `{@code ...}` also. I have learned this from the JDK source where it is used many times. In this case there is no need. I will remove it.']","['', '', 'Thank you.', '', '']",24
465,Functions javadoc extended a bit,No,,1,0,[],[],185
464,Support Scope,No,,0,0,[],[],873
463,Code refactor to simplify Functions and new tests,Yes,"1 day, 9:53:58",1,0,[],[],135
462,General Code Cleanup,No,,2,12,"['This is not an automatic fix. This code was copy-paste.', 'This test does nothing. `RandomUtils.nextBoolean()` returns a `boolean` that can either be `true` or `false`. This is guaranteed by the language, there is no need to test it. It is kind of evident.', 'The `new` operator never returns `null`. `new RandomUtils()` cannot be `null` in Java.', 'This array declaration is called ""C-type array declaration"" and it is not recommended.', 'This transformation was automatically done by IntelliJ.', 'If you clear the assertion, it seems useless to keep an expression for the new object.\r\n\r\nIf not used, it should be removed.', 'Done. Also in the other cases and all the default constructors were removed in these cases that do not need to be there explicit. I moved the relevant part of the constructor javadoc to the class documentation.', ""Oh, sorry.\r\n\r\nI don't think I'm clear, I mean delete is to delete the useless expression like `new RandomUtils()`."", 'That was absolutely clear, but I was picking up the thread when I checked why the test instantiates the class at all and then I could see that\r\n\r\n1.) there was no reason\r\n2.) the constructors were calling super() which is done by default\r\n3.) the constructors were the default constructors that do not need to be written\r\n4.) some tests just tested that the class with only the default constructor exists in a different way\r\n\r\nso I deleted the constructors, where they are created anyway and I changed the tests to follow the same pattern.', 'Why not just CharRange[]::new?', 'The same goes for every other `toArray` call changed this way in the pull request.', 'My bad, that came with Java 11, I was thinking of `stream().toArray()`. (Which I understand why is not used here.)']","['', '', '', '', '', '', '', '', '', '', '', '']",2689
461,Lang 1491,No,,13,0,[],"[""-1 I'd prefer to leave the tests are they are as we could have pull requests created with the `public`, or `private`, etc. And we are not really enforcing any style.\r\n\r\nIt seems to me that the JUnit team is also not enforcing, but giving an option to type less: https://stackoverflow.com/a/55230350\r\n\r\nIt would be simpler then to leave the tests as they are, unless it's going to be deprecated, or if we decide to enforce it in lang to use default modifier everywhere. But won't object if other commiters prefer to change. Just my opinion :+1: \r\n\r\nEDIT: but if future PR's have tests that omit or use private modifier, I'm all good for that. Just don't think we need to change every test we have had.""]",6538
460,Lang-1465: Fix the ZZ time zone format,No,,3,0,[],[],20
459,(doc): Document public RandomStringUtils exploit,No,,11,10,"[""Do we really want to link to a site that only let's you read a limited number of articles per month? Isn't there a freer source for this information?"", 'As an author that regularly publishes on medium, you can choose to monizie or not monizie. It doesn\'t look like this one is monizied. I can ask the author for a ""friend"" link that doesn\'t have that pop-up when you load it though.', 'Hey! I\'m the author, and I don\'t have any of my articles monetized on medium. I just use medium for convenience.\r\n\r\nIn any case, here\'s a ""Friend"" link: https://medium.com/@alex91ar/the-java-soothsayer-a-practical-application-for-insecure-randomness-c67b0cd148cd?source=friends_link&sk=3db1c41cc81a58f70ed05a7315191385\r\n\r\nCheers!\r\nAlejo', '```suggestion\r\n * <a href=""https://medium.com/@alex91ar/the-java-soothsayer-a-practical-application-for-insecure-randomness-c67b0cd148cd?source=friends_link&sk=3db1c41cc81a58f70ed05a7315191385"">\r\n```', 'I say we KISS it and put in the comment without a link.', ""I mean, it's not that hard to find if you know what to Google. But this makes a software engineer/PEN Tester/security researchers life easier by fully explaining the potential impacts of their choices here. I figure the more documentation, the better."", ""I think it should be \r\n\r\nthis class' default..\r\n\r\nOr\r\n\r\nThese classes'\r\n\r\nOr simply\r\n\r\nAvoid using the default implementation in this classs if you need a cryptographically secure..."", ""I agree with others on the issue with a link to medium, but I don't care much about monetization.\r\n\r\nIf we have a link to CVE, a paper published in some journal, a standard documentation from some site like ietf, or a wikipedia page, it would be preferrable IMHO.\r\n\r\nIf this is the only place with an explanation, or the best link to understand the issue, then we need to use a web.archive.org link to prevent it from disappearing after some years."", ""@alex91ar Thoughts?\r\nI have a CVE for JHipster. That's just a specific case though. This is a full POC."", ""If you'd like I can port the article to somewhere else, just say where and I will!""]","['', '', '', '', '', '', '', '', '']",6
458,[LANG-1426] Corrected usage examples in Javadocs,Yes,"9 days, 23:39:30",8,0,[],"['Thanks for fixing these! Looks good to me, and agree on the improvement suggested by @garydgregory ']",18
457,WIP [LANG-1490] - Creates DiffResultView and DiffView classes,No,,3,3,"['I think the files were formatted with tabs, and this may cause issues in Travis when it builds using Checkstyle.', 'I think this file is missing the copyright license header.', 'Probably will fail checkstyle due to tabs here, instead of spaces.']","[""Looks like a very interesting addition to [lang] @nicolasbd ! Had a quick read at the code, and it looks good! Thanks for the PR.\r\n\r\nFew comments, mainly about the Checkstyle reports. It would be really helpful if you could rebase your branch, and then run `mvn` or just push to your branch and wait for the Travis build to validate the changes.\r\n\r\nWe also have some diff algorithms for text in Commons Text. I wonder if later the API's would converge or have something in common - https://github.com/apache/commons-text/tree/master/src/main/java/org/apache/commons/text/diff\r\n\r\nBruno""]",221
456,[LANG-1489] Add null-safe APIs as StringUtils.toRoot[Lower|Upper]Case(String),Yes,21:50:00,1,0,[],[],63
455,LANG-1484: Allow decimal point at the end of the String,No,,7,0,[],"[""Looks good to me, fair point on `Double.parseDouble` and `Float.parseFloat` accepting similar format - which would imply that it is parsable.\r\n\r\n+1, approving. Let's wait and see if anybody else would like to review it too. I will comment on the JIRA issue as well.\r\n\r\nThanks for the PR @saksham93 :+1: \r\nBruno""]",5
454,Make diff result extends pair,No,,6,0,[],[],224
453,[LANG-1487] Add ClassLoaderUtils with toString() implementations.,Yes,"2 days, 22:03:29",1,0,[],[],103
452,"[LANG-1486] Generify builder classes Diffable, DiffBuilder, and",Yes,20:17:47,2,0,[],"['', '', '', ""Well, after thinking about it, I'm not sure how we should deal with custom comparisons between two objects of different Type, or even add arbitrary differences to a diff, even if it's not related to one of the fields of the base object ""]",159
451,LANG-1485 : Add getters for lhs and rhs objects in DiffResult,Yes,2:10:43,2,9,"['- You do not need to use p tags for the first sentence of a Javadoc comment IIRC. \r\n- A sentence should end in a period.\r\n- Use ""Gets ..."" instead of ""Return ...""\r\n- New public APIs should carry an `@since` tag.\r\n', 'thanks @garydgregory \r\nActually I saw all javadoc comments had a `<p>` tag and other getters are introduced with `Returns` so I tried to stay consistent with them ... should I change it ? \r\n\r\nWhich version should I put in the `@since` tag ?', 'Also maybe I could call the getters `getLeft` and `getRight` ... seems more readable, what do you think ?', '@nicolasbd\r\nYes, please use `getLeft` and `getRight`, much better!', '@garydgregory ok cool, but what about the `@since` tag ? which number should I set it to ? `4` ? `3.10` ? `3.9.4` ?', '3.10\r\n', 'Ok @garydgregory , made the changes except for p tags for consistency with other javadocs comments', 'Nope :-( Use `@since` not `@`. Also, `@since` should be the _last_ tag.', 'damn\' sorry for the typo, ok for putting it in last\r\nalso got back to ""Returns"" for consistency with other Javadocs comments']","['', '', '', '', '', '', '', '', '']",32
450,Add and use IllegalArgumentExceptions,No,,8,27,"[""Shouldn't %s be %c instead? The same applies to some other exceptions using char."", 'I could be indeed but IIRC it does not matter since the result will be the same. Unless something interesting would happen related to Unicode. I am happy to change it if you feel it is better and easier to maintain for readers trying to use the method in their own apps.', '%,d => %d', '%,d => %d', ""That should be '%d'"", '%d', '%d', '%d', '%,d => %d', 'The magic number 8 should be a constant', 'Magic number 4', '%,d => %d', '%s => %d ?', ""I think the above change shows why the class is unnecessary.\r\nI don't think it makes sense to create a new class just to drop the text 'new ' and 'String.'"", ""This is a completely different change; please don't mix changes in a pull request."", 'Why is the ase parameter listed twice? Looks wrong', 'Hi @sebbASF ,\r\nOne of the reasons for the new API is to use rich formatting, so why loose the comma-separated format since it is much easier for humans to read?', 'Will do.', 'Will do.', 'Will do.', 'See previous comment.', 'I will use `""Search and Replace array lengths don\'t match: %,d vs %,d""`', 'For this call site, I am 50/50, I implemented here for consistency. Picking this call site to question the existence of the whole PR does not take into account more complex use cases, IMO ;-)', 'Will commit to master instead. A PR for this is over the top IMO. ', 'I will remove the last `ase`. The rest is correct, it is not the same, one param is from `type2` and the next for `type1`.', ""The same reasoning applies to all the other places once you have changed the string concatenation to use String.format.\r\n\r\nI don't see the benefit of having a separate class just to avoid writing 'new ' and 'String.' \r\n\r\nThis particular bit of code shows clearly that using the proposed IllegalArgumentExceptions class instead of  the standard IllegalArgumentException class makes very little difference to readability."", 'OK, sorry, I did not realise that the comma was a valid numeric flag for the formatter.\r\nIt looked like a mistake.']","[""No objections from me, assuming Travis build passes and others are OK with this. When I read your proposal this morning via e-mail I didn't understand what it would look like, but after seeing this PR I guess it makes sense. Thanks!"", '', '', ""I don't see the point of the new class, but if enough people think it is a good idea I won't veto it.\r\n\r\nHowever the PR must not mix unrelated changes, and the various bugs need to be fixed.\r\nAs it stands, I am -1."", '', '', '', '', '', '', '', '', '', '', '']",217
449,Update documentation related to the issue LANG-696,Yes,"42 days, 6:29:45",2,2,"['The addition of the inner class will cause the compilation identifier InnerClassName to move backwards. You need to modify\r\n\r\n```\r\n        assertEquals(""ClassUtilsTest.10"", ClassUtils.getShortClassName(new Object() {\r\n            // empty\r\n        }.getClass()));\r\n```\r\nto\r\n```\r\n        assertEquals(""ClassUtilsTest.12"", ClassUtils.getShortClassName(new Object() {\r\n            // empty\r\n        }.getClass()));\r\n```\r\n\r\nand\r\n\r\n```\r\n        assertEquals(""ClassUtilsTest.11"", ClassUtils.getShortClassName(new Object() {\r\n            // empty\r\n        }, ""<null>""));\r\n```\r\nto\r\n```\r\n        assertEquals(""ClassUtilsTest.13"", ClassUtils.getShortClassName(new Object() {\r\n            // empty\r\n        }, ""<null>""));\r\n```\r\n\r\nAnd adding warning notes like [487 lines](https://github.com/apache/commons-lang/blob/479d2c85083fd127b2d4fcfbf184267c76275350/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java#L487).', 'done as requested']","['', '']",205
448,Lang 1482,No,,2,4,"['this was missing and that one line in rethrow was not covered by test', 'this may even could be a public utility method in some other class', 'The functionality as it was implemented the first hand is already there.', '`assertNotNull()` makes no sense on primitive']","['', '', '', '']",256
447,"Fix checkstyle violations (tabs, missing spaces after commas, missing javadocs)",Yes,0:30:03,0,0,[],[],229
446,LANG-1480 getAbbreviatedName refactored to create appropriate length …,Yes,"51 days, 7:14:15",9,26,"[""This won't pass checkstyle I think. You will need to replace the `*` by explicit imports.\r\n\r\nSee Travis builds failing, this part is due to this change: \r\n\r\n>[ERROR] src/main/java/org/apache/commons/lang3/ClassUtils.java:[23] (imports) AvoidStarImport: Using the '.*' form of import should be avoided - java.util.*."", 'Thanks for updating the docs!', ""This was the default IntelliJ setting to use * after more than 4 imports from the same package.\r\n\r\nI see no reason why not to use '*' in imports these days with such advanced editors, but in case that is the project standard, I comply. Thanks."", 'I think now the PR has a lot more changes that are not related to LANG-1480. Are you able to undo formatting changes, and leave only the changes for the issue, please?', 'I am doing it. Actually, these formattings are clumsy in the original code, and IntelliJ just reformatted automatically. I understand that it is no excuse for creating a messy PR. Sorry.', 'Please specify if the result string is always <= len.', 'I do not think we should talk about ""loss of meaning"" as to me, abbreviating implies ""loss of meaning"" by design ;-) Just describe what it does. IMO a list would be better to describe the different use cases.', 'Is this only used once? If so, just in-line it with a `//` comment.', 'Is this a strong requirement or something you can live with if I leave it as it is?\r\n\r\nAs you can see from the length of the comment this is a complex expression and the JavaDoc explains a lot about the algorithm used. Such an extensive commend would degrade the readability of the caller method.\r\n\r\nAs per the performance: the JIT will inline this method, it should not be a problem. ', 'It is not and it is described in detail in the above text. To be absolutely correct I added a half-sentence here as well.', ""I'm ok to leave as it since the description is nice especially using `@param` tags which would end up in some non-standard format if documented with `//`s."", ""Let's not change the visibility of test classes please."", 'I was expecting a short-circuit here when the length hint is greater or equal than the input string, then return the input string to avoid creating a new String.', 'I am starting to wonder if `len` would be better named `lengthHint` to make it clearer that this length is not a guarantee in any shape or form of the length of the returned string.', 'I can live with that. Makes sense.', 'Makes sense.', '@verhas Then please go ahead and change it to `lengthHint`.', '@verhas Then please go ahead and update the code and add a test.', '@verhas ping.', '@verhas ping.', ""Let's not change the visibility of test classes and methods please."", ""Let's not change the visibility of test classes and methods please."", ""Let's not change the visibility of test classes and methods please."", 'Why?\r\n\r\nSince the project uses JUnit 5 the required visibility is package private. Any access modifier is noise.', 'Sorry, but wrong addressee. This is not me, who has changed the visibility, but JUnit 5.', 'Thanks']","['', '', '', '', '', '', '', '', '', '', '', ""Let's not change the visibility of test classes and methods please."", '', '', 'sorry', '']",163
445,LANG-1478 class name abbreviation fix,No,,4,0,[],"['I think I should add javaDoc at the same time, add a new example.\r\n\r\n```\r\n<tr><td>""java.lang.String""</td><td>16</td><td>""java.lang.String""</td></tr>\r\n```', 'Can you update the Javadocs to include an example of a call with a class name, and `len` with the exact class name length, and its expected output, please?']",4
444,LANG-1478,No,,1,0,[],[],11
443,Optimize string split methods: 1. Use ThreadLocal to make reuse of th…,No,,13,9,"[""We shouldn't use this error type, this is expected to be thrown by the JVM\r\n\r\n>Thrown when the Java Virtual Machine cannot allocate an object because it is out of memory"", '`StringUtils` is a long class, with high maintenance cost already as-is. Adding an extra class increases the maintenance. I would prefer to avoid it if possible. If we really need to add it, we **must** provide good documentation. Reading the name of the class, and the single comment `buffer class` gives too much room for interpretation. IOW, I would have to read the code to understand what this class does, how it works, and whether I should use it or not.', ""Comments like this are ignored by Javadoc tools and IDE's, and only available when a developer reads the source code."", 'Leaving the variable name `list` would have reduced the changes to review I think?', 'I will edit this later.', 'The SplitBuffer instance is not a List instance anymore, leave it with a name ""list"" would be misleading I think. ', 'Yes, it is thread-safe, but as soon as project loom is released thread-safety will not be our concerns. It will not be fiber safe. Using thread-local variables instead of objects is a hack and will bite back as hard as static variables bit our assets when we started to create multi-thread programs.', 'I think not only `ThreadLocal`, but also the behavior of any *mutable object* would be unpredictable if the execution of a method call could be break(i.e. another method takes over the thread during the method call).I guess there might be some ""safe-point"" where another method could have access to the execution in project loom? ', '> Another relatively major design decision concerns thread locals. Currently, thread-local data is represented by the (Inheritable)ThreadLocal class(es). How do we treat thread-locals in fibers? Crucially, ThreadLocals have two very different uses. One is associating data with a thread context. Fibers will probably need this capability, too. Another is to reduce contention in concurrent data structures with striping. That use abuses ThreadLocal as an approximation of a processor-local (more precisely, a CPU-core-local) construct. With fibers, the two different uses would need to be clearly separated, as now a thread-local over possibly millions of threads (fibers) is not a good approximation of processor-local data at all. This requirement for a more explicit treatment of thread-as-context vs. thread-as-an-approximation-of-processor is not limited to the actual ThreadLocal class, but to any class that maps Thread instances to data for the purpose of striping. If fibers are represented by Threads, then some changes would need to be made to such striped data structures. In any event, it is expected that the addition of fibers would necessitate adding an explicit API for accessing processor identity, whether precisely or approximately.\r\n\r\nSee:[https://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html](https://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html)']","[""looks great.\r\n\r\nThe benefits are obvious, no need to redistribute List, may not need to resize the internal size.\r\n\r\nI am worried that some problems will still be caused by using the clear method. such as\r\n\r\n> The clear() method has to assign null to each (used) slot in the ArrayLists backing array.\r\n>\r\n> The clear() does not resize the backing array to release memory. So if you repeatedly fill and clear a list, it will end up (permanently) using enough memory to represent the largest list that it encounters. In other word, you have increased the memory footprint. You can combat that by calling trimToSize(), but that creates a garbage object, etcetera1.\r\n>\r\n> There are locality and cross-generational issues that could affect performance. When you repeatedly recycle an ArrayList, the object and its backing array are likely to be tenured. That means that:\r\n> > The list objects and the objects representing list elements are likely to be in different areas of the heap, potentially increasing TLB misses and page traffic, especially at GC time.\r\n>\r\n> > Assignment of (young generation) references into the (tenured) list's backing array are likely to incur write barrier overheads ... depending on the GC implementation.\r\n>\r\n> https://stackoverflow.com/a/18371813\r\n\r\n@kinow What do you think?"", ""@YuyuZha0 thanks a lot for your contribution. I spent some time reviewing it, and thinking very hard whether we should include it or not.\r\n\r\nBut `StringUtils` performs quite well for me, though I don't have a case where I need it to perform under ms/ns for multiple users.\r\n\r\nSo for maintenance, I would prefer to keep the current approach with `ArrayList`. Said that, there are two changes in this PR. One for the per-thread collection. The other for the `toArray()`, where you included some docs from IntelliJ about this optimization.\r\n\r\nI think this second improvement could become a separate issue, much smaller, and simpler to be reviewed. If it has indeed the same behavior as `toArray(new String[0])` **or even better**, then I think we should be able to include an improvement like this in the next release."", '', '', '', '', '']",185
442,LANG-1474 documentation correction,No,,6,4,"['I just tried `System.out.println(StringUtils.isAnyBlank((String) null));` using `master` branch and it printed `true`. Have you tried this code too?', 'Ditto above for me.', 'This one gave me `false`, as before.', 'Same as this one, `false` not `true`.']","[""Testing using `master` branch, the docs appear to be correct for me @verhas. Could you double check if you get the same using `master`, please? I've also kicked Travis as the error in one of the builds is most likely due to some glitch in their env.\r\n\r\nThanks for the pull request.\r\n\r\nBruno""]",8
441,[LANG-1475] Fix unwrap StringIndexOutOfBoundsException,No,,1,2,"['Normally the `dev` is a committer, and `due-to` is the PR contributor name/alias. But I will amend this manually in my working copy while merging :+1: ', 'Ok, thank you for your work for this.👍']","['Tested locally the 3.9 release, and the `.unwrap(""a"", ""a"")` indeed is throwing the exception. Good catch. I think it\'s OK to return an empty string if you unwrap ""a"" removing the marker ""a"". So +1', '', '']",21
440,Fix static code issues,No,,3,4,"['How can this be correct when the bounds above are 16 and 64?', ""That is a very good spot, not sure what happened here. I've fixed it now. Interesting that no tests picked it up."", 'Interesting issue with these special characters. But I think this file is generated automatically by a script during release, so it may be overridden later I guess? Someone else more familiar with the release process of lang can comment here I think', 'I checked it and found that it should be because the project default encoding is ISO-8859-1. Github seems to use UTF-8 encoding by default to read the content and cause garbled characters.']","['', '', 'From a cursory look, everything looks OK. Had to squint and re-read a couple min/max changes, but could not find any issues. Assuming Travis build passes, +1 from me', '', '']",1473
439,Improvement JavaVersion get method,Yes,"7 days, 17:24:23",6,0,[],"['Small change, but looks very sensible to me. Perform null defensive check sooner rather than after checking all the values. +1 from me :+1: \r\n\r\nThanks for the PR @Stzx  ', '+1 ']",7
438,Add files via upload,No,,3,0,[],[],0
437,Add GenericArrayType support to TypeUtils.containsTypeVariables,No,,5,0,[],['It looks like a unit test would be easy to write? Probably a new one in `TypeUtilsTest`?'],48
436,LANG-1465: Fix for the time zone format -0530 should be accepted for …,No,,0,0,[],['Rejecting this because it does not comply to ISO 8601 extended timezone format. You are not allowed to mix basic and extended format. You also have changed the non-capturing group to a capturing one.'],12
435,Adding power support,Yes,"5 days, 0:55:41",2,0,[],[],4
434,Fixed a problem when parsing Chinese using the ToStringStyle.JSON_STYLE,No,,2,2,"['Directly writing characters causes JSON special characters to not be properly escaped.', 'so how to solve this problem.']","['', '', '想用来做缺陷定位\r\n']",29
433,Travis Java 13,Yes,8:44:57,0,0,[],[''],13
432,Annotating base classes,No,,0,0,[],[],15113
431,adding power support,No,,7,0,[],[],3
430,Add ArrayUtils.isSameLength() to compare more array types,No,,6,0,[],[],2465
429,"ArrayUtils: merge 8 isSameLength,isEmpty,isNotEmpty into one function each.",No,,1,0,[],"['Wouldn\'t it allow for `ArrayUtils.isSameLength(""this is a test"", ""a test this is"")`? Which would actually result in `IllegalArgumentException` in `getLength`, but could be misleading.\r\n\r\nIMHO, the current way is better, or if someone could come up with a simplification using generics, that could work too. But using `Object` changes the semantics of the method - and not exactly in an intuitive way.']",291
428,[LANG-1546] remove <encoding> and <docEncoding> and use inherited values from commons-parent,No,,8,4,"['This parameter is pointless because it duplicates `project.reporting.outputEncoding`. So is `encoding` which even contrdicts `project.build.sourceEncoding`. Both must go away.', '@michael-o you mean we shall delete both `<encoding>utf-8</encoding>` and `<docEncoding>utf-8</docEncoding>` ?', 'Yes, this is my understand. The same issue is with commons parent. If someone else of the committers proves me something different. It is just dedundancy. @britter @bodewig what is your opinion?', '@kinow  Here is the content I mean.']","['', '', '', ""Hi @XenoAmess , haven't looked at this PR in a while. But I **think** it was doing as the title says before, i.e. it was changing from `<docEncoding>` to `<docencoding>`.\r\n\r\nBut I had a look at the changes, and looks like it's now removing that. Could you explain the rationale for that? Is it to retrieve the value from the parent? Sorry, I missed the context, so if you could explain this I will take another look and see if it can be merged soon-ish :+1: "", '', ""Had had the docs before. But to review and make sure this change wouldn't cause any other unwanted consequences, did the following:\r\n\r\n- merged locally after rebasing/squashing commits\r\n- ran `mvn` and got an OK from the command\r\n- ran `mvn help:effective-pom` to get the effective pom, and confirmed the values are using utf-8, and with the correct tag\r\n\r\n![image](https://user-images.githubusercontent.com/304786/84724628-c02c0e00-afdc-11ea-9e20-9103bcb7265b.png)\r\n\r\n(there are some +3000 lines in the effective pom :eyes: )\r\n\r\nLGTM\r\n\r\nThanks @XenoAmess ""]",2
427,LANG-1460: (doc) (trivial) correct release year for v3.9 in release-history.xml,No,,3,0,[],"[""Change is so trivial I think we don't need a JIRA ticket for this one. Looks good to me, but not sure if this date is set manually for every release (never seen that file). The [`changes.xml`](https://github.com/apache/commons-lang/blob/abb39c22c0e538fff03ea4e53d78ee60c6c08092/src/changes/changes.xml#L48) appears to be correct. Approving and leaving to someone more familiar with this file or the lang release process to merge.\r\n\r\nThanks a lot for your PR!""]",2
426,Add function public static <T> T[] fillNew(T[] a),No,,1,0,[],[],0
425,RandomUtils : comment error,Yes,"90 days, 11:39:46",1,1,"['Ah, got it. It appeared to be inclusive, but looking at the `RandomUtils` implementation, it uses only `java.util.Random` (constant, not parametrized). And the methods used here, e.g. `.nextDouble()` is [inclusive, exclusive).']","['', 'Looks good to me! Thanks for the pull request!']",32
424,"Annotated packages exception, builder, reflect and partially time. ",No,,1,0,[],[],3673
423,LANG-1406: StringIndexOutOfBoundsException in StringUtils.replaceIgnoreCase,No,,5,0,[],[],12
422,LANG-1406: avoid StringIndexOutOfBounds exceptions for some cases of …,No,,5,2,"['I will move this method below indexOf(CharSequence, CharSequence, int) declaration around line 1473', 'java doc suggestions are welcome']","['', '']",58
421,revise java-doc error,Yes,9:37:46,3,2,"['The first one matches what I got using the `master` branch. But the second example has a problem with the quotes? Supposed to be `[""ab"", """", """", ""de"", ""fg""]` I think.', 'Yep, should be that.']","['', '', '']",4
420,LANG-1453: using toUpperCase instead of toLowerCase solve the problem,No,,9,1,"['We need to minimally replace `""İ""` with `""\\u0130""` for this to properly work. For example try running:\r\n\r\n```java\r\nSystem.out.println(""İ"");\r\nSystem.out.println(""\\u0130"");\r\n```\r\nonly the second will give your desired output. That said, your point is still quite valid.']",[''],7
419,Lang 1456 either,No,,2,0,[],[],753
418,Changing switch statement to if/else statement for greater clarity,Yes,"11 days, 9:52:57",2,0,[],"['Code LGTM.', 'Yup']",5
417,"(doc) Fixing couple of dangling javadocs, converted to comments.",Yes,8:56:50,1,0,[],[],7
416,[LANG-1498] Add support of lambda value evaluation for defaulting methods,No,,8,3,"['You know that you can combine `<pre>` and `{@code` to avoid using the ugly HTML escape sequences. I learned that from the JDK source.', 'There is an extra space on the line.', 'Thanks for hint']","['', '', '']",171
415,LANG-1443: Add more SystemUtils.IS_JAVA_XX variants,Yes,10:23:22,2,5,"[""Checkstyle ain't happy with this .* import I think."", 'Right, we need specific imports.', 'IntelliJ does that by default at greater than 5 import statements. It rewrites them with the *\r\n\r\nIt drives me crazy', 'Damn you, IntelliJ! 😤Will fix that later today.']","['', ""Looks good, just need the checkstyle bit (I'm +1 to remo .* from code base, but would be +1 to removing that rule from test code)."", '', '', '']",178
414,LANG-1369: Formatted and Paramaterized Exception Classes,No,,1,0,[],[],808
413,Fix javadoc in wrapIfMissing,Yes,8:30:46,2,0,[],[],48
412,(doc) Fix javadoc for 'startIndex' parameter of StringUtils.join() methods,Yes,0:16:22,1,0,[],[],20
411,LANG-1437: Remove redundant if statements in join methods,Yes,"167 days, 22:15:02",1,0,[],[''],69
410,Add proposal for Jenkins Pipeline,Yes,"19 days, 23:24:45",1,5,"['What about just calling `mvn` which does pretty much the same, see: https://github.com/apache/commons-lang/blob/master/pom.xml#L627 ?', ""Might be a good idea. I think in Travis we have that in some other components too... that way once updated, we won't have to touch the Jenkinsfile (which I'm less familiar than pom.xml). Or would there be some advantage in maintaining the build maven goals in the Jenkinsfile instead?"", ""Okay, let's do it like we do it for travis. In this case I would also combine the build and analyze stages into one stage."", '@kinow please take another look. Can we merge the pipeline script like this?', '+1 LGTM']","['', '', '', '', '', '', '', 'Tested locally, using latest Jenkins LTS (had to remember where to add Tools, then added Maven, JDK). Pointed my SCM to my local clone of commons-lang with the branch pr-410.\r\n\r\nWorked like a charm once I had everything configured in my environment. Great work @britter and all. \r\n\r\n![Screenshot_2019-03-12_09-46-34](https://user-images.githubusercontent.com/304786/54156968-34a80100-44ac-11e9-836a-658acc25c63b.png)\r\n\r\n![Screenshot_2019-03-12_09-48-08](https://user-images.githubusercontent.com/304786/54156975-38d41e80-44ac-11e9-851f-374a7727fd20.png)\r\n\r\n']",115
409,Consolidate the StringUtils.equals and equalsIgnoreCase methods.,Yes,5:12:26,3,0,[],"['I believe it does the same as the previous code, just simpler. Documentation notes (and emphases were a good idea). Travis-CI appears to be OK with changes too, so approving PR and leaving for others to review. :+1: thanks @aherbert !!!', 'May you also please update the changes.xml file?']",40
408,LANG-1435: Implemented defaultIfNull method that uses a supplier for default value,No,,5,0,[],[],40
407,LANG-1433: MethodUtils will throw a NPE if invokeMethod() is called for a var-args method,Yes,"362 days, 5:06:24",0,0,[],[],68
406,[LANG-1407] DurationUtils - methods for rounding duration ,No,,7,0,[],[],485
405,ensure java version are supported even when not in our enum,No,,1,1,"['```suggestion\r\n    @ValueSource(strings = {""11"", ""11.0"", ""11.0.2""})\r\n```']","['@rmannibucau can you please fix the conflicts? Thanks!', '']",9
404,Assertion cleanup,No,,3,0,[],[],1606
403,Fix CI issues in Functions and FunctionsTest,Yes,2:56:35,1,0,[],[],1046
402,JUnit Jupiter upgrade 5.4.0,No,,2,0,[],[],453
401,Lang 1424 Checked Functions,No,,1,2,"['You could create a utility method (also useful for commons-lang) similar to what we did in log4j2 to rethrow without wrapping the exception: https://github.com/apache/logging-log4j2/blob/master/log4j-core/src/main/java/org/apache/logging/log4j/core/util/Throwables.java#L91', '@jvz I would do it, but after creation of [that class](https://github.com/apache/commons-lang/blob/2ebc17ba3f244ae44aae46273aeef7e321f9542a/src/main/java/org/apache/commons/lang3/Functions.java) I think I should cancel this PR...']","['', '']",911
400,Close/flush the `OutputStream` before calling `toByteArray()` on underlying `ByteArrayOutputStream`,No,,2,0,[],"[""@emopers after a cursory look at the code, couldn't we use try-with-resources for both streams instead? Ensuring every stream is closed. WDYT?""]",4
399,Synchronize before looping over synchronized collection,No,,5,0,[],[],8
398,Add ComparableUtils,Yes,"347 days, 22:39:03",29,8,"['I think all the javadocs here have the same typo, ""Checks is the value..."" should be ""Check if the value..."" ?', 'It should read ""Checks if the value...""', 'Ops, good spot @garydgregory ', 'fixed thanks', ""Hi @Sam-Kruglov ,\r\nWhy is this class not `public'?\r\n"", 'Just so I don\'t have to type the word ""public"" :D\r\nShould I make it public? ', '@garydgregory \r\n\r\n>Test classes, test methods, and lifecycle methods are not required to be public, but they must not be private. \r\n\r\nhttps://junit.org/junit5/docs/current/user-guide/#writing-tests-classes-and-methods', 'Indeed, indeed, but it seems confusing to have 99% of the test classes public and only a tiny subset package private. Consistency is less confusing IMO.']","['', ""Change looks good to me. I'd be OK with this new utils class, though I don't have a use for this in any current project. Still needs a JIRA and `changes.xml` entry (can be added later), and found one small typo. Thanks for the pull request @Sam-Kruglov "", '', '', '', '', '', '', '', 'Looks good to me. All tests passing too, and I liked the final API. +1 from me, will leave the final review/merge for @garydgregory \r\n\r\nThanks for the PR @Sam-Kruglov !', '']",494
397,"Replaces the given String, with the String which is nested in between two Strings. ",No,,1,0,[],[],31
396,"Travis: ""openjdk-ea"" now means Java 13, so add Java 12 to JDKs to bui…",No,,1,0,[],[],2
395,"Replaces the given String, with the String which is nested in between two Strings.",No,,9,8,"['Based on your code, this is ""the String to replace the inner substring"". ', ""I'm lost on why this `if` is needed. I would think you'd just call the `str.substring(end)` and add together `preceding, open, replace, end`"", 'exceeding', 'please remove', 'also, `Sting`', ""Similar to my comment below, I'd think it wise to simplify.\r\n`String preceding = str.substring(0, start + open.length());`"", 'Thanks a lot,\r\n\r\nAs per your suggestion have changed the code as follows.\r\n```java\r\npublic static String replaceSubstringInBetween(final String str, final String replace, final String open, final String close) {\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    if (open == null || close == null) {\r\n        return str;\r\n    }\r\n    final int start = str.indexOf(open);\r\n    if (start != INDEX_NOT_FOUND) {\r\n        String preceding = str.substring(0, start);\r\n        final int end = str.indexOf(close, start + open.length());\r\n        if (end != INDEX_NOT_FOUND) {\r\n            String exceeding = str.substring(end + close.length(), str.length());\r\n            //String middleString = str.substring(start + open.length(), end);\r\n            return preceding + open + replace + close + exceeding;\r\n        }\r\n    }\r\n    return str;\r\n}\r\n```\r\nPlease suggest that the name of the function is valid `replaceSubstringInBetween()` or do i need to change the name.\r\n\r\nI will add more unit test on this function.', 'As is, you would still need to account for negative indices being returned from `str.indexOf(open) `and `str.indexOf(close, start + open.length())`']","['', '', '', '', '', '', '', '']",31
394,Replace String for reports,No,,0,0,[],[],35
393,Replace String,No,,1,0,[],[],37
392,LANG-1410: eliminate one unnecessary local int variable and add more tests,No,,2,14,"['I think that name strLen is more informative', 'Maybe, however \'strLen\' sounds like something unchangeable, since String is immutable in Java. I\'ve chosen this variable name to be the same to name of the similar \'sz\' variable in isWhitespace() method. The \'sz\' name stands for ""size"", I think. If we decide to change it we should change names of they both.', ""I tend to agree with sz being more appropriate of a name here than strLen. It would appear that no other variable named `strLen` ever deviates from its original assignment (even the non-final ones.) \r\n\r\nSaving a loop variable isn't a great gain in memory usage but I suppose this is a bit more appropriate. Though, thinking ahead for the future - can one imagine having to reference the string length for a future change? That would be my opposition for this. "", 'I might be missing something, but this appears redundant with the next line. Did this add any coverage?', 'This is a special case that fails if you accidentally use `index > 0` instead of `index >= 0` in the expression of the down going loop. The next line will not fail in this case.', ""@MarkDacek, this and also the `isWhitespace()` methods are just string scan methods. They don't need the string length except the very beginning. Thus the original value returned by `cs.length()` doesn't need to be memorized."", 'Might be worth adding a comment in there for that. ', 'Done in the second commit.', 'So maybe instead of ""sz"" the name should be ""i"" or ""index""? It\'s quite good name for a looping-control variable, isn\'t?', ""Or `idx`? But aren't we spend too much time for a discussion of one variable name? :-)"", ""Hm, I've given another look through and it would appear that other uses of `sz` are final as well. \r\n\r\nI don't object to this, but I would question the need for it as the memory gain isn't noticeable."", 'Regarding the final keyword for ‘sz’, in my view makes sense to make the code uniform and in general, the final keyword is used in the surrounding affected for variables non-mutating (even for variables inside methods).  Personally, I like it because think it makes the code more readable providing information about the mutability of variable', 'So what name do you think is better in this case? `index`, `idx` or something else?', 'idx is fine for me']","['', '', '', '', '', '', '', '', '', '', '', '', '', '']",56
391,Adding junits for JsonToStringStyle,Yes,"78 days, 3:11:59",8,0,[],[],179
390,Adding junits for StandardToStringStyle,No,,6,0,[],[],22
389,(doc) StandardToStringStyle removing unnecessary method overrides,No,,2,0,[],[],513
385,WIP: CheckedFunction utils,No,,1,1,"[""This doesn't seem to test the interesting behavior of the code. There is no exception rethrown as a `RuntimeException`. Shouldn't that be happening?""]",[''],112
384,"Travis: Stop building with Java 9 and 10, as these are superseded by …",Yes,"3 days, 18:05:02",1,0,[],[],2
383,Make whitespace use consistent and add checkstyle rules to enforce it,Yes,"2 days, 6:09:27",1,0,[],[],1815
382,Proposal: Duration Utils - round value of the duration in  a given unit,No,,1,0,[],[],557
381,LANG-1406 StringIndexOutOfBoundsException in StringUtils.replaceIgnor…,No,,5,2,"['searchString could contain one of those characters like ""\\u0130""']",[''],20
380,fix javadoc typo,Yes,1:03:14,2,0,[],[],2
379,add tests for use ImmutableTriple as key in java.util.HashMap and java.util.TreeMap,No,,5,0,[],[],71
378,add more test cases to use ImmutablePair class as key for java.util.HashMap and java.util…,No,,2,0,[],[],35
377,LANG_1407 add DurationUtils,No,,1,0,[],[],557
376,Test cleanup,No,,4,0,[],[],7841
375,JUnit Jupiter migration completion,No,,2,0,[],[],4926
374,Update time tests to JUnit Jupiter,Yes,19:36:07,4,2,"['This dependency should have `test` scope.', 'Good catch, thanks.']","['Thanks! 👍 \r\n\r\nJust one small issue (see comment) and this is good to merge imho.', '']",1941
373,Update mutable tests to JUnit Jupiter,Yes,0:33:13,2,0,[],[],183
372,Update math tests to JUnit Jupiter,Yes,9:32:58,2,0,[],[],934
371,Update tuple tests to JUnit Jupiter,Yes,0:28:49,2,0,[],[],66
370,Update text tests to JUnit Jupiter,Yes,1:58:03,2,0,[],[],387
369,Update reflect tests to JUnit Jupiter,Yes,7:53:18,2,0,[],[],305
368,Update exception tests to JUnit Jupiter,Yes,2:04:29,2,0,[],[],108
367,Update event tests to JUnit Jupiter,Yes,20:23:29,2,0,[],[],69
366,Update concurrent tests to JUnit Jupiter,Yes,0:30:15,2,0,[],[],728
365,Travis: Also build with openjdk-ea,Yes,1:26:14,1,0,[],[],5
364,LANG_1407 Duration Utils,No,,0,0,[],[],317
363,Update builder tests to JUnit Jupiter,No,,3,0,[],[],353
362,Add a check to StringUtils.repeat() for large length repeat value,No,,8,14,"['Missing space between parameters', 'Missing space between parameters', 'Missing space between parameters', 'Missing space between parameters', 'Missing space between parameters', 'Missing space between parameters', 'Missing space between parameters', 'Missing space between parameters', 'Missing space between parameters', 'YIKES!\r\n\r\n![image](https://user-images.githubusercontent.com/11317222/47281690-e66d9080-d5e4-11e8-88fa-367c69cc53ba.png)\r\n', 'YIKES!\r\n\r\n![image](https://user-images.githubusercontent.com/11317222/47281690-e66d9080-d5e4-11e8-88fa-367c69cc53ba.png)\r\n', 'YIKES!\r\n\r\n![image](https://user-images.githubusercontent.com/11317222/47281690-e66d9080-d5e4-11e8-88fa-367c69cc53ba.png)\r\n', 'YIKES!\r\n\r\n![image](https://user-images.githubusercontent.com/11317222/47281690-e66d9080-d5e4-11e8-88fa-367c69cc53ba.png)\r\n', 'Good spot. Thanks']","['', '', '', '', '', '', '', '', '', '', '', '', '']",17
361,Add check to StringUtils.repeat() for large length results,No,,1,0,[],[],15
360,Lang 1407,No,,0,0,[],[],317
359,these 2 links seem to be broken,No,,2,0,[],[],4
358,"ClassUtils.getBaseClasses(desiredBase, packageName)",No,,4,27,"['might be better to validate against a regex. ', 'what if the derived class does not provide default ctor?', 'IMO - use of instanceof operator is preferred over method call.', 'should validate each element of the container for better accuracy.', 'should validate each element of the container for better accuracy.', 'The JavaDoc explicitly states that only classes that can be instantiated via a default ctor can be used:\r\n\r\n""This method only retrieves base classes/interfaces that have children that can be instantiated via a no-args constructor""\r\n\r\nIf the class can\'t be instantiated, an Exception is thrown and it won\'t be added to the list of returned classes:\r\n```\r\ncatch (Exception e) {\r\n    // Class was not instantiable via newInstance()\r\n}\r\n```', 'instanceof and isInstance() are the same.  You use instanceof when you know the actual class type which, in this case, is unknown.', 'Prefer Objects.requireNonNull instead of explicit `if` checks.', 'This is a good idea', 'This is a good idea', 'Will do', 'Will do', 'On 2nd thoughts, think I\'ll just take out ""packageName.contains(\'/\')"".  The packageName will be checked below that call.', 'This is a good idea but the Objects under test are hard to verify...I believe the getBaseClasses() will fail if the Objects returned are invalid.', 'This is a good idea but the Objects under test are hard to verify...I believe the getBaseClasses() will fail if the Objects returned are invalid.', 'I believe it would be better with dots in the end of sentence.', 'I believe it would be better with dots in the end of sentence.', 'This line could be improved. \r\nAt least, interfaces has no constructors.', 'Why do we need to call `newInstance()` on `Class<?>` if we return just `List<Class<?>>`?', 'To confirm that the class can actually be instantiated via the default constructor.  Notice the Exception comment and the comment above ""try {""', 'I have committed changes for this', 'I have committed changes for this', 'I have committed changes for this', 'I dont think that is a good idea to instantiate all classes, this makes the utility rather complicated to use.', 'Will that work with jmod or jar files or only with class directories?', ""@ecki  How is it complicated to use?  The unit tests I wrote show it's simple to use."", ""@ecki I'm not sure if it will work with jmod or jar files.  I designed the method to just work with class directories.""]","['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']",169
357,Proposal for LANG-1421,No,,2,6,"['`fatolse` -> `false` !', 'depending on how you feel, you could replace the `if the array is {@code null}` info with something about this method being null safe (to keep the wordage the same as other methods that use `null safe`)', ""Thank you for reviewing. I don't find a better replacement for the if sentence. I hope it is ok."", 'Should this really be `assertFalse`?\r\n`ObjectUtils.anyNull(null, null, null, null, FOO, BAR)` - should return `true`, because it has `null` elements in varargs.', 'Thank you. You are right. I will create a new commit.', ""This can be replaced by `return firstNonNull(values) == null`, although then you're doubling up on the null check.""]","['', '', '', '', '', '']",327
356,Move combine.children to manifestEntries in order to have right entries in MANIFEST.MF,No,,1,0,[],[],4
355,Use @ParameterizedTest to iterate over available locales,Yes,17:57:25,2,0,[],['TIL! Much simpler to read it. +1'],60
354,Convert tests for Validate to @Nested test,Yes,"1 day, 7:31:01",5,0,[],['And learned another new trick for JUnit 5. Keep these changes coming!!! 🎉 '],2696
353,WIP: LANG-1416: Update tests to JUnit5 via @boyarsky's converter,No,,8,0,[],[],23187
352,LANG-1416: Update to JUnit 5,Yes,1:02:09,2,0,[],[''],46
351,LANG-1417: Add @FunctionalInterface to ThreadPredicate and ThreadGrou…,Yes,0:19:25,1,0,[],[],11
350,Replace FindBugs with SpotBugs,Yes,"9 days, 3:03:58",1,0,[],['LGTM'],23
349,LANG-1417: Deprecate ThreadPredicate and ThreadGroupPredicate in favo…,No,,3,0,[],[],270
348,Explicit type parameters can be removed,Yes,"2 days, 1:40:28",1,0,[],"['LGTM', '']",72
347,Looks like Java 11 no longer fails the build,Yes,13:48:25,1,0,[],[],3
346,LANG-1415: Update Java Language requirement to 1.8,Yes,10:13:22,1,0,[],[''],22
345,add jvmLaunchers,No,,6,0,[],[],600
344,Adding method to remove special characters,No,,1,0,[],[],34
343,LANG-1341 update java doc to clarify use case of appendSuper(),No,,2,3,"[""Please don't reorganize imports"", 'Better use a JavaDoc Link here: `{@link #appendSuper(boolean)}`', 'The issues also suggested to add some documentation to `appendSuper(boolean)` making clear the implications of calling `super.equals(object)` when the class is a direct subclass ob `java.lang.Object`. I think we should add this.']","['', 'ping @swingfly . If you could review the pending review comments, I think this should be easy to review/merge. Thanks!']",13
342,LANG-1411: Add empty checks to ObjectUtils,Yes,"3 days, 11:09:37",2,0,[],[''],121
341,Update maven-pmd-plugin to latest version,Yes,23:06:55,1,0,[],['👏 🎉 '],2
340,[LANG-1406]  StringIndexOutOfBoundsException in StringUtils.replaceIgnoreCase,No,,6,7,"['Just leaving a comment here too to have a review here in GitHub. While your example works, as the character is considered already in upper case, the reverse case would still fail after changing from `toLowerCase` to `toUpperCase`. So I think we should find another solution or update the documentation stating how the code works with unicode.', ""Hi @kinow, yes you are right after I did try to come up with a draft java main to generate all || most unicode in string and compare it's length between original, toLowerCase() and to UpperCase().\r\n\r\n![image](https://user-images.githubusercontent.com/37996731/44028895-032488d4-9f2e-11e8-839b-c1259a182b8e.png)\r\n  \r\nIt's seem like no matter which one we pick (toLowerCase || toUpperCase), it would still tend to come up with a incorrect length.\r\n\r\nJust a quick question what you mean by remove the ```length( )``` mean? Would you mind to specify more on that? \r\n\r\nThanks, "", ""Oohh, great testing @HiuKwok ! Thanks for sharing here.\r\n\r\n>Just a quick question what you mean by remove the length( ) mean? Would you mind to specify more on that?\r\n\r\nSure. I think there could be a possibility to fix the issue by addressing how the length of the lower'ed/upper'ed text is used https://github.com/apache/commons-lang/blob/590f90889bf61a5570bd98b78e73410a07d7410b/src/main/java/org/apache/commons/lang3/StringUtils.java#L5603\r\n\r\nSo maybe there could be another way to work around the way we use the strings lengths, and avoid the exception."", ""@kinow May be try to store a original text.length before perform any upper || lower case operation and make use of it?\r\n\r\nhaha, it's just a thought. Would try out later "", '@kinow It turn out the problem is large than that, because the incorrect length basically affecting the whole method, especially the part which involve parsing inside the while loop.\r\n\r\nhttps://github.com/apache/commons-lang/blob/590f90889bf61a5570bd98b78e73410a07d7410b/src/main/java/org/apache/commons/lang3/StringUtils.java#L5612-L5619\r\n\r\nWhile string like following is entered, then Exception would be thrown on here instead.\r\nhttps://github.com/apache/commons-lang/blob/590f90889bf61a5570bd98b78e73410a07d7410b/src/main/java/org/apache/commons/lang3/StringUtils.java#L5613\r\n\r\n![image](https://user-images.githubusercontent.com/37996731/44082531-137cb1a0-9fe4-11e8-9219-8f373aebce67.png)\r\n\r\n\r\n\r\n', 'Yeah, a very slippery problem. We still have the option to simply document that the method does not work well with unicode strings. \r\n\r\nBut first I would like to spend at least a few hours with paper and pencil (and eraser, because this could take a bit till I give up or find a possible way around it), and perhaps even check in the mailing list if other devs have any idea.\r\n\r\nI think you found a very interesting problem (*)! Keep the ideas coming if you have any on how to solve this issue :+1: \r\n\r\n_* if I had more time, I would possibly either go through other methods checking for that or, just try some fuzzifier approach to test the whole project ! Not aware of any static or dynamic analysis tool that does that_', 'Hi all, Just a quick update finally I kind of figure the way out of this problem,\r\nwhile I am trying to make it happen (the implementation).\r\nBut the concept is mainly Normalize incoming word at the beginning of the method call by ```Normalizer.normalize()```\r\nIn this way the String.length() would return correct length even unicode is introduced and by having the correct String length, the original logic should function as normal ']","['', '', '', '', '', '', '', ""Hi @HiuKwok could you rebase your PR to fix the latest conflicts, please? Also, what's the status of the PR? Did you find another solution for the issue that you could summarize here?\r\n\r\nCheers\r\nBruno""]",72
339,[LANG-1354] Added Methods to FieldUtils to Return Non-Synthetic Fields From a Class,No,,2,0,[],[],174
338,LANG-1405 Remove check for Java 1.5,No,,1,0,[],[],4
337,LANG-1404 BooleanUtils.toBoolean(Integer) method added,No,,2,0,[],[],33
336,LANG-1402: Null/index safe get methods for ArrayUtils,Yes,"33 days, 3:07:15",4,9,"['Surely a negative index should return the default?', 'Does not agree with code', 'May be null', ""What does ill-formatted mean?\r\nCan also return null if the array element is present and null.\r\n\r\nI don't think this method is sufficiently useful to be worth adding"", ""ill-formatted?\r\n\r\nAgain, I don't see the point of this method.\r\nIt's a bit more flexible than the original method.\r\nBut it's still only useful for the case where you can choose a default value that does not appear in the array, and you still have to check whether the return value is the default or not."", 'Sorry, mistaken copy-paste there. Feel free to use this as a tutorial for how NOT to contribute.', 'Fixed.', ""My thought process was something similar to this https://github.com/apache/commons-lang/blob/master/src/main/java/org/apache/commons/lang3/StringUtils.java#L7456-L7458\r\n\r\nI would understand if Strings are understood well-enough to merit a true default value and generic arrays aren't, so as to justify removing the two-argument edition."", ""The usefulness of these would be to reduce some clutter in everyday development. Checking for both null and then length can be a tedious situation for developers striving to get high unit-test coverage. \r\n\r\nisArrayIndexValid would reduce the number of branches in a typical use case, whereas get is probably a bit simpler. I'm can't say this with any degree of certainty, but a correctly-placed null element probably requires yet another check after the fact. Something like:\r\n\r\nif(isArrayIndexValid(array, 0) && array[0] != null)\r\n""]","['', '', '', '', '', 'Generally this seems reasonable to me. @sebbASF - do you have any more points you want to make?']",31
335,LANG-1400: Add StringUtils.mask() function,No,,11,0,[],[],80
334,Code refactoring and cleaning,Yes,"7 days, 12:13:53",8,2,"['Why do we need `+` here?', ""Actually, the plus sign is redundant here. I've tried to link commits with only one type of changes and therefore haven't removed it.""]","['', '']",313
333,(doc) Fix typos in classes of tuple package,Yes,3:36:42,1,0,[],[],12
332,Add methods allowing masking of Strings,No,,8,0,[],[],251
331,LANG-1380: FastDateParser too strict on abbreviated short month symbols,No,,6,0,[],[],32
330,LANG-1397: WordUtils.wrap throws StringIndexOutOfBoundsException when wrapLength is Integer.MAX_VALUE,No,,5,0,[],[],10
329,"Travis: Add Java 10 ""Oracle JDK"", Java 10 ""OpenJDK"", Java 11 ""Oracle …",Yes,"11 days, 0:30:59",3,0,[],[''],41
328,[LANG-1238] Add overloaded methods to StringUtils with Pattern argument,No,,3,0,[],[],0
327,(doc) Remove invalid example of `lastIndexOf` from javadoc,No,,5,0,[],[],1
326,[LANG-1391] Improve Javadoc for StringUtils methods,No,,1,0,[],"['Change looks good. Tested the newly added lines in Eclipse, and results are all OK. +1']",9
325,LANG-1392 methods for getting first non empty or non blank value,No,,5,0,[],['excellently'],94
324,LANG-1390: StringUtils#join() for List<?>,No,,2,0,[],[],114
323,Add comparison methods to ObjectUtils,No,,4,0,[],[],124
322,(doc) Update GitHub PR help link,No,,2,0,[],[],2
321,SerializationUtilsTest cleanup,No,,3,0,[],"['Change looks good, much easier to read.\r\n If build server passes, +1\r\n\r\nThanks\r\nBruno']",124
320,Initial implementation of Span for LANG-1387,No,,0,0,[],[],1240
319,Contribution of Span implementations for LANG-1387,No,,1,0,[],[],1211
318,clean code,No,,3,0,[],[''],48
317,Predictable randomness in shuffle tests,No,,2,0,[],[],22
316,Remove inequality check from shuffle tests,No,,1,0,[],[],10
315,Get boolean value if the size of array is between two integer values,No,,1,0,[],[],16
314,LANG-1060 NumberUtils.isNumber assumes number starting with Zero is octal,No,,1,0,[],[],56
313,LANG-1060: NumberUtils.isNumber assumes number starting with Zero,No,,5,0,[],[],9
312,"LANG-1375: defaultString(str) reuses defaultString(str, defaultStr)",Yes,1:46:49,1,0,[],"[""Looks like no impact to external users. And we reduce code repetition. So +1, LGTM. I believe code coverage is not affected. There's a JIRA ticket created for this as well. Change looks great! Thanks for your contribution @codingsince1985 !""]",4
311,"LANG-1373 Stopwatch based capability for nested, named, timings ",No,,45,5,"['Here is needs to be four spaced as well. You can look at another file and compare that (e.g. https://github.com/apache/commons-lang/blob/f50ec5e608286b0c48d6b9b4c792352de8353804/src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java#L58).', ""Couldn't we return an read-only copy of the children here?"", 'Would it make much difference if we used an `ArrayList` here? We seem to `#add` only in `createChild()`, and not sure if we are using any head/tail operation, nor inserting with indexes. So maybe having an `ArrayList` would give us the same functionality for less memory?', 'done.', 'good point']","['', '', '', '', '']",1324
310,A small mistake in javadoc description.,No,,2,0,[],[],2
309,Fix EventCountCircuitBreaker increment batch,No,,10,0,[],"['Nice catch! Thanks for your contribution, and for including tests!']",17
308,LANG-1366 : Add Feature for No ClassName and MultiLine StringStyle,No,,6,11,"['Is this related to JSON?', 'Unfortunately we took a while to review this, sorry. Current release is 3.9. This would be 3.10 now, but can be fixed later after reviews :+1: ', 'Really nit-picking here, but other classes in this file are referencing it without the class name (as this is the same class...). So if possible, for consistency it could be the same, i.e. `return NO_CLASS_NAME_MULTI_LINE_STYLE;`. ', 'No, I removed the comment.', 'I updated the version to 3.10', 'Updated the return type.', 'As mentioned in #461 , maybe consider doing this work ahead of time?\r\n\r\n@kinow , what do you think?', ""Hi @Stzx \r\n\r\nUnfortunately I haven't had much experience with JUnit 5 yet. Looks to me like it will support multiple modifiers. But I couldn't find a recommendation, or even any deprecation, that would require dropping the `public` modifier. Do you know if that's a best practice, recommendation, or if it will be deprecated/required later?\r\n\r\nI found at least one file in their repo using the `public` modifier: https://github.com/junit-team/junit5/blob/f52ded2d2f331ca7dba738b53afa5b1c0f22a85d/platform-tests/src/jmh/java/org/junit/jupiter/jmh/AssertionBenchmarks.java"", ""Found one comment that appears to be from someone involved with the project: https://stackoverflow.com/a/55230350\r\n\r\nDoesn't seem to be required to use private, public, etc. It's up to the project."", 'From the links you provided, as well as what I saw from the official examples ([junit5-jupiter-starter-maven](https://github.com/junit-team/junit5/blob/f52ded2d2f331ca7dba738b53afa5b1c0f22a85d/platform-tests/src/jmh/java/org/junit/jupiter/jmh/AssertionBenchmarks.java)) and [user guide](https://junit.org/junit5/docs/current/user-guide/#writing-tests) seems to be determined by the project?\r\n\r\nLooks different styles of different projects.', ""Yeah, and if it's not something that can be checked with checkstyle or with the other build tools, we have no clear way to enforce... and having to ask users to alter their PR's can be a bit frustrating for the contributors.\r\n\r\nFor this reason I think it might be easier to just keep things as they are, and accept new submissions using either public, private, or package-protected.""]","['Minor comments, but no blockers. Two users commenting here, pull request looks good. I have no immediate use case that I can think of for this (except for maybe logging perhaps). But also have no objection. Any thoughts from others?\r\n\r\nThanks for the pull request @pckeyan !\r\nBruno', '', '', '', 'Thanks for updating it so quickly (and you updated tests to junit5 too 🎉).\r\n\r\nLooks good to me. Approving but will wait a bit to see if anybody else wants to review too.\r\n\r\nThanks!!!\r\nBruno', '', '', '', '', '', '']",185
307,Fix TypeUtils.parameterize to work correctly with narrower-typed array,No,,3,0,[],[],12
306,.travis: add IBM JDK 8,No,,2,0,[],[],3
305,Remove unnecessary testing comments,No,,2,0,[],[],39
304,Fix DateUtilsTest to work reliably on Java 9,No,,4,0,[],[],415
303,doc: remove escape SQL references from javadoc,No,,2,0,[],[],5
302,Remove ObjectUtils' trailing white spaces,Yes,3:52:41,3,0,[],[],6
301,Clean up EventUtilsTest,Yes,22:28:33,5,1,['We prefer explicit boxing of primitve values.'],"['', 'Nice, but please restore the explicit boxing.']",42
300,Improve StringUtils#replace throughput,No,,4,0,[],[''],4
299,Add module-info for Java 9,No,,37,9,"['Why did you removed the build for jdk7 and 8?\r\nIf lang3 still support them then it should be runned tests on 7 and 8', 'With the proposed change, the build can only occur on Java 9. (Java 9 is needed to compile `module-info.java`).', ""Sounds sad :( Especially because, I guess, jdk8 compiler won't just ignore the `module-info.java`.\r\nMaybe some other projects will even try to generate the `module-info.java`"", 'I think we should discuss this on the developer mailing list.', 'a small difference and I am just curious to know, why is this not `transitive` which was what I saw using `jdeps --generate-module-info`?', 'Because this is a massive dependency, and we need to avoid dragging it all in for just a small percentage of users. Using `requires static` is an abuse of the module system, but the best option available. `requires transitive` would be the right solution normally.', 'Nitpick: I think we can remove this line, because running `cobertura` without uploading to `coveralls` mostly just wastes cpu cycles.', ""The right answer will be to move from Cobertura to JaCoCo (as JaCoCo is the more alive project). But right now, Coveralls also doesn't work with JaCoCo."", ""Isn't the best option to refactor the concurrent package to separate project? Doesn't seem like a great fit here anyhow.""]","['', '', '', '', '', '', '', '', '']",210
298,Add an instanceof test in the implementation of equals(Object obj).,No,,4,0,[],[],2
297,Add a rule of Locale.ENGLISH to String.toUpperCase() method.,No,,11,1,['Please do not include unrelated changes in a single pull request. Thanks!'],"['', 'I believe this is incorrect and Locale.ROOT should be use.']",13
296,LANG-1355: Add FastTimeZone to decrease TimeZone.getTimezone latency,No,,4,12,"[""Maybe instead of\r\n\r\n> A GMT offset must be either 'Z' or match (GMT)? hh?(:?mm?)?\r\n\r\nIt should be\r\n\r\n> A GMT offset must be 'Z', or 'UTC', or match (GMT)? hh?(:?mm?)?\r\n\r\n?\r\n\r\n"", ""Do we need a private constructor to prevent instantiation of FastTimeZone? It seems to contain only static methods. Not sure if that's the intended design. But noticed it while looking at the cobertura report (which is looking great)."", 'TimeZone is Serializabe. Do we need to add a serialVersionUID here?', 'This test is wrong. Its title states that the minutes will be out of range, but the hour is actually out of range (60). Minute is 0, but never gets checked.', 'Maybe add something like\r\n\r\n```\r\n@Test\r\n    public void testToString() {\r\n        Assert.assertEquals(""[GmtTimeZone id=\\""GMT+23:00\\"",offset=82800000]"", new GmtTimeZone(false, 23, 0).toString());\r\n    }\r\n\r\n    @Test\r\n    public void testGetOffset() {\r\n        Assert.assertEquals(82800000, new GmtTimeZone(false, 23, 0).getOffset(1, 1, 1, 1, 1, 1));\r\n    }\r\n```\r\n\r\nWith these two tests we reach 100% for GmtTimeZone.', 'done', 'done', 'great catch! done', 'great catch! thanks.\r\ndone.', 'done', 'Nitpick: either a superfluous `(` or a missing `)`', 'In future patches, you can use the active voice for Javadocs: ""Gets a TimeZone..."" instead of ""Get..."". :-)']","['Great pull request! Minor remarks, most questions. Just one test that is sending the wrong parameter. Site builds fine, reports look good, no regression, no issues found. Kudos!', '', '', '', '', '', '', '']",431
295,ExtendedMessageFormatTest integers,No,,6,0,[],[],4
294,Added indexesOf method,No,,3,2,"['Could you fix the formatting, please?', 'Ha-ha，They refused to merge only two lines of code modification']","['', '']",32
293,Char utils test,No,,2,0,[],[],15
292,LANG-1348 - StackOverflowError on TypeUtils.toString,No,,2,0,[],[],52
291,LANG-1348 - StackOverflowError on TypeUtils.toString,No,,0,0,[],[],0
290,Added string methods,No,,2,1,['Could you fix the indentation please? Let it be properly aligned.'],[''],29
289,Boolean comparisons in CharRange,No,,2,0,[],[],4
